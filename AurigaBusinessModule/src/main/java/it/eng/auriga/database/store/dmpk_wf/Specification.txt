1        PACKAGE DMPK_WF AUTHID CURRENT_USER IS
2        
3        	/****************************************************		INFORMAZIONI GENERALI		*******************************************************/
4        	/************** Argomenti delle stored per il controllo della transazione:											*******/
5        	/************** FlgRollBckFullIn -> se 1 in caso di errore viene fatta la rollback completa (non a savepoint), 					*******/
6        	/************** 				altrimenti la rollback delle sole modifiche effettuate nella stored						*******/
7        	/************** 				ATTENZIONE: la rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log			*******/
8        	/************** FlgAutoCommitIn  -> se vale 1, dopo la rollback e qualunque sia l'esito (positivo o no), la stored esegue una commit finale *****/
9        	/************** Tutte le funzioni/procedure che NON hanno gli argomenti in input FlgRollBckFullIn e FlgAutoCommitIn 				*******/
10        	/************** NON ESEGUONO AL LORO INTERNO ALCUNA COMMIT nè ROLLBACK 												*******/
11        
12        	/************** Tutte le funzioni, tranne quelle da utilizzarsi nelle select, restituiscono 1 in caso di successo, altrimenti 0		*******/
13        	/************** Tali funzioni restituiscono, in caso di result 0, un n.ro, un contesto e un messaggio di errore:					*******/
14        	/************** il n.ro è: <0 se errore ORACLE non specificamente gestito 											*******/
15        	/**************		   da 1->1000 errore "grave" (SEVERE_ERROR) gestito											*******/
16        	/**************		   >1000 errore non grave gestito														*******/
17        	/************** il contesto indica il package e/o funzione/procedura in cui si è verificato l'errore							*******/
18        
19        	DEF_MSG_ATTIV_URL		CONSTANT	VARCHAR2(1000):='MSG_ATTIV';
20        	DEF_SCELTA_ESITO_URL	CONSTANT	VARCHAR2(1000):='SCELTA_ESITO';
21        	DEF_SCELTA_DEST_URL	CONSTANT	VARCHAR2(1000):='SCELTA_DEST';
22        
23        
24        	/*********** funzione per ottenere il PROC_DEF_ID_ di un'istanza di processo di cui si specifica in input l'ID	*******/
25        	function GetProcDefIdFlussoWF(
26        			CIFlussoWFIn			IN	VARCHAR2)		--(obblig.) Id. del flusso WF (ID_ dell'istanza di processo nel caso di Activiti)
27        			return VARCHAR2;							-- è NULL in caso di flusso inesistente
28        
29        	/***********funzione per ottenere la data di avvio di un flusso WF ******/
30        	function GetTsBeginFlussoWF(
31        			CITypeFlussoWFIn		IN	VARCHAR2,		-- Id. del tipo di flusso WF (KEY_ o PROC_DEF_ID_ del processo nel caso di Activiti)
32        			CIFlussoWFIn			IN	VARCHAR2)		--(obblig.) Id. del flusso WF (ID_ dell'istanza di processo nel caso di Activiti)
33        			return DATE;								-- è NULL in caso di flusso inesistente
34        
35        	/****** serve ad ottenere l'XML in notazione BPMN 2.0 secondo cui si svolge un flusso di cui si forniscono in input tipo (KEY_ o PROC_DEF_ID_) e data di avvio ******/
36        	function GetBPMNXml(
37        			CITypeFlussoWFIn		IN	VARCHAR2)		--(obblig.) Id. del tipo e versione di flusso WF (PROC_DEF_ID_ del processo nel caso di Activiti) di cui si vuole recuperare l'XML in notazione BPMN
38        			return CLOB;								-- XML in notazione BPMN 2.0 contenente il flusso modellato corrispondente alla data istanza di processo
39        
40        	/***** serve ad ottenere la variabile di "esito task" di una data attività di cui si passa in input l'internal name (TASK_DEF_KEY_) e che è in un flusso BPMN il cui XML viene passato anch'esso in input *****/
41        	function GetVariabileEsitoTask(
42        			BPMNXml				IN		CLOB,						-- (obblig) XML con il flusso in notazione BPMN 2.0 all'interno del quale ricercare la variabile esito task del task specificato
43        			ActivityNameIn		IN		VARCHAR2)					-- (obblig.) Nome identificativo (TASK_DEF_KEY_) dell'attività di cui ottenere la variabile di esito task
44        			return VARCHAR2;										-- Nome della variabile di "esito task" se presente
45        
46        	/****** funzione per testare se in un flusso di un dato tipo avviato ad una certa data esiste un'attività (userTask) con un certo display name *****/
47        	function TestIsAttivita(
48        			DisplayNameAttIn		IN	VARCHAR2,		--(obblig) Nome (NAME_ nel caso di Activiti) dello userTask di cui testare l'esistenza
49        			CITypeFlussoWFIn		IN	VARCHAR2,		--(obblig.) Id. del tipo e versione di flusso WF (PROC_DEF_ID_ del processo nel caso di Activiti) in cui testare l'esistenza dell'attività
50        			TsBeginFlussoIn			IN	DATE DEFAULT NULL)			-- NON utilizzata
51        			return PLS_INTEGER;							-- 1=test positivo (esiste), 0=test negativo (non esiste) o errore
52        
53        
54        	-----overload della precedente, con degli argomenti in output: internal name dell'attività e flag che indica se attività con esiti
55        	function TestIsAttivita(
56        			DisplayNameAttIn		IN	VARCHAR2,		--(obblig) Nome (NAME_ nel caso di Activiti) dello userTask di cui testare l'esistenza
57        			CITypeFlussoWFIn		IN	VARCHAR2,		--(obblig.) Id. del tipo e versione di flusso WF (PROC_DEF_ID_ del processo nel caso di Activiti) in cui testare l'esistenza dell'attività
58        			TsBeginFlussoIn			IN	DATE DEFAULT NULL,			-- NON utilizzata
59        			ActivityNameOut			OUT	VARCHAR2,		-- Internal name (TASK_DEF_KEY_ per Activiti) dell'attività trovata
60        			FlgConEsitiOut			OUT	PLS_INTEGER,	-- (valori 1/0/NULL) Se 1 indica che è un'attività con esiti
61        			VariabileEsitoOut		OUT	VARCHAR2)		-- Nome della variabile dell'esito
62        			return PLS_INTEGER;							-- 1=test positivo (esiste), 0=test negativo (non esiste) o errore
63        
64        	-----analoga alla precedente, con in input l'internal id del task e in output gli argomenti: display name dell'attività e flag che indica se attività con esiti
65        	function TestIsAttivita_byID(
66        			ActivityNameIn			IN	VARCHAR2,		-- (obblig) Internal name (TASK_DEF_KEY_ per Activiti) dell'attività
67        			CITypeFlussoWFIn		IN	VARCHAR2,		--(obblig.) Id. del tipo e versione di flusso WF (PROC_DEF_ID_ del processo nel caso di Activiti) in cui testare l'esistenza dell'attività
68        			TsBeginFlussoIn			IN	DATE DEFAULT NULL,			-- NON utilizzata
69        			DisplayNameAttOut		OUT	VARCHAR2,		-- Nome (NAME_ nel caso di Activiti) dello userTask di cui testare l'esistenza
70        			FlgConEsitiOut			OUT	PLS_INTEGER,	-- (valori 1/0/NULL) Se 1 indica che è un'attività con esiti
71        			VariabileEsitoOut		OUT	VARCHAR2)		-- Nome della variabile dell'esito
72        			return PLS_INTEGER;							-- 1=test positivo (esiste), 0=test negativo (non esiste) o errore
73        
74        	/***** serve ad ottenere la lista delle scelte possibili per una variabile di "esito task" in un dato flusso BPMN il cui XML viene passato in input *****/
75        	function GetScelteVariabileEsito(
76        			BPMNXml				IN		CLOB,						-- (obblig) XML con il flusso in notazione BPMN 2.0 all'interno del quale ricercare le scelte possibili della variabile esito
77        			VariabileEsitoIn	IN		VARCHAR2)					-- (obblig.) Nome della variabile di "esito task" di cui ottenere le possibili scelte
78        			return DMVA_STRING ;									-- scelte possibili per la variabile esito
79        
80        	/***** serve ad ottenere la lista dei task - id e name, ovvero TASK_DEF_KEY_ e NAME_ - presenti in un dato flusso BPMN il cui XML viene passato in input *****/
81        	function GetTaskFlussoWF(
82        			BPMNXml				IN		CLOB)						-- (obblig) XML con il flusso in notazione BPMN 2.0 all'interno del quale ricercare i task disponibili
83        			return DMTO_MATRICE_VALORI;								-- task trovati (null in caso di errore)
84        																	-- ogni task-riga ha 2 colonne: la 1 con il TASK_DEF_ID_ e la 2a con il NAME_ del task
85        
86        	/**** Funzione per calcolare la dimensione (n.ro di righe) della pagina delle attività per un certo utente di lavoro in un certo dominio di lavoro ****/
87        	FUNCTION CalcolaDimPaginaAtt(
88        			FlgTpDominioAutIn		IN		PLS_INTEGER ,					-- (obblig.) Indica il tipo di dominio di lavoro: 1 = Schema DB; 2 = Soggetto produttore; 3 = AOO
89        			IdDominioAutIn		IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%TYPE DEFAULT NULL,
90        																-- (obblig. se FlgTpDominioAutIn vale 2 o 3) Identificativo del dominio di lavoro, vale a dire l'id. del soggetto produttore o AOO se FlgTpDominioAutOut vale 2 o 3
91        			IdUserLavoroIn		IN		DMT_USERS.ID_USER%TYPE,				-- (obblig.) Identificativo dell'utente di lavoro
92        			DimPaginaOut		OUT		PLS_INTEGER,					-- Dimensione della pagina calcolata
93        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
94        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
95        			ErrMsgOut			OUT 		VARCHAR2)						-- Messaggio d'errore
96        			RETURN PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine, altrimenti 0
97        
98        	/***** Funzione per ottenere l'URL/nome identificativo dell'eventuale maschera specifica corrispondente ad una data attività WF in un dato dominio di lavoro ******/
99        	function GetURLAttivita(
100        			ActivityNameIn		IN		DMT_ATTIVITA_WF.ACTIVITY_NAME%type,		-- (obblig.) Nome identificativo (TASK_DEF_KEY_ nel caso di Activiti) dell'attività WF per cui trovare l'URL associato
101        			IdDominioLavoroIn		IN		INTEGER					-- Id. del dominio di lavoro (sogg. prod./AOO) in cui trovare l'URL. Se NULL si intende che il dominio di lavoro è lo schema
102        		) return VARCHAR2;										-- URL/nome identificativo che rimanda alla maschera di gestione specifica dell'attività nel dato dominio di lavoro
103        														-- Se NULL vuol dire che non c'è una maschera specifica
104        
105        	/****** Funzione per stabilire, in un dato processo, a che URL/nome identificativo maschera specifica corrisponde una data attività WF ricavando l'URL solo in base al nome dell'attività stessa 	******/
106        	/*****  Se non c'è un URL ricavabile dal solo nome dell'attività la funzione restituisce comunque 1 e UrlFromNomeAttOut è NULL										******/
107        	function GetURLFromNameAtt(
108        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,
109        																-- (obblig). Codice identificativo del token di connessione
110        			IdUserLavoroIn		IN		DMT_USERS.ID_USER%type DEFAULT NULL,				-- Id. dell'utente a nome di cui si sta lavorando. Se non valorizzato è l'utente connesso
111        			IdProcessIn		IN		DMT_PROCESSES.ID_PROCESS%type,					-- (obblig.) Id. del processo
112        			ActivityNameIn		IN		DMT_ATTIVITA_WF.ACTIVITY_NAME%type,				-- (obblig.) Nome identificativo (TASK_DEF_KEY_ nel caso di Activiti) dell'attività WF per cui trovare l'URL associato
113        			UrlFromNomeAttOut	OUT		VARCHAR2,							-- Eventuale URL/nome identificativo maschera specifica associato ricavabile dal nome dell'attività
114        			IdTyEvtOut		OUT		INTEGER,							-- Id. del tipo evento corrispondente all'attività
115        			NomeTyEvtOut		OUT		VARCHAR2,							-- Nome del tipo evento corrispondente all'attività
116        			FlgEvtDurativoOut	OUT		PLS_INTEGER,							-- (valori 1/0/NULL) Se 1 il tipo evento IdTyEvtOut è durativo, altrimenti è puntuale
117        			ErrContextOut		OUT		VARCHAR2,							-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
118        			ErrCodeOut		OUT		PLS_INTEGER,							-- N.ro errore di uscita
119        			ErrMsgOut		OUT 		VARCHAR2							-- Messaggio d'errore
120        			) return PLS_INTEGER;											-- Vale 1 se tutto è andato a buon fine, altrimenti 0
121        
122        	/****** Funzione da richiamare dopo l'avvio di un flusso WF da collegare ad un processo da registrare ex-novo in banca dati o in essa già presente	*******/
123        	/****** Contestualmente permette di settare/aggiornare alcuni dati base del processo oltre al flusso associato						*******/
124        	function StartFlussoWFForProcess(
125        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,
126        																-- (obblig). Codice identificativo del token di connessione
127        			IdUserLavoroIn		IN		DMT_USERS.ID_USER%type DEFAULT NULL,				-- Id. dell'utente a nome di cui si avvia il processo. Se non valorizzato è l'utente connesso
128        			CIFlussoWFIn		IN		DMT_PROCESSES.PROV_CI_FLUSSO_WF%type,				-- (obblig) Identificativo del flusso workflow associato (PROC_INST_ID nel caso di Activiti)
129        			IdProcessIO		IN OUT		DMT_PROCESSES.ID_PROCESS%type,					-- Id. del processo cui associare il flusso da avviare. Se NULL il processo è da creare ex-novo
130        			IdProcessTypeIn		IN		DMT_PROCESSES.ID_PROCESS_TYPE%type DEFAULT dmpk_utility.GetValConfigParamNumber(1, NULL, 'NUM_VAL_NO_UPD'),
131        																-- (obblig.) Identificativo del tipo di processo per cui avviare il flusso
132        			CIProvProcessIn		IN		DMT_PROCESSES.PROV_CI_PROCESS%type DEFAULT dmpk_utility.GetValConfigParamText(1, NULL, 'STR_VAL_NO_UPD'),
133        																-- Codice identificativo del processo in un eventuale sistema di provenienza
134        			TsAvvioProcIn		IN		VARCHAR2 DEFAULT dmpk_utility.GetValConfigParamText(1, NULL, 'DATE_VAL_NO_UPD'),
135        																-- Timestamp di avvio del processo (nel formato dato dal parametro di conf. FMT_STD_TIMESTAMP). Se non specificato e IdProcessIO è NULL si intende pari a data e ora correnti
136        			DtDecorrenzaProcIn	IN		VARCHAR2 DEFAULT dmpk_utility.GetValConfigParamText(1, NULL, 'DATE_VAL_NO_UPD'),
137        																-- Data di decorrenza dei termini del processo (nel formato dato dal parametro di conf. FMT_STD_DATA).
138        			OggettoIn			IN		DMT_PROCESSES.OGGETTO%type DEFAULT dmpk_utility.GetValConfigParamText(1, NULL, 'STR_VAL_NO_UPD'),
139        																-- Oggetto/descrizione del processo
140        			FlgTpObjProcessOnIn	IN		VARCHAR2 DEFAULT dmpk_utility.GetValConfigParamText(1, NULL, 'STR_VAL_NO_UPD'),
141        																-- Indica il tipo di oggetto cui si riferisce il processo. Valori possibili:
142        																-- C	=	Copia di unità documentaria
143        																-- U	=	Unità documentaria
144        																-- F	=	Folder
145        																-- NULL = Processo non relativo a singola copia, unità doc. o folder
146        			IdObjProcessOnIn		IN		INTEGER DEFAULT dmpk_utility.GetValConfigParamNumber(1, NULL, 'NUM_VAL_NO_UPD'),
147        																-- Id. dell'eventuale copia/unità documentaria/folder cui si riferisce il processo (può essere valorizzato solo se lo è FlgTpPbjProcessOnIn)
148        			IdProcessParentIn		IN		DMT_PROCESSES.ID_PROCESS_PARENT%type DEFAULT dmpk_utility.GetValConfigParamNumber(1, NULL, 'NUM_VAL_NO_UPD'),
149        																-- Id. dell'eventuale processo padre del processo per cui avviare il flusso WF
150        			MotivazioniAvvioIn	IN		DMT_PROCESSES.MOTIVAZIONI%type DEFAULT dmpk_utility.GetValConfigParamText(1, NULL, 'STR_VAL_NO_UPD'),
151        																-- Motivazioni per cui ha luogo il processo
152        			NoteProcIn			IN		DMT_PROCESSES.NOTE%type DEFAULT dmpk_utility.GetValConfigParamText(1, NULL, 'STR_VAL_NO_UPD'),
153        																-- Note del processo
154        			AttributiAddAvvioIn	IN		CLOB DEFAULT NULL,				-- Lista degli eventuali attributi con cui caratterizzare l'avvio (XML conforme a schema LISTA_STD.xsd)
155        																-- Ogni valore è un tag Riga che contiene 3 colonne che devono essere tutte valorizzate:
156        																-- 1: (obblig.) Nome dell'attributo (stringa lung. max. 250)
157        																-- 2: (obblig.) Tipo del valore (valori possibili: S=Stringa, N=Numerico, D=Data/Timestamp)
158        																-- 3: (obblig.) Valore (se è un numerico deve avere la "," come separatore dei decimali; se è una data deve avere il formato DD/MM/RRRR HH24:MI:SS)
159        																-- Un attributo con un certo nome può avere più valori (tutti dello stesso tipo) che vengono salvati mantenendo l'ordine con cui figurano nell'XML
160        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
161        																-- ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
162        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
163        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
164        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
165        			ErrMsgOut			OUT 		VARCHAR2						-- Messaggio d'errore
166        			) return PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine, altrimenti 0
167        
168        	/****** Funzione per ottenere la descrizione della fase corrente del flusso WF associato ad un dato processo (ancora in corso) ******/
169        	function GetDesFaseCorrente(
170        			IdProcessIn			IN		DMT_PROCESSES.ID_PROCESS%type			-- (obblig.) Identificativo del processo
171        			)return VARCHAR2;										-- restituisce la descrizione della fase corrente (attiva) del flusso del processo
172        																-- è NULL in caso di errore o se non c'è una fase attiva (flusso concluso)
173        
174        	/***** Funzione per testare se una certa attività WF è eseguibile nel flusso WF di un dato processo 			*****/
175        	/***** tenuto conto dei soli vincoli legati ai documenti (redazione/firma/prot./repertoriazione ecc)			*****/
176        	function CtrlExecAtt_byDoc(
177        			FlgWhenCtrlIn		IN		VARCHAR2,						-- (obblig.; valori A/B) Indica quando effettuo il controllo: B=Prima di completare l'attività;  A=Dopo averla completata
178        			IdProcessIn			IN		DMT_PROCESSES.ID_PROCESS%type,		-- (obblig.) Identificativo del processo in cui verificare se l'attività è eseguibile
179        			ActivityNameIn		IN		DMT_ATTIVITA_WF.ACTIVITY_NAME%type,		-- (obblig.) Nome identificativo (ACTIVITY_NAME nel caso di Oracle WF) dell'attività WF da testare se disponibile
180        			EsitiAttIn			IN		DMVA_STRING DEFAULT NULL,				-- Esito/i con cui eseguire l'attività (viene considerato solo se FlgWhenCtrlIn='A')
181        			WarningMsgOut		OUT		VARCHAR2,						-- Messaggio di warning da dare all'utente (solo in caso di return value 1): valorizzato quando ci sono obbligatorietà violate che non sono però bloccanti
182        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
183        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
184        			ErrMsgOut			OUT 		VARCHAR2						-- Messaggio d'errore o motivo per cui il controllo dà esito negativo
185        			)return PLS_INTEGER;										-- Vale 1 se il test è positivo (non ci sono obbligatorietà bloccanti violate), 0 se non lo è o in caso di errore
186        
187        	/***** Funzione per testare se una certa attività WF è eseguibile nel flusso WF di un dato processo 			*****/
188        	/***** tenuto conto dei soli vincoli legati ai soggetti (interni ed esterni) del processo					*****/
189        	function CtrlExecAtt_bySogg(
190        			FlgWhenCtrlIn		IN		VARCHAR2,						-- (obblig.; valori A/B) Indica quando effettuo il controllo: B=Prima di completare l'attività;  A=Dopo averla completata
191        			IdProcessIn			IN		DMT_PROCESSES.ID_PROCESS%type,		-- (obblig.) Identificativo del processo in cui verificare se l'attività è eseguibile
192        			ActivityNameIn		IN		DMT_ATTIVITA_WF.ACTIVITY_NAME%type,		-- (obblig.) Nome identificativo (ACTIVITY_NAME nel caso di Oracle WF) dell'attività WF da testare se disponibile
193        			EsitiAttIn			IN		DMVA_STRING DEFAULT NULL,				-- Esito/i con cui eseguire l'attività (viene considerato solo se FlgWhenCtrlIn='A')
194        			WarningMsgOut		OUT		VARCHAR2,						-- Messaggio di warning da dare all'utente (solo in caso di return value 1): valorizzato quando ci sono obbligatorietà violate che non sono però bloccanti
195        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
196        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
197        			ErrMsgOut			OUT 		VARCHAR2						-- Messaggio d'errore o motivo per cui il controllo dà esito negativo
198        			)return PLS_INTEGER;										-- Vale 1 se il test è positivo (non ci sono obbligatorietà bloccanti violate), 0 se non lo è o in caso di errore
199        
200        	/***** Funzione per testare se una certa attività WF è eseguibile nel flusso WF di un dato processo 			*****/
201        	/***** tenuto conto dei soli vincoli legati agli attributi 										*****/
202        	function CtrlExecAtt_byAttr(
203        			FlgWhenCtrlIn		IN		VARCHAR2,						-- (obblig.; valori A/B) Indica quando effettuo il controllo: B=Prima di completare l'attività;  A=Dopo averla completata
204        			IdProcessIn			IN		DMT_PROCESSES.ID_PROCESS%type,		-- (obblig.) Identificativo del processo in cui verificare se l'attività è eseguibile
205        			ActivityNameIn		IN		DMT_ATTIVITA_WF.ACTIVITY_NAME%type,		-- (obblig.) Nome identificativo (ACTIVITY_NAME nel caso di Oracle WF) dell'attività WF da testare se disponibile
206        			EsitiAttIn			IN		DMVA_STRING DEFAULT NULL,				-- Esito/i con cui eseguire l'attività (viene considerato solo se FlgWhenCtrlIn='A')
207        			WarningMsgOut		OUT		VARCHAR2,						-- Messaggio di warning da dare all'utente (solo in caso di return value 1): valorizzato quando ci sono obbligatorietà violate che non sono però bloccanti
208        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
209        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
210        			ErrMsgOut			OUT 		VARCHAR2						-- Messaggio d'errore o motivo per cui il controllo dà esito negativo
211        			)return PLS_INTEGER;										-- Vale 1 se il test è positivo (non ci sono obbligatorietà bloccanti violate), 0 se non lo è o in caso di errore
212        
213        	/***** Funzione per tracciare l'esecuzione di una certa attività del flusso WF di un processo (anche se attività non disponibile a livello di workflow)		******/
214        	/***** Nel caso di Activiti viene richiamata prima di fare il completamento del task lato Activiti (se va fatto). 											******/
215        	/***** Restituisce FlgActToCompleteInWFOut che se 1 indica che il task è da completare anche lato Activiti, se 0 no											******/
216        	/***** Restituisce anche VariabileEsitoOut con l'id. dell'eventuale variabile da settare lato Activiti prima di completare il task 							******/
217        	/***** al fine di definire il ramo di flusso con cui il flusso procederà (nel caso di più rami condizionati)												******/
218        	/***** ATTENZIONE: vengono fatti i controlli che sia un'attività fattibile nella fase corrente in base al flusso workflow del processo + quelli 			******/
219        	/*****		 sul fatto che siano siano assolti gli obblighi relativi a documenti, soggetti, attributi e altre attività necessari per completare l'attività  ******/
220        	/*****		 invece non vengono fatti controlli di alcun tipo sull'abilitazione degli utenti connesso e di lavoro ad effettuare l'attività 					******/
221        	/*****		 non ci sono neppure controlli che il nuovo assegnatario, se specificato e se l'attività comporta trasmissione/cambio ass., sia uno di quelli	******/
222        	/*****		 consentiti in base ai possibili destinatari della trasmissone e in base alla fase in cui mi troverò dopo il completamento dell'attività		******/
223        	function ExecAttFlusso(
224        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,
225        																-- (obblig). Codice identificativo del token di connessione
226        			IdUserLavoroIn		IN		DMT_USERS.ID_USER%type DEFAULT NULL,				-- Id. dell'utente a nome di cui si svolge l'attività. Se non valorizzato è l'utente connesso
227        
228        			IdProcessIn		IN		DMT_PROCESSES.ID_PROCESS%type,					-- (obblig.) Identificativo del processo in cui eseguire l'attività
229        			ActivityNameIn		IN		VARCHAR2,									-- (obblig.) Identificativo del task da completare (TASK_DEF_ID_ nel caso di Activiti)
230        			MessaggioIn		IN		DMT_PROCESS_HISTORY.MESSAGGIO%type DEFAULT NULL,		-- Messaggio da legare all'esecuzione dell'attività
231        			LogInfoIn		IN		DMT_PROCESS_HISTORY.LOG%type DEFAULT NULL,			-- Informazioni di log da associare all'esecuzione dell'attività
232        			XMLAssegnatariIn	IN		CLOB,								-- XML (conforme allo schema LISTA_STD.xsd) con l'indicazione del/i nuovi assegnatari della copia di unità documentaria/unità documentaria/folder su cui agisce il processo: viene considerato e gestito solo se l'attività comporta una trasmissione/cambio assegnazione
233        																-- Gli assegnatari sono soggetti interni e possono essere più di uno solo se il processo riguarda un'unità documentaria o una sua copia
234        																-- Ogni tag "Riga" rappresenta un soggetto assegnatario ed ha 8 colonne con i seguenti significati:
235        																-- 	1: FLG_TIPO (obblig.) Indica il tipo di soggetto. Valori possibili:
236        																		-- 	UT 	= Utente
237        																		--	SV	= Scrivania virtuale
238        																		--	UO	= Unità organizzativa
239        																		--	G	= Gruppo (possibile solo se il processo è relativo a unità documentaria o sua copia)
240        																		--	R	= Ruolo contestualizzato ovvero i soggetti che hanno un certo ruolo amministrativo (eventualmente rispetto ad una certa UO o un dato livello della struttura organizzativa/tipo di UO o entrambi)(possibile solo se il processo è relativo a unità documentaria o sua copia)
241        																--	2: ID_IN_ANAG_PROV (obblig) Identificativo (PK) di chi o cosa l'oggetto rappresenta nella sua "anagrafica":
242        																		--		è un ID_UO di DMT_STRUTTURA_ORG se FLG_TIPO=UO,
243        																		--		è un ID_GRUPPO di DMT_GRUPPI se FLG_TIPO=G
244        																		--		è un ID_USER di DMT_USERS se FLG_TIPO=UT
245        																		--		è un ID_SCRIVANIA di DMT_SCRIVANIE_VIRTUALI se FLG_TIPO=SV
246        																		--		è un ID_RUOLO_AMM di DMT_RUOLI_AMM se FLG_TIPO=R
247        																--	3: VS_LIVELLO_SO Può essere valorizzato solo se FLG_TIPO=R. Valori da 1 a n
248        																		-- Indica il livello della struttura organizzativa in cui si espleta il ruolo (1 è il livello più alto) identificato da ID_IN_ANAG_PROV
249        																--	4: VS_COD_TIPO_UO Può essere valorizzato solo se FLG_TIPO=R. Da valorizzare in alternativa a VS_LIVELLO_SO
250        																		-- E' il codice del tipo di UO in cui si espleta il ruolo (valori da cod_value della dictionary entry con i tipi di UO) identificato da ID_IN_ANAG_PROV
251        																--	5: VS_ID_UO Identificativo della UO in cui si espleta il ruolo o da cui risalire alla/e UO (con il livello o tipo indicati) in cui si espleta il ruolo identificato da ID_IN_ANAG_PROV
252        																		-- Può essere valorizzato solo se FLG_TIPO=R.
253        																--	6: FLG_INCL_SOTTOUO Può essere valorizzato solo se FLG_TIPO=R e VS_ID_UO è valorizzato. Valori ammessi: 1, 0, NULL
254        																--	7: VS_UO_CON_RUOLO_PROC	Può essere valorizzato solo se FLG_TIPO=R. Alternativo rispetto a VS_ID_UO
255        																		-- E' il ruolo di processo (es: ufficio proponente) che hanno la/e UO in cui si espleta il ruolo o da cui risalire alla/e UO (con il livello o tipo indicati) in cui si espleta il ruolo identificato da ID_IN_ANAG_PROV
256        																--	8: RIF_SV_CON_RUOLO_PROC Può essere valorizzato solo se FLG_TIPO=R e se VS_LIVELLO_SO è valorizzato. Alternativo rispetto a VS_ID_UO e VS_UO_CON_RUOLO_PROC
257        																		-- E' il ruolo di processo (es: Assessore di riferimento) che hanno la/e scrivanie da cui risalire alla/e UO (con il livello indicato) in cui si espleta il ruolo identificato da ID_IN_ANAG_PROV
258        			AttributiAddIn		IN		CLOB DEFAULT NULL,						-- Lista degli eventuali altri attributi con cui caratterizzare il completamento dell'attività (XML conforme a schema LISTA_STD.xsd)
259        																-- Ogni valore è un tag Riga che contiene 3 colonne che devono essere tutte valorizzate:
260        																-- 1: (obblig.) Nome dell'attributo (stringa lung. max. 250)
261        																-- 2: (obblig.) Tipo del valore (valori possibili: S=Stringa, N=Numerico, D=Data/Timestamp)
262        																-- 3: (obblig.) Valore (se è un numerico deve avere la "," come separatore dei decimali; se è una data deve avere il formato DD/MM/RRRR HH24:MI:SS)
263        																-- Un attributo con un certo nome può avere più valori (tutti dello stesso tipo) che vengono salvati mantenendo l'ordine con cui figurano nell'XML
264        			FlgActToCompleteInWFOut OUT	PLS_INTEGER,								-- (valori 1/0) Se 1 indica che il task va completato lato Activiti, se 0 no
265        			VariabileEsitoOut		OUT	VARCHAR2,									-- Indica l'identificativo della variabile da settare lato workflow per definire l'esito del task (ovvero il ramo di prosecuzione del flow)
266        			EsitoOut				OUT		DMT_PROCESS_HISTORY.DES_ESITO%type,		-- Esito con cui eseguire l'attività lato motore di workflow
267        			FlgIgnoreWarningIn 	IN 		PLS_INTEGER DEFAULT NULL,					-- (valori 1/0/NULL) Se 0 o NULL significa che gli in presenza di WARNING la stored si comporta come in caso di errore; se 1 gli WARNING vengono ignorati
268        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
269        																-- ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
270        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,					-- (valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
271        			ErrContextOut		OUT		VARCHAR2,							-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
272        			ErrCodeOut			OUT		PLS_INTEGER,						-- N.ro errore di uscita
273        			ErrMsgOut			OUT 		VARCHAR2,						-- Messaggio d'errore o warning
274        			VariabiliEsitiOut	OUT		NOCOPY CLOB							-- XML conforme a schema ListaStd.xsd con le variabili di esito (anche quella riportata in VariabileEsitoOut se c'è una sola variabile):
275        																			-- Ogni variabile è una riga con le colonne:
276        																			-- 1) Nome della variabile
277        																			-- 2) Esito da settare nella variabile
278        			) return PLS_INTEGER;											-- Vale 1 se tutto è andato a buon fine senza warning, altrimenti 0
279        
280        	/***** Funzione da richiamare dopo il completamento di un'attività lato Activiti		******/
281        	function AggProcHist_PostExecAttWF(
282        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,
283        																-- (obblig). Codice identificativo del token di connessione
284        			IdUserLavoroIn		IN		DMT_USERS.ID_USER%type DEFAULT NULL,				-- Id. dell'utente a nome di cui si svolge l'attività. Se non valorizzato è l'utente connesso
285        
286        			IdProcessIn		IN		DMT_PROCESSES.ID_PROCESS%type,				-- (obblig.) Identificativo del processo in cui eseguire l'attività
287        			ActivityNameIn		IN		VARCHAR2,								-- (obblig.) Identificativo del task da completare (TASK_DEF_ID_ nel caso di Activiti)
288        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
289        																				-- ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
290        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
291        			ErrContextOut		OUT		VARCHAR2,								-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
292        			ErrCodeOut			OUT		PLS_INTEGER,							-- N.ro errore di uscita
293        			ErrMsgOut			OUT 		VARCHAR2							-- Messaggio d'errore o warning
294        			) return PLS_INTEGER;												-- Vale 1 se tutto è andato a buon fine senza warning, altrimenti 0
295        
296        
297        	/***** Funzione per estrarre la lista delle attività del flusso WF (ancora in corso) di un dato processo. 															*****/
298        	/***** Estrae le attività di tutte le fasi, NON solo di quella corrente																								*****/
299        	/***** Vengono estratte tutte le attività, anche quelle non disponibili in generale (causa lo stato del flusso) o in particolare all'utente di lavoro  				*****/
300        	/***** Vengono estratti anche i processi figli attualmente in corso																									*****/
301        	function GetListaAttFlussoProc(
302        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,
303        																-- (obblig). Codice identificativo del token di connessione
304        			IdUserLavoroIn		IN		DMT_USERS.ID_USER%type DEFAULT NULL,	-- Id. dell'utente a nome di cui si sta lavorando. Se non valorizzato è l'utente connesso
305        
306        			IdProcessIn			IN		DMT_PROCESSES.ID_PROCESS%type,				-- (obblig.) Identificativo del processo di cui estrarre la lista attività
307        			CIDGruppoAttIn			IN		VARCHAR2 DEFAULT NULL,					-- Cod. identificativo del gruppo/fase dei task da estrarre
308        			IdTipoEventoAppIn		IN		DMT_EVENT_TYPES.ID_EVENT_TYPE%type DEFAULT NULL,
309        																					-- Id. del tipo evento del task complesso di appartenenza dei task da estrarre
310        			ListaXMLOut			OUT		NOCOPY CLOB,						-- Lista delle fasi e attività e processi figli trovati (XML conforme a schema LISTA_STD.xsd)
311        																			-- Ogni fase o attività o processo figlio è un tag Riga che contiene le colonne:
312        																			-- 1) INSTANCE_ID 	Id. univoco di un'istanza del task workflow corrispondente al record che risulti eseguibile
313        																			--					Nel caso di Activiti è l'ID_ di ACT_HI_TASKINST
314        																			-- 2) FLG_EVENTO_DURATIVO 	(valori 1/0/NULL) Valorizzato solo se il record corrisponde ad un'attività NON modellata nel workflow (sono presente in DMT_EVENT_TYPES)
315        																			--						Se 1 indica che è un'attività con durata, se 0 è un'attività puntuale
316        																			-- 3) ACTIVITY_NAME 	Internal name che identifica l'attività nel disegno del flusso.
317        																			--					Nel caso di record che rappresenta una fase/gruppo o se l'attività NON è modellata nel flusso WF NON è valorizzata
318        																			--					Nel caso di Activiti è TASK_DEF_KEY_ dell'attività (attribute id del BPMN)
319        																			-- 4) DISPLAY_NAME 	Nome con cui mostrare l'attività o fase
320        																			--					Nel caso di Activiti è il NAME_ dell'attività (attribute name del BPMN)
321        																			-- 5) FLG_ESEGUIBILE	(valori 1/0) Se 1 significa che l'attività è eseguibile dall'utente di lavoro
322        																			-- 6) MOTIVI_NON_ESEG 	Motivo per cui l'attività NON è eseguibile dall'utente di lavoro
323        																			-- 7) FLG_DATI_VISIBILI	(valori 1/0) Se 1 significa che l'utente di lavoro può accedere alla consultazione dei dati gestiti nella maschera dell'attività
324        																			-- 8) FLG_FATTA 		(valori 2/1/0) Se 2 significa che l'attività/fase è completata e NON è da rifare, se 1 che è stata iniziata/salvata ma non completata, se 0 che è da fare
325        																			-- 9) ID_CHILD_PROCESS		Id. del processo filglio
326        																			-- 10) ESTREMI_CHILD_PROCESS   Estremi del processo figlio (tipo, codice, data avvio)
327        																			-- 11) rowid del record della DMT_PROCESS_HISTORY da cui recuperare gli attributi custom dell'evento corrispondente al task
328        																			-- 12) Id. evento (PK della DMT_PROCESS_HISTORY) dell'ultimo evento custom salvato corrispondente al dato task
329        																			-- 13) (valori G/AC/AS/P) Se G il record rappresenta un gruppo di attività (vale a dire una fase), se AS una singola attività, se AC un'attività con sotto-attività, se P un processo figlio
330        																			-- 14) Id. del tipo evento corrispondente all'attività (può essere valorizzato solo se colonna 13 = AS o AC) o nome identificativo del gruppo di attività/fase (se colonna 13=G)
331        																			-- 15) Nome dell'eventuale gruppo di attività/fase di appartenenza
332        																			-- 16) Nome dell'eventuale attività complessa di appartenenza
333        																			-- 17) <non utilizzata>
334        																			-- 18) Spiegazione del significato dell'attività / gruppo di attività (=fase)
335        																			-- 27) (flag 1/0) Se 1 signgifica che per visualizzare il task va chiamata la Call_ExecAtt (valorizzata solo se colonna 13=AS)
336        																			-- 28)	Icona specifica dell'attività/fase
337        																			-- 29) <non utilizzata>
338        																			-- 30) Flag 1/0: se 1 indica che è un'attività di sola visualizzazione di quanto fatto in front-office
339        																			-- 31) Esito task nell'ultima iterazione (prima di eventuale ritorno alla fase del task). Valori: OK, KO, W
340        																			-- 32) Flag 1/0: 1 indica che è un passo disponibile nel workflow (non necessariamente eseguibile dall'utente)
341        			DatiProcXAttOut		OUT		NOCOPY CLOB,						-- XML conforme a schema SezioneCache.xsd che restituise una serie di dati del procedimenti
342        																			-- necessari alla visualizzazione/salvataggio delle maschere delle attività
343        																			-- I dati restituiti corrispondono alle seguenti variabili:
344        																			-- GPA_ID_UL	Id. dell'unità locale
345        																			-- GPA_NOME_UL	Nome dell'unità locale
346        																			-- GPA_ID_GEOM_AREA_INTERV_VIA	Id. che identifica la geometria dell'area di intervento in cartografia (IdUbicazione in SIRA)
347        																			-- ID_UD_ISTANZA Id. UD dell'istanza firmata
348        																			-- URI_RIC_AVVIO URI della ricevuta di avvio procedimento
349        																			-- EMAIL_PROPONENTE INdirizzo e-mail del proponente
350        																			-- #IdDefProcFlow id. del tipo di flusso WF associato al processo
351        																			-- #IdInstProcFlow id. dell'istanza di flusso WF associato al processo
352        																			-- ListaNextTask : html che indica i passi disponibili nel workflow o se l'iter è concluso
353        			DesFaseCorrenteOut	OUT		VARCHAR2,							-- Descrizione della fase corrente del processo
354        			ErrContextOut		OUT		VARCHAR2,							-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
355        			ErrCodeOut			OUT		PLS_INTEGER,						-- N.ro errore di uscita
356        			ErrMsgOut			OUT 	VARCHAR2,							-- Messaggio d'errore
357        			FlgNoDatiProcIn		IN		PLS_INTEGER DEFAULT NULL,			-- Se 1 DatiProcXAttOut non viene valorizzato
358        			IdProcessTypeIn		IN		DMT_PROCESS_TYPES.ID_PROCESS_TYPE%type DEFAULT NULL
359        																			-- (obblig. salvo se IdProcessIn è valorizzato) Identificativo del tipo del processo di cui estrarre la lista attività (se ancora da avviare e quindi IdProcessIn è null)
360        			) return PLS_INTEGER;											-- Vale 1 se tutto è andato a buon fine, altrimenti 0
361        
362        	/***** Funzione per estrarre i processi/procedimenti guidati da workflow su cui un certo utente ha qualche attività da svolgere *****/
363        	function TrovaListaLavoro(
364        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,
365        																-- (obblig). Codice identificativo del token di connessione
366        			IdUserLavoroIn		IN		DMT_USERS.ID_USER%type DEFAULT NULL,	-- Id. dell'utente a nome di cui si sta lavorando. Se non valorizzato è l'utente connesso
367        			FlgPreimpostaFiltroIn	IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se vale 1 i filtri e l'ordinamento vengono settati secondo le impostazioni dell'utente di lavoro, altrimenti restano come passati in input
368        			--------------- inizio filtri di ricerca-------------------
369        			CodApplicazioneIO		IN OUT	VARCHAR2,						-- Codice dell'applicazione "proprietaria" dei processi. Se non valorizzata e se l'utente è connesso da un'applicazione esterna si filtra per quella
370        			CodIstanzaApplIO		IN OUT	VARCHAR2,						-- Codice dell'istanza di applicazione "proprietaria" dei processi. Se non valorizzata e se l'utente è connesso da un'applicazione esterna si filtra per l'eventuale specifica istanza di appl. esterna da cui è connesso
371        			IdProcessTypeIO		IN OUT	DMT_PROCESSES.ID_PROCESS_TYPE%type,		-- Identificativo del tipo di processo (viene considerato solo se l'argomento successivo è anch'esso valorizzato e se i due filtri sono compatibili)
372        			NomeProcessTypeIO		IN OUT	DMT_PROCESS_TYPES.NOME_PROCESS_TYPE%type,	-- Nome (o parte di esso) del tipo di processo (ricerca case-insensitive in like)
373        			CITypeFlussoWFIO		IN OUT	DMT_PROCESSES.PROV_CI_TY_FLUSSO_WF%type,	-- Codice identificativo del tipo di flusso workflow associato al processo (ricerca esatta)
374        			CIProvProcessIO		IN OUT	DMT_PROCESSES.PROV_CI_PROCESS%type,		-- Codice identificativo del processo (o parte di esso) in un eventuale sistema di provenienza (ricerca case-insensitive in like senza forzare % finale)
375        			OggettoIO      		IN OUT	DMT_PROCESSES.OGGETTO%type ,			-- parola/frase contenuta nell'oggetto del processo (ricerca di tipo CONTAINS)
376        			DtAvvioDaIO			IN OUT	VARCHAR2,						-- Estremo inferiore dell'intervallo di ricerca sulla data di avvio del processo (nel formato dato dal parametro di conf. FMT_STD_DATA)
377        			DtAvvioAIO			IN OUT	VARCHAR2,						-- Estremo superiore dell'intervallo di ricerca sulla data di avvio del processo (nel formato dato dal parametro di conf. FMT_STD_DATA)
378        			DtDecorrenzaDaIO		IN OUT	VARCHAR2,						-- Estremo inferiore dell'intervallo di ricerca sulla data di decorrenza dei termini del processo (nel formato dato dal parametro di conf. FMT_STD_DATA)
379        			DtDecorrenzaAIO		IN OUT	VARCHAR2,						-- Estremo superiore dell'intervallo di ricerca sulla data di decorrenza dei termini del processo (nel formato dato dal parametro di conf. FMT_STD_DATA)
380        			FlgStatoProcIO		IN OUT	VARCHAR2,						-- Indica lo stato del processo; valori possibili: I=Interrotto; S=Sospeso; E=In corso presso ente/soggetto esterno; A=In corso e in nessuno degli stati precedenti
381        																		-- Può essere anche una combinazione dei valori precedenti separati da , o ;
382        			FlgAvvioUserLavIO		IN OUT	PLS_INTEGER,					-- (valori 1/0/NULL): se 1 si ricercano solo i processi avviati dall'utente di lavoro
383        			WfNameFaseCorrIO		IN OUT	DMT_PROCESS_HISTORY.ACTIVITY_NAME_WF%type,-- nome identificativo della fase in corso nell'iter del processo (ACTIVITY_NAME del sotto-processo WF attivo)(ricerca esatta)
384        			WfNameAttEsegIO		IN OUT	DMT_PROCESS_HISTORY.ACTIVITY_NAME_WF%type,-- nome identificativo di un'attività che deve essere eseguibile dall'utente di lavoro sui processi da ricercare (ACTIVITY_NAME dell'attività WF)
385        			CriteriIterSvoltoIO	IN OUT	NOCOPY CLOB,					-- Lista con i criteri relativi all'iter già svolto sul processo (XML conforme a schema LISTA_STD.xsd). Se più di uno vengono applicati in AND.
386        																-- Ogni criterio relativo ad un evento dell'iter è un tag Riga che contiene le seguenti colonne:
387        																--	1) (valori F/AE) Indica se ciò che deve essersi già svolto o almeno iniziato è una fase (F) o un'attività WF/evento (AE)
388        																--	2) Nome identificativo della fase (PROCESS_NAME) o dell'attività WF (ACTIVITY_NAME preceduto da A; o senza alcun prefisso) o del tipo dell'evento (ID_EVENT_TYPE preceduto da E;)
389        																--	3) Descrizione della fase/attività/evento (o suo inizio; ricerca case insenstive in like)
390        																--	4) (valori 1/0/NULL) Se 1 indica che la fase/evento può essere anche solo iniziato (se durativo), altrimenti deve essersi verificato/concluso
391        																--	5) (gestito solo se non è una fase) Nome identificativo della fase (suo ACTIVITY_NAME) in cui deve essersi verificato/iniziato l'evento/attività
392        																--	6) Data e ora a partire dalla quale deve essersi verificato/concluso l'evento (nel formato dato dal parametro di conf. FMT_STD_TIMESTAMP)
393        																--	7) Data e ora entro la quale deve essersi verificato/concluso l'evento (nel formato dato dal parametro di conf. FMT_STD_TIMESTAMP)
394        																--	8) Data e ora a partire dalla quale deve essere iniziato l'evento (nel formato dato dal parametro di conf. FMT_STD_TIMESTAMP)
395        																--	9) Data e ora entro la quale deve essere iniziato l'evento (nel formato dato dal parametro di conf. FMT_STD_TIMESTAMP)
396        																--	10) Identificativo dell'utente che ha completato o a nome di cui è stato completato l'evento (viene considerato solo se il campo successivo è anch'esso valorizzato e se i due sono compatibili)
397        																--	11) Descrizione dell'utente che ha completato o a nome di cui è stato completato l'evento (ricerca case insensitive in like)
398        																--	12) Identificativo dell'utente che ha iniziato o a nome di cui è stato iniziato l'evento (viene considerato solo se il campo successivo è anch'esso valorizzato e se i due sono compatibili)
399        																--	13) Descrizione dell'utente che ha iniziato o a nome di cui è stato iniziato l'evento (ricerca case insensitive in like)
400        																--  14) Esito con cui è stata completata l'attività/fase
401        			CriteriIterNonSvoltoIO	IN OUT	NOCOPY CLOB,					-- Lista con i criteri relativi a ciò che non deve ancora aver avuto luogo nell'iter del processo (XML conforme a schema LISTA_STD.xsd). Se più di uno vengono applicati in AND.
402        																-- Ogni criterio relativo ad un evento che non ha ancora avuto luogo nell'iter è un tag Riga che contiene le seguenti colonne:
403        																--	1) (obblig.; valori F/AE) Indica se ciò che non deve essersi già verificato e/o iniziato è una fase (F) o un'attività WF/evento (AE)
404        																--	2) Nome identificativo della fase (PROCESS_NAME) o dell'attività WF (ACTIVITY_NAME preceduto da A; o senza alcun prefisso) o del tipo dell'evento (ID_EVENT_TYPE preceduto da E;)
405        																--	3) (valori 1/0/NULL) Se 1 indica che la fase/evento non deve essere neppure iniziato (se durativo), se 0 o NULL che non deve essersi verificato/concluso
406        																--	4) (gestito solo se non è una fase) Nome identificativo della fase (suo ACTIVITY_NAME) in cui non deve essersi verificata/iniziata l'attività/evento
407        			TpScadIO			IN OUT	VARCHAR2,						-- Non è un vero filtro di ricerca: serve per indicare il tipo di scadenza cui sono relativi i due filtri successivi; può avere valore:
408        																-- #TERMINI = scadenza dei termini del processo in base alla durata prevista
409        																-- (solo qualora il tipo di processo sia indicato) descrizione di una scadenza censita nello scadenziario, ovvero uno dei valori del campo DES_SCADENZA della tabella DMT_PROCESS_TYPE_SCAD
410        																-- #ANY = una qualsiasi scadenza
411        			ScadEntroNGGIO		IN OUT	PLS_INTEGER,					-- giorni entro cui si verificherà la scadenza TpScadIO sui processi da ricercare
412        			ScadDaMinNGGIO		IN OUT	PLS_INTEGER,					-- (in OR rispetto al filtro precedente): nro di giorni minimo da cui deve essere trascorsa la scadenza TpScadIO sui processi da ricercare
413        			FlgNoScadConEvtFinIO	IN OUT	PLS_INTEGER,					-- (valori 1/0/NULL) Se 1 le scadenze vanno considerate solo laddove l'evento di fine della scadenza non sia mai avvenuto, se 0 solo laddove l'evento di fine sia accaduto
414        			NoteProcIO			IN OUT	DMT_PROCESSES.NOTE%type,			-- parola/frase contenuta nelle note del processo (ricerca di tipo CONTAINS)
415        			AttributiProcIO		IN OUT	NOCOPY CLOB,					-- Altri criteri di ricerca sugli attributi addizionali dei procedimenti (XML conforme a schema LISTA_STD.xsd). Se più di uno vengono applicati in AND.
416        																	-- Ogni criterio è un tag Riga che può contenere le seguenti colonne:
417        																	--	1) Nome (ATTR_NAME) dell'attributo cui è relativo il criterio
418        																	--	2) (obblig.) Operatore logico. Valori possibili:
419        																	--		"uguale" (ricerca esatta)
420        																	--		"simile a (case-sensitive)" (ricerca case-sensitive in like)
421        																	--		"simile a (case-insensitive)" (ricerca case-insensitive in like e che ignora i caratteri quali spazi, ., ecc)
422        																	--		"maggiore" (se attributo numerico o data)
423        																	--		"maggiore o uguale" (se attributo numerico o data)
424        																	--		"minore" (se attributo numerico o data)
425        																	--		"minore o uguale" (se attributo numerico o data)
426        																	--		"tra" (se attributo numerico o data)
427        																	--		"non valorizzato"
428        																	--		"valorizzato"
429        																	--		"spuntato" (se attributo di tipo casella di spunta)
430        																	--		"non spuntato" (se attributo di tipo casella di spunta)
431        																	--	3) 1° valore di confronto (obblig. e gestito solo se l'operatore non ha uno dei seguenti valori: valorizzato, non valorizzato, spuntato, non spuntato) (se l'attributo è numerico deve avere la virgola come separatore dei decimali, se è di tipo data deve essere in uno dei formato dati dai parametri di conf. FMT_STD_DATA e FMT_STD_TIMESTAMP)
432        																	--	4) 2° valore di confronto (obblig. e gestito solo se l'operatore è "tra") (se l'attributo è numerico deve avere la virgola come separatore dei decimali, se è di tipo data deve essere in uno dei formato dati dai parametri di conf. FMT_STD_DATA e FMT_STD_TIMESTAMP)
433        																	--	5) Label dell''attributo cui è relativo il criterio (se sotto-attributo di complesso <label del complesso> - <label del sotto-attributo>
434        			SoggettiIntIO		IN OUT	NOCOPY CLOB,					-- Lista con i criteri relativi ai soggetti interni del processo (XML conforme a schema LISTA_STD.xsd). Se più di uno vengono applicati in AND.
435        																-- Ogni criterio relativo ad un soggetto è un tag Riga che contiene le seguenti colonne:
436        																--	1) Ruolo del soggetto nel processo (ricerca esatta)
437        																--	2) (obblig) Indicatore del tipo di soggetto; valori possibili: UO = Unità operativa; UT = Utente; G = Gruppo; R = Ruolo amministrativo contestualizzato; SV = Scrivania virtuale
438        																--	3) Identificativo del soggetto interno
439        																--	4) Descrizione/denominazione del soggetto interno (se trattasi di UO può essere la denominazione semplice o preceduta da quella di tutte le UO superiori separate da "|")
440        																--  5) Identificativo della UO cui appartiene la scrivania-soggetto che costituisce il soggetto interno
441        																--	6) Nri livello della UO che costituisce il soggetto interno o della UO a cui appartiene la scrivania che costituisce il soggetto interno (tutti o alcuni; però se si specifica un livello è obbligatorio indicare tutti i livelli superiori; vanno specificati come appaiono nella GUI, ovvero romani se previsto, 0 o -- se nulli; sono separati dal separatore dei livelli valido per il soggetto produttore/AOO di appartenenza della UO)
442        																--	7) Denominazione della UO cui appartiene la scrivania che costituisce il soggetto interno (può essere la denominazione semplice o preceduta da quella di tutte le UO superiori separate da "|")
443        																--	8) Codice che identifica nell'applicazione esterna da cui ci si connette l'utente che costituisce il soggetto interno o quello che occupa la scrivania che costituisce il soggetto interno
444        																--	9) Denominazione dell'utente che occupa la scrivania che costituisce il soggetto interno
445        																--  10) (valore 1) Indica che il soggetto, se UO, sono anche tutte le sue sotto-UO
446        																--	11) (valori interi da 1 a n) Livello della struttura organizzativa in cui si espleta il ruolo amministrativo che costituisce il soggetto interno
447        																--	12) Codice del tipo di unità organizzativa in cui si espleta il ruolo amministrativo che costituisce il soggetto interno (alternativo alla colonna 9)
448        																--	13) Descrizione del tipo di unità organizzativa (es: settore, servizio, ecc) in cui si espleta il ruolo amministrativo che costituisce il soggetto interno (alternativo alla colonna 9)
449        																--	14) Identificativo della UO in cui si espleta il ruolo amministrativo che costituisce il soggetto interno o dalla quale risalire alla/e UO del livello/tipo indicati in cui si espleta il ruolo amministrativo che costituisce il soggetto interno
450        																--	15) Denominazione/nome della UO in cui si espleta il ruolo amministrativo che costituisce il soggetto interno o dalla quale risalire alla/e UO del livello/tipo indicati in cui si espleta il ruolo amministrativo che costituisce il soggetto interno (può essere la denominazione semplice o preceduta da quella di tutte le UO superiori separate da "|")
451        																--	16) Nri livello della UO in cui si espleta il ruolo amministrativo che costituisce il soggetto interno o dalla quale risalire alla/e UO del livello/tipo indicati in cui si espleta il ruolo amministrativo che costituisce il soggetto interno (tutti o alcuni; però se si specifica un livello è obbligatorio indicare tutti i livelli superiori; vanno specificati come appaiono nella GUI, ovvero romani se previsto, 0 o -- se nulli; sono separati dal separatore dei livelli valido per il soggetto produttore/AOO di appartenenza della UO)
452        																--	17)(valore 1) Indica che il ruolo amministrativo-soggetto si espleta anche nelle sotto-UO della/e UO rintracciate tramite i valori delle 3 colonne precedenti
453        																--	18) Data a cui devono essere validi i soggetti interni che devono soddisfare il criterio (nel formato dato dal parametro di conf. FMT_STD_DATA); se non valorizzata il criterio si applica a tutti i soggetti interni, indipendentemente dal periodo di validità
454        			FlgAssUserLavIO		IN OUT	PLS_INTEGER,					-- (valori 1/0/NULL) 1=Solo processi relativi a unità documentaria/folder attualmente assegnati all'utente di lavoro (ovvero ad una sua scrivania)
455        			IdUserAssIO			IN OUT	DMT_USERS.ID_USER%type,				-- Identificativo dell'utente assegnatario dell'unità documentaria/folder cui è relativo il processo (viene considerato solo se l'argomento successivo è anch'esso valorizzato e se i due filtri sono compatibili)
456        			DesUserAssIO		IN OUT	DMT_USERS.DES_USER%type,			-- Descrizione dell'utente attuale assegnatario dell'unità documentaria/folder cui è relativo il processo (ricerca case-insensitive in like)
457        			SoggettiEstIO		IN OUT	NOCOPY CLOB,					-- Lista con i criteri relativi ai soggetti esterni del processo (XML conforme a schema LISTA_STD.xsd). Se più di uno vengono applicati in AND.
458        																-- Ogni criterio relativo ad un soggetto è un tag Riga che contiene le seguenti colonne:
459        																--	1) Ruolo del soggetto nel processo (ricerca esatta)
460        																--	2) Identificativo del soggetto nella rubrica soggetti
461        																--	3) Denominazione del soggetto (quella storicizzata sul processo) (ricerca case-insensitive in like)
462        																--	4) Codice fiscale del soggetto (quello storicizzato sul processo) (ricerca case-insensitive in like)
463        																--	5) Partita IVA del soggetto (quella storicizzata sul processo) (ricerca case-insensitive in like)
464        																--	6) Data di nascita del soggetto (quella storicizzata sul processo) (nel formato dato dal parametro di conf. FMT_STD_DATA)
465        																--	7) Data a cui devono essere validi i soggetti esternii che devono soddisfare il criterio (nel formato dato dal parametro di conf. FMT_STD_DATA); se non valorizzata il criterio si applica a tutti i soggetti esterni, indipendentemente dal periodo di validità
466        																--	8) Identificativo del soggetto in un anagrafe esterna (ACS)
467        			UDProcIO			IN OUT	NOCOPY CLOB,					-- Lista con i criteri relativi alle unità documentarie coinvolte dal processo (XML conforme a schema LISTA_STD.xsd). Se più di uno vengono applicati in AND.
468        																-- Ogni criterio relativo ad un'unità è un tag Riga che contiene le seguenti colonne:
469        																--	1) Codice del ruolo dell'unità documentaria nel processo (ricerca esatta)
470        																--	2) Descrizione del ruolo dell'unità documentaria nel processo (ricerca esatta)
471        																--	3) Identificativo dell'unità documentaria
472        																--	4) Codice della categoria di una registrazione/numerazione dell'unità documentaria (ricerca esatta)
473        																--	5) Sigla di una registrazione/numerazione dell'unità documentaria (ricerca esatta)
474        																--	6) Anno di una registrazione/numerazione dell'unità documentaria
475        																--	7) N.ro di una registrazione/numerazione dell'unità documentaria
476        																--	8) Nome dell'unità documentaria (ricerca case-insensitive in like)
477        			FolderProcIO		IN OUT	NOCOPY CLOB,					-- Lista con i criteri relativi ai folder coinvolti dal processo (XML conforme a schema LISTA_STD.xsd). Se più di uno vengono applicati in AND.
478        																-- Ogni criterio relativo ad un folder è un tag Riga che contiene le seguenti colonne:
479        																--	1) Codice della natura della relazione del folder col processo (ricerca esatta)
480        																--	2) Descrizione della natura della relazione del folder col processo (ricerca esatta)
481        																--	2) Identificativo del folder
482        																--	3) Percorso + nome del folder (percorso comprensivo del nome della libreria di appartenenza)
483        			------------- inizio argomenti standard di tutte le funzioni di ricerca che devono restituire una lista --------------
484        			ColOrderByIO		IN OUT	VARCHAR2,						-- Indica il/i numeri della/e colonna dell'XML (CLOB ListaXMLOut) di output per cui ordinare i record nell'XML stesso (le colonne per cui si può ordinare sono solo quelle da 1 a 6 e la 14). Se l'ordinamento è per più colonne queste vanno separate con "," (es: 1; 1,2)
485        																-- in output può essere diverso che in input solo se in input è NULL: in tal caso significa che esiste sul tipo di ordinamento una qualche preimpostazione di sistema/utente ecc.
486        																-- se non valorizzato (neppure in output) la lista di record restituita non è ordinata
487        			FlgDescOrderByIO  	IN OUT	VARCHAR2,						-- E' una stringa di 1 o 0/NULL, tanti quanti le colonne di ordinamento, separati da ",": 1 significa che l'ordinamento per la data colonna deve essere discendente anzichè ascendente (es: 1; 1,0; 1, )
488        																-- in output può essere diverso che in input solo se in input è NULL: in tal caso significa che esiste sul verso di ordinamento una qualche preimpostazione di sistema/utente ecc.
489        			FlgSenzaPaginazioneIn 	IN 		PLS_INTEGER DEFAULT NULL,            	-- (valori 1/0/NULL) Se 1 l'estrazione non è paginata, altrimenti sì
490        			NroPaginaIO      		IN OUT	PLS_INTEGER,                  		-- E' il numero della pagina da estrarre; se NULL e l'estrazione è paginata viene estratta la prima pagina
491           			BachSizeIO			IN OUT	PLS_INTEGER,					-- Indica il massimo n.ro di record da estrarre se l'estrazione non è paginata (FlgSenzaPaginazioneIn=1)
492        																-- Indica la dimensione (n.ro di record) della pagina se l'estrazione è paginata (FlgSenzaPaginazioneIn 0 o NULL) e in tal caso se non è valorizzato la dimensione della pagina è quella settata per l'utente di lavoro o è pari al valore del parametro STD_PAGE_NUM_ROW del dominio di lavoro
493        			OverFlowLimitIn		IN		PLS_INTEGER DEFAULT NULL,			-- E' il n.ro di record soddisfacenti la ricerca superato il quale la funzione deve restituire errore di overflow
494        			FlgSenzaTotIn		IN		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se 1 significa che non è richiesto come output il totale dei record soddisfacenti la ricerca (se la ricerca è paginata per la prima pagina il totale viene calcolato comunque, per le successive no)
495        			NroTotRecOut		OUT		PLS_INTEGER,					-- E' il n.ro di record complessivi trovati (valorizzato solo se FlgSenzaTotIn è 0 o NULL o se si estrae la prima pagina)
496             		NroRecInPaginaOut 	OUT   	PLS_INTEGER,                     		-- E' il numero di record nella pagina (valorizzato solo se l'estrazione è paginata, ovvero se FlgSenzaPaginazioneIn 0 o NULL)
497        			------------- fine argomenti standard di tutte le funzioni di ricerca che devono restituire una lista --------------
498        			ListaXMLOut			OUT		NOCOPY CLOB,					-- Lista dei processi/procedimenti trovati (XML conforme a schema LISTA_STD.xsd)
499        																-- Ogni processo/procedimento è un tag Riga che contiene le seguenti colonne:
500        																-- 	1) Identificativo del processo (ID_PROCESS)
501        																-- 	2) Codice che identifica il processo/procedimento nel sistema/applicativo proprietario
502        																-- 	3) Descrizione del tipo di processo/procedimento
503        																-- 	4) Oggetto del processo/procedimento
504        																-- 	5) Data e ora di avvio (nel formato dato dal parametro di conf. FMT_STD_TIMESTAMP)
505        																-- 	6) Data di decorrenza (nel formato dato dal parametro di conf. FMT_STD_DATA)
506        																--	7) Dati dell'eventuale processo padre
507        																-- 	8) Estremi (categoria/sigla/anno/n.ro + data e ora) di registrazione/numerazione dell'unità documentaria cui è relativo il processo
508        																--	9) Dati identificativi del folder cui è relativo il processo
509        																--	10) Stato del processo: Interrotto; Sospeso; In corso presso ente/soggetto esterno; NULL (ovvero in nessuno degli stati precedenti)
510        																-- 	11) Estremi da mostrare a GUI(sigla/anno/n.ro) della registrazione/numerazione dell'unità documentaria che ha dato avvio al processo/procedimento (nel caso di iter atti il n° proposta)
511        																-- 	12) Estremi da mostrare a GUI(sigla/anno/n.ro) della registrazione/numerazione dell'unità documentaria che sancisce l'esito del processo/procedimento (estremi repertorio atto se è un iter atto)
512        																-- 	13) Descrizione della fase corrente
513        																-- 	14) Data di scadenza dei termini (in formato pari al valore del parametro di config. FMT_STD_DATA)
514        																--	15) (valori 1/0) Se 1 significa che i termini sono scaduti
515        																--	16) Ultima attività/evento che ha avuto luogo nell'iter del processo (descrizione e data)
516        																--	17) Messaggio apposto sull'ultima attività/evento che ha avuto luogo nell'iter del processo
517        																--	18) Note del processo/procedimento
518        																--	19) Denominazioni dei soggetti esterni (validi) del processo/procedimento che hanno un ruolo definito come "principale" nel dato tipo di proc.
519        																--  20) Id. del folder associato al processo/procedimento
520        																--  21) Id. dell'unità documentaria associata al processo/procedimento
521        																--		Nel caso degli atti c'è UD della proposta anche se non direttamente associata al processo
522        																-- 	23) Estremi da usare per ordinamento (categoria/sigla/anno/n.ro) della registrazione/numerazione dell'unità documentaria che ha dato avvio al processo/procedimento (nel caso di iter atti il n° proposta)
523        																-- 	24) Estremi da usare per ordinamento(categoria/sigla/anno/n.ro) della registrazione/numerazione dell'unità documentaria che sancisce l'esito del processo/procedimento (estremi repertorio atto se è un iter atto)
524        																-- 	25) Data (senza ora) della registrazione del documento iniziale (data di proposta se iter atti)
525        																-- 	26) Data (senza ora) della registrazione del documento finale (data di repertorio atto se iter atti)
526        																-- 	27) Oggetto del documento iniziale
527        																--  28) U.O. proponente se processo che è un iter atti
528        																--  29) Utente che ha avviato
529        																--  30) Prossime attività da fare sul processo (quelle disponibili)
530        																--  31) Ruolo di processo "ASSEGNATARO_...." che può essere impostato dall'utente di lavoro in virtù del fatto che può svolgere un'attività (da farsi o fatta) del processo che ha l'attributo "SMISTAMENTO" settato
531        																--  32) Denominazione di chi attualmente ha ruolo di processo "ASSEGNATARO_...." che può essere impostato dall'utente di lavoro in virtù del fatto che può svolgere un'attività (da farsi o fatta) del processo che ha l'attributo "SMISTAMENTO" settato
532        																--	41) URI del file primario dell'UD iniziale (solo se firmato)
533        																--	42) DisplayName del file primario dell'UD iniziale (solo se firmato)
534        																--  43) Ultimo invio alla verifica contabile (data e ora)
535        																--  44) Invio alla fase approvazione direttori
536        																--  45) RUP (Responsabile Unico del Provvedimento)
537        																--  46) RdP (Responsabile di Procedimento)
538        																--  47) Altri responsabili di concerto
539        																--  48) Responsabili della spesa
540        																--  49) UO competente per la definizione spesa
541        																--  50) Adottante firmatario del provvedimento
542        																--  51) Responsabile istruttoria
543        																--  52) Tipo richiedente: ha due valori E (=Esterno) e I (Interno)
544        																--  53) Indirizzo
545        																--  54) Atti richiesti (se più di uno separati da ";")
546        																--  55) ID folder degli atti richiesti (se più di uno separati da ";")
547        																--  56) Classif.  atti (se più di una separate da ";")
548        																--  57) Archivi coinvolti
549        																--  58) UDC
550        																--  59) Appuntamento in Cittadella
551        																--  60) Appuntamento in Bernina
552        																--  61) Cod. pratica SUE
553        																--  62) Tipo/i tributo (pratiche autotutela e CED)
554        																--  63) Anno/i imposta (pratiche autotutela e CED)
555        																--  64) Estremi atti di riferimento (pratiche autotutela e CED)
556        																--  65) Flag 1/0 che indica presenza (1) o meno (0) di procedimenti collegati
557        																--  66) Tipologia richiedente (visure Urbanistica)
558        																--  67) Motivazione richiesta visura (visure Urbanistica)
559        																--  68) (valori 1/0)  Richiesto cartaceo (visure Urbanistica)
560        																--  69) (valori 1/0)  Richiesti atti di fabbrica
561        																--  70) (valori E = esterno, I = Interno, EI = Esterno e Interno) Fino 1996 atti fabbricato interno/esterno (visure Urbanistica)
562        																--  71) (valori E = esterno, I = Interno, EI = Esterno e Interno) Dal 1997 atti fabbricato interno/esterno (visure Urbanistica)
563        																--  72) CIG
564        																--  73) Attori del processo
565        																--  74)	Id. modello del dispositivo
566        																--  75)	Nome modello del dispositivo
567        																--  76)	Nome del file dispositivo quando si apre l'anteprima
568        																--  77) Parole chiave
569        																--  78) Iniziativa
570        																--  79) Indicatore di atto con o senza "rilevanza contabile" (anche eventuali altre opzioni oltre SI/NO)
571        																--  80) Tipo di dettaglio dell'atto
572        																--  81) Cod. tipo atto dettaglio
573        																--	82) Flag (1/0) di immediatamente eseguibile
574        																--  83) Stato della proposta di atto/atto/documento collegato ad atto che corrisponde al processo
575        																--  84) Id. del modello con la lista dei movimenti contabili da mostrare in lista atti
576        																--  85) Nome del modello con la lista dei movimenti contabili da mostrare in lista atti
577        																--  86) Display filename del modello con la lista dei movimenti contabili da mostrare in lista atti
578        																--  87) IdDocVistoRegContabile
579        																--  88) URIVistoRegContabile
580        																--  89) DisplayFilename visto reg. contabile
581        																--  90) Primo invio alla verifica contabile (data e ora)
582        																--  91) N.ro invii alla ragioneria per la verifica contabile
583        																--  92) CdC atto
584        																--  93) Data scadenza liquidazione
585        																--  94) Estremi degli ordinativi di pagamento (mandati) e incasso (reversali)
586        																--  95) Cod. esito ultima attività svolta: ha i valori OK, KO e W
587        																--  96) Descrizione esito ultima attività svolta
588        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
589        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
590        			ErrMsgOut			OUT 	VARCHAR2,						-- Messaggio d'errore
591        			CriteriAvanzatiIn	IN 		CLOB DEFAULT NULL				-- XML contenente nomi e valori di ulteriori filtri (conforme allo schema SezioneCache.xsd).
592        																		-- Ogni filtro è un tag "Variabile" dell'XML
593        																		-- I filtri che sono liste hanno nomi (tag Variabile/Nome) che iniziano con @.
594        																		-- I nomi dei filtri possibili sono:
595        																		--  SoloAttiConWF: valori 1/0 se 1 la ricerca è ristretta alle proposte atti con iter workflow
596        																		--  SoloProcedimentiAmm: valori 1/0 se 1 la ricerca è ristretta ai procedimenti amministrativi con esclusione proposte atti con iter workflow
597        																		--	NroPropostaDa
598        																		--	NroPropostaA
599        																		-- 	SigleProposta
600        																		--  NroAttoDa
601        																		--	NroAttoA
602        																		--	SigleAtto
603        																		--	DataAttoDa
604        																		--	DataAttoA
605        																		--	OggettoProposta
606        																		--	IdUOProponentiProposta: lista fatta da 2 colonne: 1) ID_UO; 2) Flag di incluse sotto-UO (valori 1/0/NULL)
607        																		--	IdUserAvvio
608        																		--  SoloEseguibili: tira fuori solo i processi con task eseguibili
609        																		--  IdUserAssegnatario: chi ha il ruolo ISTRUTTORE nel procedimento
610        																		--  AttoRif.Tipo : tipo di atto riferimento nei procedimenti autotutela
611        																		--  AttoRif.Registro : registro atto riferimento nei procedimenti autotutela
612        																		--  AttoRif.Numero : N° atto riferimento nei procedimenti autotutela
613        																		--  AttoRif.AnnoImpostaDa : inizio intervallo ricerca su anno imposta procedimenti autotutela/CED
614        																		--  AttoRif.AnnoImpostaA: : fine intervallo ricerca su anno imposta procedimenti autotutela/CED
615        																		--  AttoRif.Esito: esito nei procedimenti autotutela/CED (se più di uno separati da ;)
616        																		--  DataPresentazioneInstanzaDa:  inizio intervallo ricerca su data di registrazione istanza che ha dato avvio al procedimento
617        																		--  DataPresentazioneInstanzaA: fine intervallo ricerca su data di registrazione istanza che ha dato avvio al procedimento
618        																		--  ListaTipiTributo: Tipo/i di tributi coinvolti (pratiche autotutela e CED) (se più di uno separati da ;)
619        																		--  TipoRichiedenteVisuraSUE  	Tipo/i richiedente visura (se più di uno concatenati con ; )
620        																		--	MotivoVisuraSUE				Motivo/i visura (se più di uno concatenati con ; )
621        																		--	RichAttiDiFabbrica		 	(1/0) Indica se richiesti (1) o meno (0) atti di fabbrica
622        																		--	FabbricatoAttiCostrFino1996	(valori E/I) Per costruzioni fino 1996 atti fabbricato esterno (=E) e interno (=I)
623        																		--	FabbricatoAttiCostrDa1997 	(valori E/I) Per costruzioni dal 1997 atti fabbricato esterno (=E) e interno (=I)
624        																		--	RichiestaVisuraCartacea		(1/0) Indica se richiesta (1) o meno (0) visura cartacea
625        																		--  ParoleChiave				Parole chiave del documento di proposta
626        																		--  NroEmendamentoDa 			Estremo inferiore intervallo di ricerca sul N° di emendamento
627        																		--  NroEmendamentoA				Estremo superiore intervallo di ricerca sul N° di emendamento
628        																		--  CodStatoDettUDIni			Cod. stato di dettaglio dell'UD iniziale
629        																		--  CdCAtto						Centro di Costo dell'atto (ricerca esatta)
630        																		--  DataScadenzaDa				Estremo inferiore - data senza ora nel formato del parametro FMT_STD_DATA - dell'intervallo di ricerca sulla data di scedenza delle liquidazioni
631        																		--  DataScadenzaA				Estremo superiore - data senza ora nel formato del parametro FMT_STD_DATA - dell'intervallo di ricerca sulla data di scedenza delle liquidazioni
632        			)
633        			return PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine, altrimenti 0
634        
635        	/***** Funzione per ottenere la lista degli esiti di un''attività									*****/
636        	/***** Da utilizzare per popolare la combo-box degli esiti attività 								*****/
637        	/***** La lista non è mai paginata																	*****/
638        	function TrovaListaEsitiAttivita(
639        			CITypeFlussoWFIO	IN OUT	DMT_PROCESSES.PROV_CI_TY_FLUSSO_WF%type,		-- (obblig. se argomento successivo è NULL) Codice identificativo (KEY_ o PROC_DEF_ID_) del tipo di flusso workflow cui è relativa l'attività di cui estrarre gli esiti
640        			IdProcessIn			IN 		DMT_PROCESSES.ID_PROCESS%type,					-- (obblig. se argomento precedente è NULL) Id. del processo/procedimento cui è relativa l'attività di cui estrarre i possibili esiti
641        			ActivityNameIn		IN		DMT_DETT_ATTIVITA_WF.ACTIVITY_NAME%type,		-- (obblig.) Internal name (TASK_DEF_ID_ nel caso di Activiti) dell'attività di cui estrarre gli esiti
642        			ListaXMLOut			OUT		NOCOPY CLOB,									-- Lista dei possibili esiti dell'attività (XML conforme a schema LISTA_STD.xsd)
643        																						-- Ogni esito è un tag Riga che contiene le seguenti colonne:
644        																						-- 1) Codice dell'esito
645        																						-- 2) Descrizione dell'esito
646        																						-- Nel caso di Activiti coincidono
647        			ErrContextOut		OUT		VARCHAR2,										-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
648        			ErrCodeOut			OUT		PLS_INTEGER,									-- N.ro errore di uscita
649        			ErrMsgOut			OUT 		VARCHAR2)									-- Messaggio d'errore
650        			return PLS_INTEGER;															-- Vale 1 se tutto è andato a buon fine, altrimenti 0
651        
652        	--------overload della precedente: consente di individuare tipo flusso e attività anche dai loro display value
653        	function TrovaListaEsitiAttivita(
654        			IdDominioIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,			-- Identificativo del dominio (soggetto produttore o AOO o lo schema, se NULL) in cui vale il tipo di flusso WF
655        			CITypeFlussoWFIO	IN OUT	DMT_PROCESSES.PROV_CI_TY_FLUSSO_WF%type,		-- (obblig. se argomento successivo è NULL) Codice identificativo (KEY_ o PROC_DEF_ID_) del tipo di flusso workflow cui è relativa l'attività di cui estrarre gli esiti
656        			NomeTypeFlussoWFIn	IN		VARCHAR2 DEFAULT NULL,							-- Nome del tipo di flusso workflow (o suo inizio; ricerca case insensitive in like che non forza il % finale) cui è relativa l'attività di cui estrarre gli esiti
657        			IdProcessIn			IN 		DMT_PROCESSES.ID_PROCESS%type,					-- (obblig. se 2 argomenti precedenti sono NULL) Id. del processo/procedimento cui è relativa l'attività di cui estrarre i possibili esiti
658        			ActivityNameIn		IN		DMT_DETT_ATTIVITA_WF.ACTIVITY_NAME%type,		-- (obblig.se argomento successivo è NULL) Internal name (TASK_DEF_ID_ nel caso di Activiti) dell'attività di cui estrarre gli esiti
659        			DisplayNameAttIn		IN		VARCHAR2 DEFAULT NULL,						-- (obblig. se argomento precedente è NULL) Display name dell'attività (o suo inizio; ricerca case-insensitive in like che non forza il % finale)
660        			ListaXMLOut			OUT		NOCOPY CLOB,									-- Lista dei possibili esiti dell'attività (XML conforme a schema LISTA_STD.xsd)
661        																						-- Ogni esito è un tag Riga che contiene le seguenti colonne:
662        																						-- 1) Codice dell'esito
663        																						-- 2) Descrizione dell'esito
664        																						-- Nel caso di Activiti coincidono
665        			ErrContextOut		OUT		VARCHAR2,										-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
666        			ErrCodeOut			OUT		PLS_INTEGER,									-- N.ro errore di uscita
667        			ErrMsgOut			OUT 		VARCHAR2)									-- Messaggio d'errore
668        			return PLS_INTEGER;															-- Vale 1 se tutto è andato a buon fine, altrimenti 0
669        
670        	/****** Funzione da chiamare quando l'operatore richiede di eseguire un'attività dell'iter di un processo  					******/
671        	/****** In TaskInfoXMLOut restituisce tutte le informazioni per compilare la maschera del task e effetturane il salvataggio	******/
672        	/******	Non effettua controlli per verificare che l'attività sia disponibile all'utente di lavoro	     					******/
673        	/******	Nè per verificare che l'utente di lavoro esista/sia un utente vs cui l'utente connesso ha delega  					******/
674        	function Call_ExecAtt(
675        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,
676        																				-- (obblig). Codice identificativo del token di connessione
677        			IdUserLavoroIn			IN		DMT_USERS.ID_USER%type DEFAULT NULL,	-- Id. dell'utente a nome di cui si sta lavorando. Se non valorizzato è l'utente connesso
678        			IdProcessIn				IN		DMT_PROCESSES.ID_PROCESS%type,			-- (obblig.) Identificativo del processo di eseguire l'attività
679        			ActivityNameIn 			IN 		VARCHAR2,								-- (obblig.) Nome identificativo dell'attività del flusso WF da svolgere (TASK_DEF_KEY_ nel caso di Activiti)
680        																					-- Nel caso sia un'attività NON modellata nel workflow è la DES_EVENT_TYPE dell'evento corrispondente all'attività
681        			URLToRedirectToOut 		OUT 	VARCHAR2, 								-- Indica l'URL/nome identificativo del form a cui l'utente deve essere rediretto
682        			TaskInfoXMLOut			OUT		NOCOPY CLOB,							-- XML di conforme a SezioneCache.xsd con le informazioni utili a popolamento e salvataggio del task
683        			ErrContextOut			OUT		VARCHAR2,								-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
684        			ErrCodeOut				OUT		PLS_INTEGER,							-- N.ro errore di uscita
685        			ErrMsgOut				OUT 		VARCHAR2							-- Messaggio d'errore
686        			) return PLS_INTEGER;													-- Vale 1 se tutto è andato a buon fine, altrimenti 0
687        
688        	--------------funzione che viene richiamata al completamento di un task che prevede invio notifica mail con #DocActions.InvioNotEmail.CallXDettagliMail = true nella Call_ExecAtt
689        	--------------la stored viene chiamata dopo tutte le altre chiamate alle stored e API che fanno salvataggi tranne quella di completamento passo workflow che viene chiamata dopo
690        	function GetDatiXInvioNotifMail(
691        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,
692        																					-- (obblig). Codice identificativo del token di connessione
693        			IdUserLavoroIn			IN		DMT_USERS.ID_USER%type DEFAULT NULL,	-- Id. dell'utente a nome di cui si sta lavorando. Se non valorizzato è l'utente connesso
694        			IdProcessIn				IN		DMT_PROCESSES.ID_PROCESS%type,			-- (obblig.) Identificativo del processo di eseguire l'attività
695        			ActivityNameIn 			IN 		VARCHAR2, 								-- (obblig.) Nome identificativo dell'attività del flusso WF da svolgere (TASK_DEF_KEY_ nel caso di Activiti).
696        																					-- Nel caso sia un'attività NON modellata nel workflow è la DES_EVENT_TYPE dell'evento corrispondente all'attività
697        			MailInfoXMLOut			OUT		NOCOPY CLOB,							-- XML di conforme a SezioneCache.xsd con le informazioni sulla mail di notifica da inviare
698        			ErrContextOut			OUT		VARCHAR2,								-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
699        			ErrCodeOut				OUT		PLS_INTEGER,							-- N.ro errore di uscita
700        			ErrMsgOut				OUT 		VARCHAR2							-- Messaggio d'errore
701        			) return PLS_INTEGER;													-- Vale 1 se tutto è andato a buon fine, altrimenti 0
702        
703        
704        	/***** Funzione per ottenere la stored function che trasferisce dalla cache in tabelle definitive i dati specifici di una data attività WF in un dato dominio di lavoro ******/
705        	function GetStoredFncAttivita(
706        			ActivityNameIn		IN		DMT_ATTIVITA_WF.ACTIVITY_NAME%type,		-- (obblig.) Nome identificativo (ACTIVITY_NAME nel caso di Oracle WF) dell'attività WF per cui trovare la stored function associata
707        			IdDominioLavoroIn		IN		INTEGER						-- Id. del dominio di lavoro (sogg. prod./AOO) in cui trovare l'URL. Se NULL si intende che il dominio di lavoro è lo schema
708        		) return VARCHAR2;											-- Stored function ([<Schema_name>.][<package_name>.]<function_name>) specifica dell'attività nel dato dominio di lavoro
709        																-- Se NULL vuol dire che non c'è una maschera specifica
710        
711        	/******* serve a ricercare un tipo di flusso workflow per un dato sogg. produttore o AOO a partire da Id. e/o il nome						******/
712        	/******* restituisce il codice identificativo del tipo di flusso solo se a partire dagli estremi immessi riesce a identificarlo univocamente		******/
713        	function FindTypeFlussoWF(
714        			IdDominioIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- Identificativo del dominio (soggetto produttore o AOO o lo schema, se NULL) per cui cercare il tipo di flusso WF
715        			CodApplOwnerIn		IN		VARCHAR2 DEFAULT NULL,				-- Codice dell'applicazione "proprietaria" del tipo di flusso (ricerca esatta e case-sensitive)
716        			CodIstApplOwnerIn		IN 		VARCHAR2 DEFAULT NULL,				-- Codice dell'istanza di applicazione "proprietaria" del tipo di flusso (ricerca esatta e case-sensitive)
717        			FlgRestrApplOwnerIn	IN		INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se 1 viene trovato solo un tipo di flussi di cui è proprietaria l'applicazione proprietaria (ed eventuale istanza) specificata in CodApplOwnerIn; se 0 o NULL e se CodApplOwnerIn è valorizzata vengono viene trovato un tipo di flusso senza applicazione proprietaria o con applicazione proprietria pari a quella specificata
718        			CITypeFlussoWFIn		IN		DMT_PROCESSES.PROV_CI_TY_FLUSSO_WF%type DEFAULT NULL,
719        																-- Codice identificativo del tipo di flusso
720        			NomeTypeFlussoWFIn	IN		VARCHAR2 DEFAULT NULL,				-- Nome del tipo di flusso workflow (o suo inizio; ricerca case insensitive in like).
721        			FlgSoloVldIn		IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL) Indica se il tipo di flusso deve essere valido (1) o no (al timestamp TsRifIn)
722        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'),
723        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) di riferimento al quale il tipo di flusso deve avere gli estremi specificati in input. Se non valorizzato si intende sysdate
724        			FlgNoPercFinaleSuNomeIn	IN		PLS_INTEGER	DEFAULT NULL			-- (valori 1/0/NULL) Se 1 la ricerca sul nome non forza il % finale (a meno che non ci sia espressamente)
725        			)return VARCHAR2;											-- Codice identificativo del tipo di flusso trovato. E' NULL in caso di errore o tipo di flusso non individuabile univocamente
726        
727        	/******* serve a ricercare un tipo di flusso workflow da avviare a partire da Id. e/o nome												******/
728        	/******* restituisce tra gli output il codice identificativo del tipo di flusso solo se a partire dagli estremi immessi riesce a identificarlo univocamente		******/
729        	function FindTypeFlussoWFDaAvviare(
730        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,
731        																-- (obblig). Codice identificativo del token di connessione
732        			CITypeFlussoWFIO		IN OUT	DMT_PROCESSES.PROV_CI_TY_FLUSSO_WF%type,
733        																-- Codice identificativo del tipo di flusso
734        			NomeTypeFlussoWFIn	IN		VARCHAR2,						-- Nome del tipo di flusso workflow (o suo inizio; ricerca case insensitive in like).
735        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
736        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
737        			ErrMsgOut			OUT 		VARCHAR2						-- Messaggio d'errore
738        			) return PLS_INTEGER;										-- Vale 1 se l'individuazione è andata a buon fine, altrimenti 0
739        
740        	/******* serve a ricercare tipi di flussi (eventualmente relative ad un dato sogg. produttore o AOO e ad una data applicazione) a partire da Id. e/o nome del flusso 		******/
741        	/******* restituisce gli id. (KEY_) dei tipi di flussi trovati																												******/
742        	function FindTypesFlussiWF(
743        			IdDominioIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- Identificativo del dominio (soggetto produttore o AOO o lo schema, se NULL) per cui cercare il tipo di flusso WF
744        			CodApplOwnerIn		IN		VARCHAR2 DEFAULT NULL,					-- Codice dell'applicazione "proprietaria" del tipo di flusso (ricerca esatta e case-sensitive)
745        			CodIstApplOwnerIn		IN 		VARCHAR2 DEFAULT NULL,				-- Codice dell'istanza di applicazione "proprietaria" del tipo di flusso (ricerca esatta e case-sensitive)
746        			FlgRestrApplOwnerIn	IN		INTEGER DEFAULT NULL,					-- (valori 1/0/NULL) Se 1 vengono trovati solo tipi di flussi di cui è proprietaria l'applicazione proprietaria (ed eventuale istanza) specificata in CodApplOwnerIn; se 0 o NULL e se CodApplOwnerIn è valorizzata vengono vengono trovati tipi di flussi senza applicazione proprietaria o con applicazione proprietria pari a quella specificata
747        			CITypeFlussoWFIn		IN		DMT_PROCESSES.PROV_CI_TY_FLUSSO_WF%type DEFAULT NULL,
748        																				-- Codice identificativo (KEY_) del tipo di flusso
749        			NomeTypeFlussoWFIn	IN		VARCHAR2 DEFAULT NULL,					-- Nome del tipo di flusso workflow (o suo inizio; ricerca case insensitive in like).
750        			FlgSoloVldIn		IN		PLS_INTEGER DEFAULT 1,					-- (valori 1/0/NULL) Indica se il tipo di flusso deve essere valido (1) o no (al timestamp TsRifIn)
751        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'),
752        																				-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) di riferimento al quale il tipo di flusso deve avere gli estremi specificati in input. Se non valorizzato si intende sysdate
753        			FlgNoPercFinaleSuNomeIn	IN		PLS_INTEGER	DEFAULT NULL			-- (valori 1/0/NULL) Se 1 la ricerca sul nome non forza il % finale (a meno che non ci sia espressamente)
754        			) return DMTO_STRING;												-- restituisce una lista con gli id. dei tipi di flusso trovati (le KEY_ nel caso di Activity). In caso di errore la lista è NULL
755        
756        	/***** serve a ottenere il nome di un flusso workflow di cui è noto il cod. identificativo (KEY_) *****/
757        	function DecodeTypeFlussoWF(
758        			IdDominioIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,			-- Identificativo del dominio (soggetto produttore o AOO o lo schema, se NULL) di lavoro
759        			CITypeFlussoWFIn		IN		DMT_PROCESSES.PROV_CI_TY_FLUSSO_WF%type)	-- (obblig.) Codice identificativo (KEY_) del tipo di flusso
760        			return VARCHAR2;															-- Nome del tipo di flusso. E' NULL in caso di errore o tipo di flusso inesistente
761        
762        	/**** Funzione per ricercare i tipi di flussi workflow (nelle tabelle di Activiti) 	****/
763        	function TrovaFlussiWFTypes(
764        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,
765        																			-- (obblig). Codice identificativo del token di connessione
766        			StrInNomeIn			IN		VARCHAR2 DEFAULT NULL,				-- Stringa che deve essere contenuta nel nome dei tipi flussi da trovare (ricerca case-insensitive in like)
767        			FlgSoloVldIn 		IN  		INTEGER DEFAULT NULL, 			-- (valori 1/0/NULL) Se 1 indica se si devono estrarre solo i tipi di flussi attivi alla data odierna
768        			TsVldIn			IN 		VARCHAR2 DEFAULT NULL,					-- Stinga con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) a cui devono essere validi i tipi di flussi da estrarre
769        			CodApplOwnerIn		IN		VARCHAR2 DEFAULT NULL,				-- Codice dell'applicazione "proprietaria" dei tipi di flussi. Se valorizzata pari a #BY_CONN_TKN e si è connessi da un'applicazione esterna si ricercano solo tipi di flussi di cui è proprietaria quell'applicazione
770        			CodIstApplOwnerIn		IN 		VARCHAR2 DEFAULT NULL,			-- Codice dell'istanza di applicazione "proprietaria" dei tipi di flussi. Se valorizzata pari a #BY_CONN_TKN e si è connessi da un'applicazione esterna si ricercano solo tipi di flussi di cui è proprietaria l'istanza di applicazione esterna da cui si è connessi
771        			FlgRestrApplOwnerIn	IN		INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se 1 vengono estratti solo tipi di flussi di cui è proprietaria l'applicazione proprietaria (ed eventuale istanza) specificata in CodApplOwnerIn; se 0 o NULL e se CodApplOwnerIn è valorizzata vengono estratti solo i tipi di flussi senza applicazione proprietaria o con applicazione proprietria pari a quella specificata
772        			CITypeFlussoWFToAddIn	IN		DMT_PROCESSES.PROV_CI_TY_FLUSSO_WF%type DEFAULT NULL,
773        																			-- Codice di un  tipo di flusso da aggiungere comunque nella lista in output
774        			NomeTypeFlussoWFToAddIn	IN		VARCHAR2 DEFAULT NULL,			-- Nome di un  tipo di flusso da aggiungere comunque nella lista in output
775        			------------- inizio argomenti standard di tutte le funzioni di ricerca che devono restituire una lista --------------
776        			ColOrderByIO		IN OUT	VARCHAR2,							-- Indica il/i numeri della/e colonna dell'XML (CLOB ListaXMLOut) di output per cui ordinare i record nell'XML stesso (si può ordinare solo per le colonne 1 e 2). Se l'ordinamento è per più colonne queste vanno separate con "," (es: 1; 1,2)
777        																			-- in output può essere diverso che in input solo se in input è NULL: in tal caso significa che esiste sul tipo di ordinamento una qualche preimpostazione di sistema/utente ecc.
778        																			-- se non valorizzato (neppure in output) la lista di record restituita non è ordinata
779        			FlgDescOrderByIO  	IN OUT	VARCHAR2,							-- E' una stringa di 1 o 0/NULL, tanti quanti le colonne di ordinamento, separati da ",": 1 significa che l'ordinamento per la data colonna deve essere discendente anzichè ascendente (es: 1; 1,0; 1, )
780        																			-- in output può essere diverso che in input solo se in input è NULL: in tal caso significa che esiste sul verso di ordinamento una qualche preimpostazione di sistema/utente ecc.
781        			FlgSenzaPaginazioneIn 	IN 		PLS_INTEGER DEFAULT NULL,       -- (valori 1/0/NULL) Se 1 l'estrazione non è paginata, altrimenti sì
782        			NroPaginaIO      		IN OUT	PLS_INTEGER,                  	-- E' il numero della pagina da estrarre; se NULL e l'estrazione è paginata viene estratta la prima pagina
783           			BachSizeIO			IN OUT	PLS_INTEGER,						-- Indica il massimo n.ro di record da estrarre se l'estrazione non è paginata (FlgSenzaPaginazioneIn=1)
784        																			-- Indica la dimensione (n.ro di record) della pagina se l'estrazione è paginata (FlgSenzaPaginazioneIn 0 o NULL) e in tal caso se non è valorizzato la dimensione della pagina è quella settata per l'utente di lavoro o è pari al valore del parametro STD_PAGE_NUM_ROW del dominio di lavoro
785        			OverFlowLimitIn		IN		PLS_INTEGER DEFAULT NULL,			-- E' il n.ro di record soddisfacenti la ricerca superato il quale la funzione deve restituire errore di overflow
786        			FlgSenzaTotIn		IN		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se 1 significa che non è richiesto come output il totale dei record soddisfacenti la ricerca (se la ricerca è paginata per la prima pagina il totale viene calcolato comunque, per le successive no)
787        			NroTotRecOut		OUT		PLS_INTEGER,						-- E' il n.ro di record complessivi trovati (valorizzato solo se FlgSenzaTotIn è 0 o NULL o se si estrae la prima pagina)
788             			NroRecInPaginaOut 	OUT   	PLS_INTEGER,                    -- E' il numero di record nella pagina (valorizzato solo se l'estrazione è paginata, ovvero se FlgSenzaPaginazioneIn 0 o NULL)
789        			------------- fine argomenti standard di tutte le funzioni di ricerca che devono restituire una lista --------------
790        			ListaXMLOut			OUT		CLOB,								-- Lista dei tipi di flussi trovati(XML conforme a schema LISTA_STD.xsd)
791        																			-- Ogni tipo flusso è un tag Riga che contiene le seguenti colonne:
792        																			-- 1: Codice identificativo (KEY_) del tipo flusso
793        																			-- 2: Nome (NAME_) del tipo flusso
794        																			-- 3: (1/0) Se 1 indica se il tipo flusso è attualmente valido
795        																			-- 4: Flag che indica che il tipo di flusso è dell'applicazione CodApplOwnerIn ed eventuale istanza CodIstApplOwnerIn
796        																			-- 5: Descrizione dell'applicazione (ed eventuale istanza) cui è relativo il tipo di flusso
797        			ErrContextOut		OUT		VARCHAR2,							-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
798        			ErrCodeOut			OUT		PLS_INTEGER,						-- N.ro errore di uscita
799        			ErrMsgOut			OUT 		VARCHAR2)						-- Messaggio d'errore
800        			return PLS_INTEGER;												-- Vale 1 se tutto è andato a buon fine, altrimenti 0
801        
802        	/***** Funzione per ottenere le fasi (ovvero i sotto-processi di primo livello) presenti in un dato flusso workflow 		******/
803        	function TrovaFasiFlussoWF(
804        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,
805        																-- (obblig). Codice identificativo del token di connessione
806        			CITypeFlussoWFIn		IN		DMT_PROCESSES.PROV_CI_TY_FLUSSO_WF%type DEFAULT NULL,
807        																-- Codice identificativo del tipo di flusso di cui trovare le fasi
808        			NomeTypeFlussoWFIn	IN		VARCHAR2 DEFAULT NULL,				-- Nome del tipo di flusso workflow di cui trovare le fasi (o suo inizio; ricerca case insensitive in like).
809        			StrInNomeFaseIn		IN		VARCHAR2 DEFAULT NULL,				-- Stringa che deve essere contenuta nel nome (display name) delle fasi da trovare (o suo inizio; ricerca case insensitive in like)
810        			CIFaseIn			IN		VARCHAR2 DEFAULT NULL,				-- Codice identificativo (ACTIVITY_NAME per Orcale WF) della fase da trovare (ricerca case-insensitive esatta)
811        			FlgSoloVldIn 		IN  		INTEGER DEFAULT NULL, 				-- (valori 1/0/NULL) Se 1 indica se si devono estrarre solo le fasi valide alla data odierna
812        			TsVldIn			IN 		VARCHAR2 DEFAULT NULL,				-- Stinga con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) a cui devono essere valide le fasi da estrarre
813        			CIFaseToAddIn		IN		DMT_PROCESS_HISTORY.ACTIVITY_NAME_WF%type DEFAULT NULL,
814        																-- Codice identificativo (ACTIVITY_NAME in caso di Orcale WF) di una fase da aggiungere comunque nella lista in output
815        			NomeFaseToAddIn		IN		VARCHAR2 DEFAULT NULL,				-- Nome (DISPLAY_NAME in caso di Orcale WF) di una fase da aggiungere comunque nella lista in output
816        			------------- inizio argomenti standard di tutte le funzioni di ricerca che devono restituire una lista --------------
817        			ColOrderByIO		IN OUT	VARCHAR2,						-- Indica il/i numeri della/e colonna dell'XML (CLOB ListaXMLOut) di output per cui ordinare i record nell'XML stesso (si può ordinare solo per le colonne 1 e 2). Se l'ordinamento è per più colonne queste vanno separate con "," (es: 1; 1,2)
818        																-- in output può essere diverso che in input solo se in input è NULL: in tal caso significa che esiste sul tipo di ordinamento una qualche preimpostazione di sistema/utente ecc.
819        																-- se non valorizzato (neppure in output) la lista di record restituita non è ordinata
820        			FlgDescOrderByIO  	IN OUT	VARCHAR2,						-- E' una stringa di 1 o 0/NULL, tanti quanti le colonne di ordinamento, separati da ",": 1 significa che l'ordinamento per la data colonna deve essere discendente anzichè ascendente (es: 1; 1,0; 1, )
821        																-- in output può essere diverso che in input solo se in input è NULL: in tal caso significa che esiste sul verso di ordinamento una qualche preimpostazione di sistema/utente ecc.
822        			FlgSenzaPaginazioneIn 	IN 		PLS_INTEGER DEFAULT NULL,            	-- (valori 1/0/NULL) Se 1 l'estrazione non è paginata, altrimenti sì
823        			NroPaginaIO      		IN OUT	PLS_INTEGER,                  		-- E' il numero della pagina da estrarre; se NULL e l'estrazione è paginata viene estratta la prima pagina
824           			BachSizeIO			IN OUT	PLS_INTEGER,					-- Indica il massimo n.ro di record da estrarre se l'estrazione non è paginata (FlgSenzaPaginazioneIn=1)
825        																-- Indica la dimensione (n.ro di record) della pagina se l'estrazione è paginata (FlgSenzaPaginazioneIn 0 o NULL) e in tal caso se non è valorizzato la dimensione della pagina è quella settata per l'utente di lavoro o è pari al valore del parametro STD_PAGE_NUM_ROW del dominio di lavoro
826        			OverFlowLimitIn		IN		PLS_INTEGER DEFAULT NULL,			-- E' il n.ro di record soddisfacenti la ricerca superato il quale la funzione deve restituire errore di overflow
827        			FlgSenzaTotIn		IN		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se 1 significa che non è richiesto come output il totale dei record soddisfacenti la ricerca (se la ricerca è paginata per la prima pagina il totale viene calcolato comunque, per le successive no)
828        			NroTotRecOut		OUT		PLS_INTEGER,					-- E' il n.ro di record complessivi trovati (valorizzato solo se FlgSenzaTotIn è 0 o NULL o se si estrae la prima pagina)
829             			NroRecInPaginaOut 	OUT   	PLS_INTEGER,                     		-- E' il numero di record nella pagina (valorizzato solo se l'estrazione è paginata, ovvero se FlgSenzaPaginazioneIn 0 o NULL)
830        			------------- fine argomenti standard di tutte le funzioni di ricerca che devono restituire una lista --------------
831        			ListaXMLOut			OUT		CLOB,							-- Lista delle fasi trovate(XML conforme a schema LISTA_STD.xsd)
832        																-- Ogni fase è un tag Riga che contiene le seguenti colonne:
833        																-- 1: Codice identificativo della fase (ACTIVITY_NAME di Oracle WF)
834        																-- 2: Display name della fase (DISPLAY_NAME di Oracle WF)
835        																-- 3: (1/0) Se 1 indica che la fase è attualmente valida
836        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
837        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
838        			ErrMsgOut			OUT 		VARCHAR2)						-- Messaggio d'errore
839        			return PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine, altrimenti 0
840        
841        	/***** Funzione per ottenere le attività utente (TASK) presenti in un dato flusso workflow 								   							******/
842        	function TrovaAttFlussoWF(
843        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,
844        																						-- (obblig). Codice identificativo del token di connessione
845        			CITypeFlussoWFIO		IN OUT	DMT_PROCESSES.PROV_CI_TY_FLUSSO_WF%type,	-- Codice identificativo del tipo di flusso di cui trovare le attività
846        			NomeTypeFlussoWFIn		IN		VARCHAR2 DEFAULT NULL,						-- Nome del tipo di flusso workflow di cui trovare le attività (o suo inizio; ricerca case insensitive in like).
847        			FlgListaIstanzeAttIn	IN		PLS_INTEGER DEFAULT NULL,					-- non utilizzato nel caso di Activiti
848        																						-- (valori 1/0/NULL) Se 1 vengono trovati tanti record quante le istanze di attività del flusso che matchano i filtri (si accorpano comunque le istanze di una stessa attività che siano presenti nella stessa fase), altrimenti tanti record quante le attività (si accorpa per attività)
849        																						-- Solo se 1 nella lista in output sono valorizzati i campi (cod. id. e display name) relativi alla fase (ovvero sotto-processo) in cui ricade l'istanza di attività
850        			StrInNomeAttIn			IN		VARCHAR2 DEFAULT NULL,						-- Stringa che deve essere contenuta nel nome (display name) delle attività da trovare (ricerca case-insensitive in like)
851        			CIAttivitaIn			IN		VARCHAR2 DEFAULT NULL,						-- Codice identificativo (TASK_DEF_KEY_ di Activiti) dell'attività da trovare (ricerca case-sensitive esatta)
852        			StrInNomeFaseIn			IN		VARCHAR2 DEFAULT NULL,						-- Stringa che deve essere contenuta nel nome (display name) delle fasi che contengono l'attività da trovare (ricerca case-insensitive in like)
853        			CIFaseIn				IN		VARCHAR2 DEFAULT NULL,						-- non utilizzato nel caso di Activiti
854        																						-- Codice identificativo della fase in cui deve esserci almeno un'istanza delle attività da trovare (ricerca case-sensitive esatta)
855        			FlgSoloVldIn 			IN  		INTEGER DEFAULT NULL, 					-- (valori 1/0/NULL) Se 1 indica se si devono estrarre solo le attività valide alla data odierna
856        			TsVldIn					IN 		VARCHAR2 DEFAULT NULL,						-- Stinga con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) a cui devono essere valide le attività da estrarre
857        			CIAttivitaToAddIn		IN		DMT_PROCESS_HISTORY.ACTIVITY_NAME_WF%type DEFAULT NULL,
858        																						-- Codice identificativo (TASK_DEF_KEY_ di Activiti in caso di Orcale WF) di un'attività da aggiungere comunque nella lista in output
859        			NomeAttivitaToAddIn	IN		VARCHAR2 DEFAULT NULL,							-- Nome (NAME_ in Activiti) di un'attività da aggiungere comunque nella lista in output
860        			------------- inizio argomenti standard di tutte le funzioni di ricerca che devono restituire una lista --------------
861        			ColOrderByIO		IN OUT	VARCHAR2,										-- Indica il/i numeri della/e colonna dell'XML (CLOB ListaXMLOut) di output per cui ordinare i record nell'XML stesso (si può ordinare solo per le colonne 1, 2, 4 e 5, 6). Se l'ordinamento è per più colonne queste vanno separate con "," (es: 1; 1,2)
862        																						-- in output può essere diverso che in input solo se in input è NULL: in tal caso significa che esiste sul tipo di ordinamento una qualche preimpostazione di sistema/utente ecc.
863        																						-- se non valorizzato (neppure in output) la lista di record restituita non è ordinata
864        			FlgDescOrderByIO  	IN OUT	VARCHAR2,										-- E' una stringa di 1 o 0/NULL, tanti quanti le colonne di ordinamento, separati da ",": 1 significa che l'ordinamento per la data colonna deve essere discendente anzichè ascendente (es: 1; 1,0; 1, )
865        																						-- in output può essere diverso che in input solo se in input è NULL: in tal caso significa che esiste sul verso di ordinamento una qualche preimpostazione di sistema/utente ecc.
866        			FlgSenzaPaginazioneIn 	IN 		PLS_INTEGER DEFAULT NULL,            		-- (valori 1/0/NULL) Se 1 l'estrazione non è paginata, altrimenti sì
867        			NroPaginaIO      		IN OUT	PLS_INTEGER,                  				-- E' il numero della pagina da estrarre; se NULL e l'estrazione è paginata viene estratta la prima pagina
868           			BachSizeIO			IN OUT	PLS_INTEGER,									-- Indica il massimo n.ro di record da estrarre se l'estrazione non è paginata (FlgSenzaPaginazioneIn=1)
869        																						-- Indica la dimensione (n.ro di record) della pagina se l'estrazione è paginata (FlgSenzaPaginazioneIn 0 o NULL) e in tal caso se non è valorizzato la dimensione della pagina è quella settata per l'utente di lavoro o è pari al valore del parametro STD_PAGE_NUM_ROW del dominio di lavoro
870        			OverFlowLimitIn		IN		PLS_INTEGER DEFAULT NULL,						-- E' il n.ro di record soddisfacenti la ricerca superato il quale la funzione deve restituire errore di overflow
871        			FlgSenzaTotIn		IN		PLS_INTEGER DEFAULT NULL,						-- (valori 1/0/NULL) Se 1 significa che non è richiesto come output il totale dei record soddisfacenti la ricerca (se la ricerca è paginata per la prima pagina il totale viene calcolato comunque, per le successive no)
872        			NroTotRecOut		OUT		PLS_INTEGER,									-- E' il n.ro di record complessivi trovati (valorizzato solo se FlgSenzaTotIn è 0 o NULL o se si estrae la prima pagina)
873             		NroRecInPaginaOut 	OUT   	PLS_INTEGER,                     				-- E' il numero di record nella pagina (valorizzato solo se l'estrazione è paginata, ovvero se FlgSenzaPaginazioneIn 0 o NULL)
874        			------------- fine argomenti standard di tutte le funzioni di ricerca che devono restituire una lista --------------
875        			ListaXMLOut			OUT		CLOB,											-- Lista della attività o istanze di attività trovate(XML conforme a schema LISTA_STD.xsd)
876        																						-- Ogni attività o sua istanza è un tag Riga che contiene le seguenti colonne:
877        																						-- 1: Codice identificativo dell'attività (TASK_DEF_KEY_ di Activiti)
878        																						-- 2: Display name dell'attività (NAME_ di Activiti)
879        																						-- 3: (1/0) Se 1 indica che l'attività è attualmente valida
880        																						-- 4: Codice identificativo della fase in cui ricade l'istanza di attività
881        																						-- 5: Nome della fase in cui ricade l'istanza di attività
882        																						-- 6: N.ro di ordine tra le attività della fase (valorizzato solo se lista di istanze attivita)
883        			ErrContextOut		OUT		VARCHAR2,										-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
884        			ErrCodeOut			OUT		PLS_INTEGER,									-- N.ro errore di uscita
885        			ErrMsgOut			OUT 		VARCHAR2,									-- Messaggio d'errore
886        			FlgAggiungiFasiIn		IN		PLS_INTEGER DEFAULT 1)						-- (valori 1/0/NULL) Se diverso da 0 - 1 o NULL - nella lista in output vengono messe anche le fasi/processi con colonne 1 e 2 nulle
887        			return PLS_INTEGER;															-- Vale 1 se tutto è andato a buon fine, altrimenti 0
888        
889        	/***** Funzione per ottenere la decodifica dell'internal name (TASK_DEF_KEY_ nel caso di Activiti) di un'attività WF 	*****/
890        	/***** In caso di errore solleva eccezione																				*****/
891        	function DecodeAttivita(
892        			CITypeFlussoWFIO	IN OUT	DMT_PROCESSES.PROV_CI_TY_FLUSSO_WF%type,		-- (obblig. se argomento successivo è NULL) Codice identificativo del tipo di flusso workflow cui è relativa l'attività da decodificare
893        			IdProcessIn			IN 		DMT_PROCESSES.ID_PROCESS%type,					-- (obblig. se argomento precedente è NULL) Id. del processo/procedimento cui è relativa l'attività da decodificare
894        			ActivityNameIn		IN		DMT_DETT_ATTIVITA_WF.ACTIVITY_NAME%type,		-- (obblig.) TASK_DEF_KEY_ dell'attività da decodificare
895        			IdDominioIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type DEFAULT NULL
896        																						-- Identificativo del dominio (soggetto produttore o AOO o lo schema, se NULL) in cui si è connessi
897        																						-- Viene considerato solo se IdProcessIn è NULL
898        			)return VARCHAR2;															-- Decodifica dell'attività WF
899        
900        	--------overload della precedente, ma senza argomenti OUT (quindi utilizzabile in una query)
901        	function DecodeAttivita(
902        			CITypeFlussoWFIn		IN		DMT_PROCESSES.PROV_CI_TY_FLUSSO_WF%type,	-- (obblig.) Codice identificativo del tipo di flusso workflow cui è relativa l'attività da decodificare
903        			ActivityNameIn		IN		DMT_DETT_ATTIVITA_WF.ACTIVITY_NAME%type,		-- (obblig.) TASK_DEF_KEY dell'attività da decodificare
904        			IdDominioIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type DEFAULT NULL
905        																						-- Identificativo del dominio (soggetto produttore o AOO o lo schema, se NULL) in cui si è connessi
906        			)return VARCHAR2;															-- Decodifica dell'attività WF
907        
908        	/******* serve a ricercare attività WF a partire da estremi del flusso di appartenenza e dell'attività stessa				******/
909        	/******* Le attività possono essere: task e anche sotto-processi															******/
910        	/******* restituisce gli internal name (TASK_DEF_KEY_ nel caso di Activiti) delle attività trovate							******/
911        	function FindAttivitaTab(
912        			IdDominioIn				IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,		-- Identificativo del dominio (soggetto produttore o AOO o lo schema, se NULL) in cui vale il tipo di flusso WF
913        			CITypeFlussoWFIO		IN OUT	DMT_PROCESSES.PROV_CI_TY_FLUSSO_WF%type,	-- Codice identificativo (KEY_ o PROC_DEF_ID_) del tipo di flusso workflow cui sono relative le attività da trovare
914        			NomeTypeFlussoWFIn		IN		VARCHAR2 DEFAULT NULL,						-- Nome del tipo di flusso workflow (o suo inizio; ricerca case insensitive in like che non forza il % finale) cui sono relative le attività da trovare.
915        			IdProcessIn				IN 		DMT_PROCESSES.ID_PROCESS%type DEFAULT NULL,
916        																						-- (obblig. se argomenti precedenti sono NULL) Id. del processo/procedimento cui sono relative le attività da trovare
917        			FlgTipoAttivitaIn		IN		VARCHAR2 DEFAULT 'T',						-- (valori T/P/NULL) Flag per restringere la ricerca ad attività di tipo: T = Task, P=Process
918        			ActivityNameIn			IN		DMT_DETT_ATTIVITA_WF.ACTIVITY_NAME%type DEFAULT NULL,
919        																						-- (obblig. se argomento successivo è NULL) Internal name (TASK_DEF_KEY_ nel caso di Activiti) dell'attività da trovare (ricerca case-sensitive esatta)
920        			DisplayNameAttIn		IN		VARCHAR2 DEFAULT NULL)						-- (obblig. se argomento precedente è NULL) Display name dell'attività (o suo inizio; ricerca case-insensitive in like che non forza il % finale)
921        			return DMTO_STRING;															-- Lista degli internal name delle attività trovate (TASK_DEF_KEY_ nel caso di Activiti)
922        
923        	/******* serve a ricercare un'attività WF a partire da estremi del flusso di appartenenza e dell'attività stessa					******/
924        	/******* Le attività possono essere: task e anche sotto-processi																	******/
925        	/******* restituisce il l'internal name dell'attività solo se a partire dagli estremi immessi riesce a identificarla univocamente	******/
926        	function FindAttivita(
927        			IdDominioIn				IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,		-- Identificativo del dominio (soggetto produttore o AOO o lo schema, se NULL) in cui vale il tipo di flusso WF
928        			CITypeFlussoWFIO		IN OUT	DMT_PROCESSES.PROV_CI_TY_FLUSSO_WF%type,	-- Codice identificativo (KEY_ o PROC_DEF_ID_) del tipo di flusso workflow in cui trovare l'attività
929        			NomeTypeFlussoWFIn		IN		VARCHAR2 DEFAULT NULL,						-- Nome del tipo di flusso workflow (o suo inizio; ricerca case insensitive in like che non forza il % finale) in cui trovare l'attività
930        			IdProcessIn				IN 		DMT_PROCESSES.ID_PROCESS%type DEFAULT NULL,
931        																						-- (obblig. se argomenti precedenti sono NULL) Id. del processo/procedimento nel cui flusso trovare l'attività
932        			FlgTipoAttivitaIn		IN		VARCHAR2 DEFAULT 'T',						-- (valori T/P/NULL) Flag per restringere la ricerca ad attività di tipo: T = Task, P=Process
933        			ActivityNameIn			IN		DMT_DETT_ATTIVITA_WF.ACTIVITY_NAME%type DEFAULT NULL,
934        																						-- (obblig. se argomento successivo è NULL) Internal name (TASK_DEF_KEY_ nel caso di Activiti) dell'attività da trovare (ricerca case-sensitive esatta)
935        			DisplayNameAttIn		IN		VARCHAR2 DEFAULT NULL)						-- (obblig. se argomento precedente è NULL) Display name dell'attività (o suo inizio; ricerca case-insensitive in like che non forza il % finale)
936        			return VARCHAR2;															-- Internal name dell'attività trovata (TASK_DEF_KEY_ nel caso di Activiti) se univocamente individuata, altrimenti NULL
937        
938        	function GetTaskInstIdInProcess(
939        			IdProcessIn				IN		DMT_PROCESSES.ID_PROCESS%type,		-- (obblig) Id. del processo/procedimento
940        			ActivityNameIn			IN		VARCHAR2,							-- (obblig.) Identificativo del task nel flusso workflow (in Activiti l'ID del task nel BPMN)
941        			TaskInstIDOut			OUT		VARCHAR2,							-- Id. dell'istanza del task eseguibile nel dato processo/procedimento
942        																				-- Se non c'è un'istanza eseguibili del task restituisce NULL
943        			ErrContextOut			OUT		VARCHAR2,							-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
944        			ErrCodeOut				OUT		PLS_INTEGER,						-- N.ro errore di uscita
945        			ErrMsgOut				OUT 	VARCHAR2							-- Messaggio d'errore
946        			) return PLS_INTEGER;												-- Vale 1 se tutto è andato a buon fine, altrimenti 0
947        
948        	-----funzione per ottenere all'interno di una data istanza di flusso workflow
949        	---- l'ID dell'istanza eseguibile di un task di cui sia specificato l'ID in input
950        	function GetTaskInstIdInFlow(
951        			CIFlussoWFIn			IN	   VARCHAR2,						    -- (obblig.) Id. del flusso WF (ID_ dell'istanza di processo nel caso di Activiti)
952        			ActivityNameIn			IN		VARCHAR2,							-- (obblig.) Identificativo del task nel flusso workflow (in Activiti l'ID del task nel BPMN)
953        			TaskInstIDOut			OUT		VARCHAR2,							-- Id. dell'istanza del task eseguibile nel dato flusso Activiti
954        																				-- Se non c'è un'istanza eseguibili del task restituisce NULL
955        			ErrContextOut			OUT		VARCHAR2,							-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
956        			ErrCodeOut				OUT		PLS_INTEGER,						-- N.ro errore di uscita
957        			ErrMsgOut				OUT 	VARCHAR2							-- Messaggio d'errore
958        			) return PLS_INTEGER;												-- Vale 1 se tutto è andato a buon fine, altrimenti 0
959        
960        	----- funzione per istanziare un nuovo iter di atto/documento collegato ad atto (es emendamento) come copia di una proposta/atto già avviato
961        	function GetDatiNuovoIterAttoComeCopia(
962        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,
963        																								-- (obblig). Codice identificativo del token di connessione
964        			IdUserLavoroIn			IN		DMT_USERS.ID_USER%type DEFAULT NULL,				-- Id. dell'utente a nome di cui si sta lavorando. Se non valorizzato è l'utente connesso
965        			IdProcTypeDaAvviareIn	IN 		INTEGER,											-- (obblig.) Id. del tipo di processo da avviare come copia di uno precedente.
966        			FlgTipoNumerazioneIn	IN		VARCHAR2 DEFAULT NULL,								-- (valori I/F) Indica se la proosta/atto da cui copiare viene indicati con la numerazione di proposta/iniziale o quella finale. Può non essere valorizzato
967        			SiglaNumerazioneIn		IN		VARCHAR2,											-- Sigla del registro di numerazione della proosta/atto da cui copiare. Può non essere valorizzato
968        			AnnoNumerazioneIn		IN		INTEGER,											-- Anno di numerazione della proposta/atto da cui copiare. Può non essere valorizzato
969        			NumeroIn				IN		INTEGER,											-- (obblig.) N° della proposta/atto da cui copiare.
970        			IdUDDaCopiareOut		OUT		INTEGER,											-- ID_UD della proposta/atto da cui copiare i dati
971        			IdProcessDaCopiareOut	OUT		INTEGER,											-- ID_PROCESS del processo di lavorazione della proposta/atto da cui copiare i dati
972        			ErrContextOut			OUT		VARCHAR2,											-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
973        			ErrCodeOut				OUT		PLS_INTEGER,										-- N.ro errore di uscita
974        			ErrMsgOut				OUT 	VARCHAR2											-- Messaggio d'errore
975        			) return PLS_INTEGER;																-- Vale 1 se l'atto/proposta da copiare esiste ed è coerente con il tipo di processo da avviare ed è visibile all'utente di lavoro, altrimenti 0
976        
977        
978        	----- serve ad effettuare azioni massive su proposte di atti/atti
979        	----- in caso di errore su una singola proposta/atto l'elaborazione NON si interrompe e procede con la successiva.
980        	----- su ogni proposta/atto elaborato viene subito fatta la commit se richiesta
981        	function AzioneSuListaDocAtti(
982        		CodIdConnectionTokenIn		IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,
983        																				-- (obblig). Codice identificativo del token di connessione
984        		IdUserLavoroIn				IN		DMT_USERS.ID_USER%type DEFAULT NULL,-- Id. dell'utente a nome di cui si lavora. Se non valorizzato è l'utente connesso
985        		AzioneIn					IN		VARCHAR2,							-- Azione da effettuare sulla lista di proposte/atti indicata
986        																				-- Valori ammessi:
987        																				-- PRESENTAZIONE_FIRMATARIO
988        																				-- RITIRO_FIRMATARIO
989        																				-- BLOCCO_PRESENTAZIONE_EMENDAMENTI
990        																				-- SBLOCCO_PRESENTAZIONE_EMENDAMENTI
991        																				-- SOTTOSCRIZIONE_CONSIGLIERE
992        																				-- ELIMINAZIONE_SOTTOSCRIZIONE_CONSIGLIERE
993        																				-- RILASCIO_VISTO
994        																				-- RIFIUTO_VISTO
995        																				-- ANNULLAMENTO
996        																				-- RIPRISTINO
997        																				-- ASSEGNAZIONE_ASSESSORE
998        																				-- APPOSIZIONE_TAG
999        																				-- APPOSIZIONE_POST-IT
1000        		ListaPropAttiIn   			IN    	CLOB,				 				-- (obblig.) Lista XML conforme a schema ListaSTD.xsd
1001        																				-- Ogni proposta/atto è un tag Riga; contiene le colonne:
1002        																				-- 1) ID_UD della proposta/atto
1003        																				-- 2) ID_PROCESS del processo della proposta/atto
1004        		XMLDettAzioneIn				IN 		CLOB DEFAULT NULL,					-- Lista XML conforme a schema SezioneCache.xsd con i dati di dettaglio dell'azione
1005        																				-- Le variabili gestite sono:
1006        																				-- Nota (per azione APPOSIZIONE_POST-IT)
1007        																				-- @Assessori (per azione ASSEGNAZIONE_ASSESSORE) lista con colonne: 1) ID_USER dell'assessore; 2) Cognome e Nome dell'assessore; 3) USERNAME dell'assessore
1008        																				-- @Tag (per azione APPOSIZIONE_TAG) lista con colonne: 1) codice tag, 2) decodifica tag
1009        																				-- BloccoDal (per azione BLOCCO_PRESENTAZIONE_EMENDAMENTI, non obbligatorio; se non indicato il blocco è istantaneo) Data e ora nel formato FMT_STD_TIMESTAMP
1010        																				-- Motivo (per azioni ANNULLAMENTO, RITIRO_FIRMATARIO e RIPRISTINO)
1011        																				-- Osservazioni (per azioni RILASCIO_VISTO 	e RIFIUTO_VISTO)
1012        		FlgRollBckFullIn			IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
1013        																				-- ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
1014        		FlgAutoCommitIn				IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
1015        		EsitiOut					OUT		NOCOPY CLOB,						-- Lista XML conforme a schema ListaSTD.xsd che contiene gli esiti dell'operazione su ciascuna mail in input
1016        																				-- Ogni proposta/atto corrisponde ad un tag riga con le colonne:
1017        																				-- 1: ID_UD
1018        																				-- 2: ESTREMI_PROPOSTA_ATTO
1019        																				-- 3: Dati principali della proposta/atto (da mostrare come label)
1020        																				-- 4: Esito operazione: OK, KO
1021        																				-- 5: Messaggio di errore
1022        		ErrContextOut				OUT		VARCHAR2,							-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
1023        		ErrCodeOut					OUT		PLS_INTEGER,						-- N.ro errore di uscita
1024        		ErrMsgOut					OUT 	VARCHAR2							-- Messaggio d'errore
1025        		) return PLS_INTEGER;													-- Vale 1 se non ci sono stati errori generali (vale a dire NON sulla singola proposta/atto), altrimenti 0
1026        
1027        	------------- funzione per testare se un certo ruolo di processo è presente in un task disponibile o già svolto su un dato processo
1028        	function TestDaFareFattoTaskXRuoloProc(
1029        			IdProcessIn			IN		DMT_PROCESSES.ID_PROCESS%type,		-- (obblig.) Id. del processo su cui fare il test
1030        			RuoloProcIn			IN		VARCHAR2							-- (obblig.) Ruolo di processo da testare
1031        			) return PLS_INTEGER;											-- restituisce 1 IN caso di test positivo, 0 IN caso di test negativo, valori negativi in caso di errore
1032        
1033        END DMPK_WF;