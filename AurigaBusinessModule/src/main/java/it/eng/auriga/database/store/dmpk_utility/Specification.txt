1        PACKAGE DMPK_UTILITY AUTHID CURRENT_USER IS
2        
3        	/****************************************************		INFORMAZIONI GENERALI		*******************************************************/
4        	/************** Argomenti delle stored per il controllo della transazione:											*******/
5        	/************** FlgRollBckFullIn -> se 1 in caso di errore viene fatta la rollback completa (non a savepoint), 					*******/
6        	/************** 				altrimenti la rollback delle sole modifiche effettuate nella stored						*******/
7        	/************** 				ATTENZIONE: la rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log			*******/
8        	/************** FlgAutoCommitIn  -> se vale 1, dopo la rollback e qualunque sia l'esito (positivo o no), la stored esegue una commit finale *****/
9        	/************** Tutte le funzioni/procedure che NON hanno gli argomenti in input FlgRollBckFullIn e FlgAutoCommitIn 				*******/
10        	/************** NON ESEGUONO AL LORO INTERNO ALCUNA COMMIT nè ROLLBACK 												*******/
11        
12        	/************** Tutte le funzioni, tranne quelle da utilizzarsi nelle select, restituiscono 1 in caso di successo, altrimenti 0		*******/
13        	/************** Tali funzioni restituiscono, in caso di result 0, un n.ro, un contesto e un messaggio di errore:					*******/
14        	/************** il n.ro è: <0 se errore ORACLE non specificamente gestito 											*******/
15        	/**************		   da 1->1000 errore "grave" (SEVERE_ERROR) gestito											*******/
16        	/**************		   >1000 errore non grave gestito														*******/
17        	/************** il contesto indica il package e/o funzione/procedura in cui si è verificato l'errore							*******/
18        
19        	procedure SetSavepoint(NomeSavepointIn IN VARCHAR2);
20        
21        	procedure RollbackToSavepoint(NomeSavepointIn IN VARCHAR2);
22        
23            	function GetConnSchema(SchemaOut OUT VARCHAR2) return PLS_INTEGER;  -- funzione per ricavare lo schema DB a cui si è connessi; restituisce 1 se tutto OK, altrimenti 0
24        
25        	/******* serve a convertire in DATE il valore di un tag XML di tipo xs:DateTime  ******/
26        	function To_Date_DateTimeXMLTag (TagValueIn 	IN 	VARCHAR2       -- valore del tag XML di tipo xs:DateTime
27        		)return DATE;								   -- in caso di errore è NULL
28        
29        	/***** serve a convertire un DATE in stringa formattata come serve per essere messo in un tag XML di tipo xs:DateTime  ******/
30        	function To_DateTimeXMLTag(DataIn			IN	DATE		-- Data da mettere in un tag XML di tipo xs:DateTime
31        		) return VARCHAR2;							-- Data formattata in modo da poter essere messa in un tag XML di tipo xs:DateTime
32        
33        	/******* serve a convertire in DATE il valore di un tag XML di tipo xs:Date  ******/
34        	function To_Date_DateXMLTag (TagValueIn 	IN 	VARCHAR2      	 --	valore del tag XML di tipo xs:Date
35        		) return DATE;								 --	in caso di errore è NULL
36        
37        	/***** serve a convertire un DATE in stringa formattata come serve per essere messo in un tag XML di tipo xs:Date  ******/
38        	function To_DateXMLTag(DataIn			IN	DATE			-- Data da mettere in un tag XML di tipo xs:Date
39        		) return VARCHAR2;							-- Data formattata in modo da poter essere messa in un tag XML di tipo xs:Date
40        
41        	/***** serve a convertire una stringa con una data dal formato DD/MM/RRRR al formato del parametro di config. FMT_STD_DATA	******/
42        	function ConvertToFmtStdData(
43        			CodIdConnectionTokenIn	IN	DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,	-- (obblig). Codice identificativo del token di connessione
44        			StrDataIO			IN	OUT VARCHAR2						-- In input è la data come stringa nel formato DD/MM/RRRR
45        																-- in output è la data nel formato del parametro di config. FMT_STD_DATA
46        		) return PLS_INTEGER;											-- restituisce 1 in caso di conversione avvenuta con successo, 0 in caso di errore
47        
48        	/***** serve a convertire una stringa con una data dal formato DD/MM/RRRR HH24:MI:SS al formato del parametro di config. FMT_STD_TIMESTAMP	******/
49        	function ConvertToFmtStdTimestamp(
50        			CodIdConnectionTokenIn	IN	DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,	-- (obblig). Codice identificativo del token di connessione
51        			StrTimestampIO			IN	OUT VARCHAR2					-- In input è il timestamp come stringa nel formato DD/MM/RRRR HH24:MI:SS
52        																-- in output è il timestamp nel formato del parametro di config. FMT_STD_TIMESTAMP
53        		) return PLS_INTEGER;											-- restituisce 1 in caso di conversione avvenuta con successo, 0 in caso di errore
54        
55        	/********* serve a creare un elemento XML semplice ************/
56        	function CreaXMLElement(
57        			TagNameIn			IN		VARCHAR2,						--(obblig) Nome dell'element da creare
58        			TagValueIn			IN		VARCHAR2						-- Valore del elemento
59        		) return CLOB;
60        
61        	/******* Funzione per testare se in una certa condizione di esecuzione di una data stored procedure/function è attivo l'auditing (tracciatura nella tabella di log) *******/
62        	function TestAuditActiveOnStored(
63        			PackageNameIn		IN		VARCHAR2 DEFAULT NULL,				-- Nome dell'eventuale package cui appartiene la stored function / procedure (case-insensitive)
64        			ProcFuncNameIn		IN		VARCHAR2,						-- (obblig.) Nome della function / procedure (case-insensitive)
65        			AuditingCondIn		IN		VARCHAR2)						-- (obblig.) Indica per quale condizione di esecuzione della stored si deve tracciare se l'auditing è attivo. Valori possibili:
66        																-- SUCCESS = In caso di esito positivo;
67        																-- ERROR = In caso di errore di qualsiasi gravità;
68        																-- SEVERE_ERROR = In caso di errore "grave" (vale a dire un errore gestito con codice <1000 o errore non gestito)
69        			return PLS_INTEGER;										-- Restituisce 1 se l'auditing è attivo, altrimenti 0
70        
71        	/***** Funzione per controllare la validità del token di connessione e dell'utente associato	****/
72        	/***** ricavando, in caso di controllo positivo, utente e dominio di autenticazione 		****/
73        	function CtrlConnectionToken (
74        			CodIdConnectionTokenIn	IN	DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,	-- (obblig). Codice identificativo del token di connessione
75        			IdUserOut			OUT	DMT_USERS.ID_USER%type,					-- Identificativo dell'utente che ha ottenuto il token
76        			FlgTpDominioAutOut	OUT	PLS_INTEGER,						-- Indica il tipo di dominio in cui l'utente si è autenticato/sta lavorando: 1 = Schema DB; 2 = Soggetto produttore; 3 = AOO
77        			IdDominioAutOut		OUT	DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,		-- Identificativo del dominio di autenticazione, vale a dire l'id. del soggetto produttore o AOO se FlgTpDominioAutOut vale 2 o 3
78        			CodApplEsternaOut		OUT	DMT_CONNECTION_TOKEN.COD_APPLICAZIONE%type,	-- Codice applicazione esterna da cui è stata richiesta la connessione
79        			CodIstanzaApplEstOut	OUT	DMT_CONNECTION_TOKEN.COD_ID_ISTANZA_APPL%type, 	-- Codice istanza dell'applicazione esterna in cui è accreditato l'utente da cui è stata richiesta la connessione
80        			ErrContextOut		OUT	VARCHAR2,							-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
81        			ErrCodeOut			OUT	PLS_INTEGER,						-- N.ro errore di uscita
82        			ErrMsgOut			OUT 	VARCHAR2)							-- Messaggio d'errore
83        			return PLS_INTEGER;										-- vale 1 in caso di successo, altrimenti 0
84        
85        	/******* funzione, utilizzabile in una query, per ottenere il dominio cui si è connessi a partire del token di connessione ******/
86        	function GetIdDominioFromConnToken(
87        			CodIdConnectionTokenIn	IN	DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type)	-- (obblig). Codice identificativo del token di connessione
88        			return DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type;						-- Id. del dominio a cui si è connessi
89        
90        	/***** Funzione per registrare un nuovo utilizzo di un token di connessione 			******/
91        	/***** va chiamata ogni volta che si prende o si rilascia una connessione dal pool		******/
92        	function RegConnTokenUsage (
93        			CodIdConnectionTokenIn	IN	DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,	-- (obblig). Codice identificativo del token di connessione
94        			FlagStartEndIn		IN	PLS_INTEGER DEFAULT 1,					-- (obblig. valori 1/0) 1=Inizio dell'uso; 0 = Fine dell'uso
95        			FlgRollBckFullIn		IN 	PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
96        																-- ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
97        			FlgAutoCommitIn		IN 	PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
98        			ErrContextOut		OUT	VARCHAR2,							-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
99        			ErrCodeOut			OUT	PLS_INTEGER,						-- N.ro errore di uscita
100        			ErrMsgOut			OUT 	VARCHAR2)							-- Messaggio d'errore
101        			RETURN PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine, altrimenti 0
102        
103        
104        	/***** Funzione per ricavare dal token di connessione l'identificativo dell'utente che ha ottenuto il token *****/
105        	function GetIdUserAut (
106        			CodIdConnectionTokenIn	IN	DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,	-- (obblig). Codice identificativo del token di connessione
107        			IdUserOut			OUT	DMT_USERS.ID_USER%type,					-- Identificativo dell'utente che ha ottenuto il token
108        			ErrContextOut		OUT	VARCHAR2,							-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
109        			ErrCodeOut			OUT	PLS_INTEGER,						-- N.ro errore di uscita
110        			ErrMsgOut			OUT 	VARCHAR2)							-- Messaggio d'errore
111        			return PLS_INTEGER;										-- vale 1 in caso di successo, altrimenti 0
112        
113        	/***** Funzione per ricavare il soggetto produttore di appartenenza di un'AOO	****/
114        	function GetSoggProdDiAppAOO (
115        			IdAOOIn				IN	DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type)	-- (obblig.) Identificativo dell'AOO
116        			return INTEGER;											-- Id. del soggetto produttore di appartenenza (NULL solo in caso di errore)
117        
118        	/***** Funzione per decodificare (ottenere la descrizione) di un soggetto produttore o AOO a partire dal suo id. *****/
119        	function DecodeSoggProdAOO (
120        			IdSpAOOIn			IN	DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type)		-- (obblig.) Identificativo del soggetto produttore o AOO
121        			return VARCHAR2;											-- Descrizione del soggetto produttore/AOO (NULL solo in caso di errore)
122        
123        	/***** Funzione per testare se una data applicazione esterna o sua istanza è "privilegiata", ovvero se documenti e folder da lei creati non sono modificabili da GUI salvo se si è connessi da quell'applicazione/istanza ******/
124        	function TestIfApplEstPrivilegiata(
125        			CodApplicazioneIn			IN		DMT_APPLICAZIONI_ESTERNE.CI_APPLICAZIONE%TYPE ,
126        																-- (obblig.) Codice identificativo dell'applicazione
127        			CodIstanzaApplicazioneIn	IN		DMT_APPLICAZIONI_ESTERNE.CI_ISTANZA_APPLICAZIONE%TYPE DEFAULT NULL
128        																-- Codice identificativo dell'istanza di applicazione
129        			) return PLS_INTEGER;										-- 1 = è un'applicazione/istanza di applicazione privilegiata
130        																-- 0 = non è un'applicazione/istanza di applicazione privilegiata o errore
131        
132        	/***** Funzione per ricavare un parametro di configurazione del sistema	che deve avere valore alfanumerico 	*****/
133        	function GetValConfigParamText(
134        			CodIdConnectionTokenIn	IN	DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,	-- (obblig). Codice identificativo del token di connessione di chi richiede il parametro
135        			NomeParametroIn		IN 	DMT_DEF_CONFIG_PARAM.PAR_NAME%type)			-- (obblig.) Nome del parametro (ricerca case-insensitive)
136        			return VARCHAR2;											--  Valore del parametro
137        	function GetValConfigParamText(
138        			FlgTpDominioAutIn		IN	PLS_INTEGER,						-- (obblig). Indica il tipo di dominio di lavoro: 1 = Schema DB; 2 = Soggetto produttore; 3 = AOO
139        			IdDominioAutIn		IN	DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type DEFAULT NULL,
140        																-- (obblig. se FlgTpDominioAutIn vale 2 o 3) Identificativo del dominio di lavoro, vale a dire l'id. del soggetto produttore o AOO se FlgTpDominioAutOut vale 2 o 3
141        			NomeParametroIn		IN 	DMT_DEF_CONFIG_PARAM.PAR_NAME%type)			-- (obblig.) Nome del parametro (ricerca case-insensitive)
142        			return VARCHAR2;											--  Valore del parametro
143        
144        	/***** Funzione per ricavare un parametro di configurazione del sistema	che deve avere valore numerico 	*****/
145        	function GetValConfigParamNumber(
146        			CodIdConnectionTokenIn	IN	DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,	-- (obblig). Codice identificativo del token di connessione di chi richiede il parametro
147        			NomeParametroIn		IN 	DMT_DEF_CONFIG_PARAM.PAR_NAME%type)			-- (obblig.) Nome del parametro (ricerca case-insensitive)
148        			return NUMBER;											--  Valore del parametro
149        	function GetValConfigParamNumber(
150        			FlgTpDominioAutIn		IN	PLS_INTEGER,						-- (obblig.) Indica il tipo di dominio di lavoro: 1 = Schema DB; 2 = Soggetto produttore; 3 = AOO
151        			IdDominioAutIn		IN	DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type DEFAULT NULL,
152        																-- (obblig. se FlgTpDominioAutIn vale 2 o 3) Identificativo del dominio di lavoro, vale a dire l'id. del soggetto produttore o AOO se FlgTpDominioAutOut vale 2 o 3
153        			NomeParametroIn		IN 	DMT_DEF_CONFIG_PARAM.PAR_NAME%type)			-- (obblig.) Nome del parametro (ricerca case-insensitive)
154        			return NUMBER;											--  Valore del parametro
155        
156        	/***** Funzione per ricavare un parametro di configurazione del sistema	che deve avere valore di tipo data 		*****/
157        	/***** sono parametri che se presenti in tabella DMT_CONFIG_PARAM devono esservi inseriti in formato GG/MM/AAAA 	*****/
158        	function GetValConfigParamDate(
159        			CodIdConnectionTokenIn	IN	DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,	-- (obblig). Codice identificativo del token di connessione di chi richiede il parametro
160        			NomeParametroIn		IN 	DMT_DEF_CONFIG_PARAM.PAR_NAME%type)			-- (obblig.) Nome del parametro (ricerca case-insensitive)
161        			return DATE;											--  Valore del parametro
162        	function GetValConfigParamDate(
163        			FlgTpDominioAutIn		IN	PLS_INTEGER,						-- (obblig.) Indica il tipo di dominio di lavoro: 1 = Schema DB; 2 = Soggetto produttore; 3 = AOO
164        			IdDominioAutIn		IN	DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type DEFAULT NULL,
165        																-- (obblig. se FlgTpDominioAutIn vale 2 o 3) Identificativo del dominio di lavoro, vale a dire l'id. del soggetto produttore o AOO se FlgTpDominioAutOut vale 2 o 3
166        			NomeParametroIn		IN 	DMT_DEF_CONFIG_PARAM.PAR_NAME%type)			-- (obblig.) Nome del parametro (ricerca case-insensitive)
167        			return DATE;											--  Valore del parametro
168        
169        	/**** Funzione per calcolare la dimensione (n.ro di righe) della pagina per un certo utente di lavoro in un certo dominio di lavoro ****/
170        	function CalcolaDimPagina(
171        			FlgTpDominioAutIn		IN		PLS_INTEGER ,					-- (obblig.) Indica il tipo di dominio di lavoro: 1 = Schema DB; 2 = Soggetto produttore; 3 = AOO
172        			IdDominioAutIn		IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type DEFAULT NULL,
173        																-- (obblig. se FlgTpDominioAutIn vale 2 o 3) Identificativo del dominio di lavoro, vale a dire l'id. del soggetto produttore o AOO se FlgTpDominioAutOut vale 2 o 3
174        			IdUserLavoroIn		IN		DMT_USERS.ID_USER%type,				-- (obblig.) Identificativo dell'utente di lavoro
175        			DimPaginaOut		OUT		PLS_INTEGER,					-- Dimensione della pagina calcolata
176        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
177        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
178        			ErrMsgOut			OUT 		VARCHAR2)						-- Messaggio d'errore
179        			return PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine, altrimenti 0
180        
181        	/***** Funzione per controllare se un certo numero è corretto come anno di una registrazione *****/
182        	function CtrlAnnoReg(
183        			NumeroIn 			IN 		PLS_INTEGER)					--N.ro da verificare se corretto come anno di una registrazione
184        			return PLS_INTEGER;										--Restituisce NULL se l'argomento in input non è un anno di regisrazione corretto,
185        																--altrimenti restituisce l'anno espresso a 4 cifre
186        	/***** Funzione per comporre la CONTAINS da utilizzare in una query dinamica con filtro su una colonna con indice CONTEXT ****/
187        	function ComponiCONTAINS(
188        			IdDominioAutIn		IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,
189        																-- Identificativo del soggetto produttore o AOO in cui ci si è autenticati (se NULL significa che ci si è autenticati come utenti di schema)
190        			SelColNameIn		IN		VARCHAR2,						-- (obblig.) Nome della selected column della query (eventualmente preceduta da alias della tabella: TAB_ALIAS.COLUMN_NAME) cui applicare la CONTAINS (deve essere una colonna con indice CONTEXT)
191        			SelColFilterIn		IN		VARCHAR2,					-- (obblig.) Valore del filtro sulla colonna con indice context (parola o lista di parole per cui ricercare)
192        			DesSelColumnIn		IN 		VARCHAR2 DEFAULT NULL)			-- Descrizione della selected column (da usare per eventuali messaggi di errore all'utente)
193        			return VARCHAR2;											-- stringa con la contains sulla colonna: CONTAINS(....)
194        
195        	/***** Funzione per generare i progressivi x i vari tipi di numerazioni (numerazione interna unità doc., ) *****/
196        	function GeneraProgressivo(
197        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- (obblig.) Id. del soggetto produttore o AOO sui cui archivi si sta lavorando
198        			IdUserLavoroIn		IN 		DMT_USERS.ID_USER%type,					-- Id. dell'utente di lavoro che richiede la generazione
199        			CodScopeIn			IN		DMT_GEN_PROGR.COD_SCOPE%type,			-- (obblig.) Codice dello scope (=tipo di numerazione) per cui generare il progressivo
200        																-- i valori ammessi sono:
201        																-- NUM_INTERNA_UD = Numerazione interna unità documentarie
202        																-- PROTOCOLLO_GEN = Numerazione di protocollo generale
203        																-- REPERTORIO = Numerazione di repertorio
204        																-- PROTOCOLLO_PARTIC = Numerazione di protocollo particolare
205        																-- EMAIL = Numerazione delle e-mail
206        																-- NUM_PDV = Numerazione progressiva dei PdV (Pacchetti di Versamento)
207        			CondValueIn			IN		DMT_GEN_PROGR.COND_VALUE%type DEFAULT NULL,
208        																-- Valore che diversifica la generazione del progressivo (ad esempio il codice tipo repertorio nel caso di numerazione di repertorio)
209        			AnnoIn			IN		DMT_GEN_PROGR.ANNO%type DEFAULT NULL,
210        																-- Anno per cui generare il progressivo: va valorizzato x i tipi di numerazioni che sono annuali, e per questi, se non specificato, si assume essere pari all'anno corrente
211        																-- Può avere da 1 -> 4 cifre.
212        			ProgrGeneratoOut		OUT		DMT_GEN_PROGR.PROGR%type,			-- Progressivo generato (in caso di errore non viene valorizzato)
213        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
214        																-- ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
215        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
216        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
217        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
218        			ErrMsgOut			OUT 		VARCHAR2)						-- Messaggio d'errore
219        			return PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine e il progressivo è generato, altrimenti 0
220        
221        	----overload della precedente: ha in input il CONN_TOKEN anzichè IdSpAOOIn e IdUserLavoroIn
222        	function GeneraProgressivo(
223        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,
224        																-- (obblig). Codice identificativo del token di connessione di chi richiede il parametro
225        			CodScopeIn			IN		DMT_GEN_PROGR.COD_SCOPE%type,			-- (obblig.) Codice dello scope (=tipo di numerazione) per cui generare il progressivo
226        																-- i valori ammessi sono:
227        																-- NUM_INTERNA_UD = Numerazione interna unità documentarie
228        																-- PROTOCOLLO_GEN = Numerazione di protocollo generale
229        																-- REPERTORIO = Numerazione di repertorio
230        																-- PROTOCOLLO_PARTIC = Numerazione di protocollo particolare
231        																-- PROCESSO = Numerazione di processo/procedimento/prtaica
232        																-- EMAIL = Numerazione delle e-mail
233        																-- NUM_PDV = Numerazione progressiva dei PdV (Pacchetti di Versamento)
234        			CondValueIn			IN		DMT_GEN_PROGR.COND_VALUE%type DEFAULT NULL,
235        																-- Valore che diversifica la generazione del progressivo (ad esempio il codice tipo repertorio nel caso di numerazione di repertorio)
236        			AnnoIn			IN		DMT_GEN_PROGR.ANNO%type DEFAULT NULL,
237        																-- Anno per cui generare il progressivo: va valorizzato x i tipi di numerazioni che sono annuali, e per questi, se non specificato, si assume essere pari all'anno corrente
238        																-- Può avere da 1 -> 4 cifre.
239        			ProgrGeneratoOut		OUT		DMT_GEN_PROGR.PROGR%type,			-- Progressivo generato (in caso di errore non viene valorizzato)
240        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
241        																-- ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
242        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
243        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
244        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
245        			ErrMsgOut			OUT 		VARCHAR2)						-- Messaggio d'errore
246        			return PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine e il progressivo è generato, altrimenti 0
247        
248        	/********* funzione per ottenere il progressivo di trasmissione di fatturaPA a SdI 							*********/
249        	/********* al momento il progressivo non è differenziato per applicazione nè per soggetto produttore		*********/
250        	/********* ATTENZIONE: se non viene fatta la commit la generazione del progressivo resta bloccata			*********/
251        	function GeneraIdTrasmSdI(
252        			CodApplEsternaIn	IN		VARCHAR2,								-- (facoltativo) Codice applicazione esterna per cui generare il progressivo
253        			CodIstanzaApplEstIn	IN		VARCHAR2 DEFAULT NULL,					-- (solo se applicazione esterna multi-istanza) Codice istanza dell'applicazione esterna per cui generare il progressivo
254        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- (facoltativo) Id. del soggetto produttore o AOO per cui generare il progressivo
255        			IdTrasmSdIOut		OUT		VARCHAR2,								-- Id. di trasmissione a SdI generato (in caso di errore non viene valorizzato)
256        			FlgRollBckFullIn	IN 		PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
257        																				-- ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
258        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
259        			ErrContextOut		OUT		VARCHAR2,								-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
260        			ErrCodeOut			OUT		PLS_INTEGER,							-- N.ro errore di uscita
261        			ErrMsgOut			OUT 		VARCHAR2)							-- Messaggio d'errore
262        			return PLS_INTEGER;													-- Vale 1 se tutto è andato a buon fine e il progressivo è generato, altrimenti 0
263        
264        	/****** Funzione che separa in un varray i campi impacchettati in una stringa e lì separati da un qualsiasi separatore *******/
265        	function SplitStringInVarray(
266        			StringToSplitIn		IN		VARCHAR2,						-- (obblig.) Stringa in cui si trovano i campi da separare
267        			SeparatoreIn		IN		VARCHAR2 DEFAULT '|*|',				-- (obblig.) Separatore utilizzato nella stringa.
268        			SepDopoUltimoElemIn	IN		PLS_INTEGER DEFAULT 1				-- (valori 1/0/NULL) Se pari a 1 significa che dopo l'ultimo campo c'è il separatore, altrimenti no
269        																-- Se 1 un eventuale campo non seguito da separatore viene caricato comunque nel varray purchè diverso da NULL
270        																-- Se 0 o NULL ciò che segue un separatore (e quindi anche l'ultimo) è caricato come campo del varray anche se NULL
271        			) return DMVA_STRING;										-- Varray con i campi separati. In caso di errore è NULL
272        
273        	/****** Funzione che mette in un varray i valori (già convertiti) dei tag "Colonna" di un frammento di XML fatto come un elemento "Riga" dello schema LISTA_STD.xsd 	*******/
274        	/****** Nel varray i valori sono ordinati in base all'attributo Nro del tag Colonna da cui derivano.												*******/
275        	function SplitRigaXMLStdInVarray(
276        			RigaXMLStdIn		IN		CLOB							-- (obblig.) Frammento XML (fatto come un elemento "Riga" dello schema LISTA_STD.xsd) in cui si trovano i valori da mettere nel varray
277        			) return DMVA_STRING;										-- Varray con i valori. In caso di errore è vuoto (anche se inizializzato)
278        
279        	------------ Overload della precedente ------------
280        	function SplitRigaXMLStdInVarray(
281        			RigaXMLStdIn		IN		VARCHAR2						-- (obblig.) Frammento XML (fatto come un elemento "Riga" dello schema LISTA_STD.xsd) in cui si trovano i valori da mettere nel varray
282        			) return DMVA_STRING;										-- Varray con i valori. In caso di errore è vuoto (anche se inizializzato)
283        
284        	------------ Overload delle 2 precedenti ------------
285        	function SplitRigaXMLStdInVarray(
286        			RigaXMLStdIn		IN		CLOB,							-- (obblig.) Frammento XML (fatto come un elemento "Riga" dello schema LISTA_STD.xsd) in cui si trovano i valori da mettere nel varray
287        			NroElemVarrayIn		IN		PLS_INTEGER DEFAULT NULL,			-- N.ro di elementi del varray in cui splittare.
288        			FlgPresenzaOut		OUT		DMTO_ID						-- Table di flag 1/0 quanti gli elementi del varray restituito: l'i-esimo flag indica se la colonna i-esima era presente o meno nell'XML
289        			) return DMVA_STRING;										-- Varray con i valori. In caso di errore è vuoto (anche se inizializzato)
290        
291        	------------ come la precedente ma restituisce un varray di clob------------
292        	function SplitRigaXMLStdInClobVarray(
293        			RigaXMLStdIn		IN		CLOB,							-- (obblig.) Frammento XML (fatto come un elemento "Riga" dello schema LISTA_STD.xsd) in cui si trovano i valori da mettere nel varray
294        			NroElemVarrayIn		IN		PLS_INTEGER DEFAULT NULL,		-- N.ro di elementi del varray in cui splittare.
295        			FlgPresenzaOut		OUT		DMTO_ID							-- Table di flag 1/0 quanti gli elementi del varray restituito: l'i-esimo flag indica se la colonna i-esima era presente o meno nell'XML
296        			) return DMVA_CLOB;											-- Varray con i valori. In caso di errore è vuoto (anche se inizializzato)
297        
298        	/****** Funzione per impacchettare in un frammento di XML fatto come un elemento "Riga" dello schema LISTA_STD.xsd 	*******/
299        	/****** una lista di valori da fornire nel varray di input ValoriColonneIn (senza escaping)					*******/
300        	/****** Permette anche di ottenere un XML di output in cui i tag "Riga" e "Colonna" sono rinominati come si desidera	*******/
301        	function PreparaRigaXMLStd(
302        			ValoriColonneIn		IN		DMVA_STRING,					-- (obblig.) Valori da mettere nei tag "Colonna" della "Riga" (la loro posizione nel varray verrà usata come attributo "Nro" del tag "Colonna")
303        			RigaTagNameIn		IN		VARCHAR2 DEFAULT NULL,				-- (opzionale) Come rinominare il tag Riga
304        			ColTagNameIn		IN		DMVA_STRING DEFAULT NULL,			-- (opzionale) Come rinominare i tag delle colonne in alternativa a Colonna Nro=..
305        			ForzaTagColVuoteIn	IN		BOOLEAN DEFAULT FALSE				-- Se FALSE i tag delle colonne vuote, salvo l'ultima, non vengono messi affato, se TRUE vengono messi i tag di tutte le colonne, anche quelle vuote
306        			) return VARCHAR2;										-- Tag XML (fatto come un elemento "Riga" dello schema LISTA_STD.xsd se ColTagNameIn e RigaTagNameIn non sono stati specificati) in cui sono stati impacchettati i valori del varray
307        																-- E' NULL solo in caso di errore
308        
309        	---------------analoga alla precedente solo che il tag Riga viene restituito in un clob anzichè in un VARCHAR2; da usare dove la Riga supera i 32.000 caratteri
310        	function PreparaRigaXMLStd_Clob(
311        			ValoriColonneIn		IN		DMVA_STRING,						-- (obblig.) Valori da mettere nei tag "Colonna" della "Riga" (la loro posizione nel varray verrà usata come attributo "Nro" del tag "Colonna")
312        			RigaTagNameIn		IN		VARCHAR2 DEFAULT NULL,				-- (opzionale) Come rinominare il tag Riga
313        			ColTagNameIn		IN		DMVA_STRING DEFAULT NULL,			-- (opzionale) Come rinominare i tag delle colonne in alternativa a Colonna Nro=..
314        			ForzaTagColVuoteIn	IN		BOOLEAN DEFAULT FALSE				-- Se FALSE i tag delle colonne vuote, salvo l'ultima, non vengono messi affato, se TRUE vengono messi i tag di tutte le colonne, anche quelle vuote
315        			) return CLOB;													-- Tag XML (fatto come un elemento "Riga" dello schema LISTA_STD.xsd se ColTagNameIn e RigaTagNameIn non sono stati specificati) in cui sono stati impacchettati i valori del varray
316        																			-- E' NULL solo in caso di errore
317        
318        	---------------overload della funzione precedente solo che ValoriColonneIn è un array di CLOB
319        	function PreparaRigaXMLStd_Clob(
320        			ValoriColonneIn		IN		DMVA_CLOB,							-- (obblig.) Valori da mettere nei tag "Colonna" della "Riga" (la loro posizione nel varray verrà usata come attributo "Nro" del tag "Colonna")
321        			RigaTagNameIn		IN		VARCHAR2 DEFAULT NULL,				-- (opzionale) Come rinominare il tag Riga
322        			ColTagNameIn		IN		DMVA_STRING DEFAULT NULL,			-- (opzionale) Come rinominare i tag delle colonne in alternativa a Colonna Nro=..
323        			ForzaTagColVuoteIn	IN		BOOLEAN DEFAULT FALSE				-- Se FALSE i tag delle colonne vuote, salvo l'ultima, non vengono messi affato, se TRUE vengono messi i tag di tutte le colonne, anche quelle vuote
324        			) return CLOB;													-- Tag XML (fatto come un elemento "Riga" dello schema LISTA_STD.xsd se ColTagNameIn e RigaTagNameIn non sono stati specificati) in cui sono stati impacchettati i valori del varray
325        																			-- E' NULL solo in caso di errore
326        
327        	/***** Funzione per convertire un frammento di XML fatto come un elemento "Riga" dello schema LISTA_STD.xsd 			*******/
328        	/***** in una riga dello stesso tipo in cui le cui colonne sono una rimappatura di quelle dell'XML originario		*******/
329        	function RimappaColRigaXMLStd(
330        			RigaXMLStdIO		IN OUT	CLOB,							-- Riga XML da convertire
331        			IndiciColIn			IN		DMTO_ID,						-- Ha tanti elementi quanti le colonne del nuovo XML.
332        																-- L'elemento i-esimo è il n.ro della colonna del vecchio XML da cui prendere il valore per la colonna i-esima del nuovo XML
333        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
334        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
335        			ErrMsgOut			OUT 		VARCHAR2)						-- Messaggio d'errore
336        			return PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine, altrimenti 0
337        
338        	/***** Funzione per covertire una lista (CLOB) passata come XML conforme allo schema LISTA_STD.xsd 				*******/
339        	/***** in una lista dello stesso tipo in cui le cui colonne sono una rimappatura di quelle dell'XML originario		*******/
340        	function RimappaColListaXMLStd(
341        			ListaXMLStdIO		IN OUT	CLOB,							-- Lista XML da convertire
342        			IndiciColIn			IN		DMTO_ID,						-- Ha tanti elementi quanti le colonne del nuovo XML.
343        																-- L'elemento i-esimo è il n.ro della colonna del vecchio XML da cui prendere il valore per la colonna i-esima del nuovo XML
344        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
345        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
346        			ErrMsgOut			OUT 		VARCHAR2)						-- Messaggio d'errore
347        			return PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine, altrimenti 0
348        
349        	/**** Funzione per controllare se un determinato valore è valido per una colonna di tabella che accetta valori relativi ad una voce di dizionario	****/
350        	/**** Il controllo può essere fatto per una specifica riga della tabella (identificata attraverso il suo ROWID)							****/
351        	/**** Sfrutta le relazioni tra voci di dizionario e colonne delle tabelle definite in DMT_REL_COD_DIZ									****/
352        	function TestDictValueForTabCol(
353        			FlgTpDominioAutIn		IN		PLS_INTEGER DEFAULT NULL,			-- (obblig. se il dizionario è diversificato per soggetto produttore o AOO) Indica il tipo di dominio di lavoro: 1 = Schema DB; 2 = Soggetto produttore; 3 = AOO
354        			IdDominioAutIn		IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type DEFAULT NULL,
355        																-- (obblig. se FlgTpDominioAutIn vale 2 o 3) Identificativo del dominio di lavoro, vale a dire l'id. del soggetto produttore o AOO se FlgTpDominioAutOut vale 2 o 3
356        			TargetTableNameIn		IN 		VARCHAR2, 						-- (obblig.) Nome della tabella cui appartiene la colonna
357        			TargetColNameIn		IN 		VARCHAR2, 						-- (obblig.) Nome della colonna della tabella TargetTableNameIn per cui controllare se il valore è valido
358        			RowIdIn			IN 		VARCHAR2 DEFAULT NULL, 				-- Rowid della riga della tabella (TargetTableNameIn o sua nested) per cui effettuare il controllo
359        																-- Se non valorizzato si intende che il valore è per una nuova riga
360        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'),
361        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) per cui si richiede che il valore sia valido. Se NULL si intende che la validità del valore non è da controllare
362        			ValueIn			IN 		VARCHAR2, 						-- (obblig.) Valore da controllare
363        			ValueGenVincoloIn		IN		VARCHAR2 default NULL		-- Valore (decodificato) di un campo più generale (sempre basato su dictionary_entry) al quale il valore da controllare è vincolato
364        			) RETURN PLS_INTEGER;										-- Valori: 1=Test positivo; 0=Test negativo
365        
366        
367        	/**** Funzione per controllare se un determinato valore o codice di valore è valido per una data voce di dizionario	****/
368        	function TestDictValueForDictEntry(
369        			FlgTpDominioAutIn		IN		PLS_INTEGER DEFAULT NULL,			-- (obblig. se il dizionario è diversificato per soggetto produttore o AOO) Indica il tipo di dominio di lavoro: 1 = Schema DB; 2 = Soggetto produttore; 3 = AOO
370        			IdDominioAutIn		IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type DEFAULT NULL,
371        																-- (obblig. se FlgTpDominioAutIn vale 2 o 3) Identificativo del dominio di lavoro, vale a dire l'id. del soggetto produttore o AOO se FlgTpDominioAutOut vale 2 o 3
372        			DictionaryEntryIn		IN		DMT_DICTIONARY_ENTRIES.DICTIONARY_ENTRY%type,
373        																-- (obblig.) Voce di dizionario per cui testare se il valore è valido
374        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'),
375        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) per cui si richiede che il valore sia valido. Se NULL si intende che la validità del valore non è da controllare
376        			FlgTestForCodIn		IN		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) se 1 indica che il test è su un COD_VALUE, ovvero l'argomento ValueIn da controllare è il codice del valore; altrimenti il test è sul VALUE, ovvero ValueIn è il valore decodificato
377        			ValueIn			IN 		VARCHAR2, 						-- (obblig.) Valore da controllare
378        			ValueGenVincoloIn		IN		VARCHAR2 DEFAULT NULL						-- Valore (decodificato) di un campo più generale (sempre basato su dictionary_entry) al quale il valore da controllare è vincolato
379        			) RETURN PLS_INTEGER;										-- Valori: 1=Test positivo; 0=Test negativo
380        
381        	/**** Funzione per la decodifica del valore di una colonna di tabella che accetta valori (codificati) relativi ad una voce di dizionario	****/
382        	/**** Sfrutta le relazioni tra voci di dizionario e colonne delle tabelle definite in DMT_REL_COD_DIZ							****/
383        	function DecodeTabColValueFromDict(
384        			FlgTpDominioAutIn		IN		PLS_INTEGER DEFAULT NULL,			-- (obblig. se il dizionario è diversificato per soggetto produttore o AOO) Indica il tipo di dominio di lavoro: 1 = Schema DB; 2 = Soggetto produttore; 3 = AOO
385        			IdDominioAutIn		IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type DEFAULT NULL,
386        																-- (obblig. se FlgTpDominioAutIn vale 2 o 3) Identificativo del dominio di lavoro, vale a dire l'id. del soggetto produttore o AOO se FlgTpDominioAutOut vale 2 o 3
387        			TargetTableNameIn		IN 		VARCHAR2, 						-- (obblig.) Nome della tabella
388        			TargetColNameIn		IN 		VARCHAR2, 						-- (obblig.) Nome della colonna della tabella TargetTableNameIn
389        			CodiceIn			IN 		DMT_DIZIONARIO.COD_VALUE%type 		-- (obblig.) Codice da decodificare
390        			)return VARCHAR2;											-- Decodifica (NULL in caso di errore)
391        
392        	/**** Funzione per la decodifica di un codice valore relativo ad una voce di dizionario	****/
393        	function DecodeCodValueForDictEntry(
394        			FlgTpDominioAutIn		IN		PLS_INTEGER DEFAULT NULL,			-- (obblig. se il dizionario è diversificato per soggetto produttore o AOO) Indica il tipo di dominio di lavoro: 1 = Schema DB; 2 = Soggetto produttore; 3 = AOO
395        			IdDominioAutIn		IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type DEFAULT NULL,
396        																-- (obblig. se FlgTpDominioAutIn vale 2 o 3) Identificativo del dominio di lavoro, vale a dire l'id. del soggetto produttore o AOO se FlgTpDominioAutOut vale 2 o 3
397        			DictionaryEntryIn		IN		DMT_DICTIONARY_ENTRIES.DICTIONARY_ENTRY%type,
398        																-- (obblig.) Voce di dizionario cui è relativo il codice da decodificare
399        			CodiceIn			IN 		DMT_DIZIONARIO.COD_VALUE%type 		-- (obblig.) Codice da decodificare
400        			)return VARCHAR2;											-- Decodifica (NULL in caso di errore)
401        
402        	/**** Funzione per ottenere la codifica corrispondente ad un dato valore assegnabile (la codifica) ad una colonna di tabella che accetta valori relativi ad una voce di dizionario	****/
403        	/**** Sfrutta le relazioni tra voci di dizionario e colonne delle tabelle definite in DMT_REL_COD_DIZ														****/
404        	function GetCodeForTabColValueFromDict(
405        			FlgTpDominioAutIn		IN		PLS_INTEGER DEFAULT NULL,			-- (obblig. se il dizionario è diversificato per soggetto produttore o AOO) Indica il tipo di dominio di lavoro: 1 = Schema DB; 2 = Soggetto produttore; 3 = AOO
406        			IdDominioAutIn		IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type DEFAULT NULL,
407        																-- (obblig. se FlgTpDominioAutIn vale 2 o 3) Identificativo del dominio di lavoro, vale a dire l'id. del soggetto produttore o AOO se FlgTpDominioAutOut vale 2 o 3
408        			TargetTableNameIn		IN 		VARCHAR2, 						-- (obblig.) Nome della tabella
409        			TargetColNameIn		IN 		VARCHAR2, 						-- (obblig.) Nome della colonna della tabella TargetTableNameIn
410        			ValueIn			IN 		DMT_DIZIONARIO.VALUE%type 			-- (obblig.) Valore per cui trovare il codice corrispondente
411        			)return VARCHAR2;											-- Codice (NULL in caso di errore)
412        
413        	/**** Funzione per ottenere la codifica corrispondente ad un dato valore relativo ad una voce di dizionario	****/
414        	function GetCodeForValueForDictEntry(
415        			FlgTpDominioAutIn		IN		PLS_INTEGER DEFAULT NULL,			-- (obblig. se il dizionario è diversificato per soggetto produttore o AOO) Indica il tipo di dominio di lavoro: 1 = Schema DB; 2 = Soggetto produttore; 3 = AOO
416        			IdDominioAutIn		IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type DEFAULT NULL,
417        																-- (obblig. se FlgTpDominioAutIn vale 2 o 3) Identificativo del dominio di lavoro, vale a dire l'id. del soggetto produttore o AOO se FlgTpDominioAutOut vale 2 o 3
418        			DictionaryEntryIn		IN		DMT_DICTIONARY_ENTRIES.DICTIONARY_ENTRY%type,
419        																-- (obblig.) Voce di dizionario cui è relativo il codice da decodificare
420        			ValueIn			IN 		DMT_DIZIONARIO.VALUE%type 			-- (obblig.) Valore per cui trovare il codice corrispondente
421        			)return VARCHAR2;											-- Codice (NULL in caso di errore)
422        
423        	/********* funzione per individuare a partire da COD_VALUE e/o VALUE un valore del dizionario che vada bene per una certa colonna di tabella che accetta solo valori da dizionario 	*******/
424        	/********* In caso il valore di dizionario esista e sia individuato univocamente vengono restituiti in output sia l'eventuale codice che il valore trovato						*******/
425        	function FindDictionaryValue(
426        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,
427        																-- (obblig). Codice identificativo del token di connessione
428        			TargetTableNameIn		IN 		VARCHAR2, 						-- (obblig.) Nome della tabella
429        			TargetColNameIn		IN 		VARCHAR2, 						-- (obblig.) Nome della colonna della tabella TargetTableNameIn
430        			CodValueIO			IN OUT	DMT_DIZIONARIO.COD_VALUE%type,		-- Codice del valore di dizionario (ricerca case-sensitive in like senza forzare il % finale)
431        			ValueIO			IN OUT	DMT_DIZIONARIO.VALUE%type,			-- Valore di dizionario (la decodifica; ricerca case-insensitive in like senza forzare il % finale)
432        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
433        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
434        			ErrMsgOut			OUT 		VARCHAR2,						-- Messaggio d'errore
435        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS')
436        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) per cui si richiede che il valori sia valido. Se non valorizzato si intende che sia valido a qualsisai data
437        			)return PLS_INTEGER;										-- Vale 1 se il valore di dizionario è stato individuato univocamente, altrimenti 0
438        
439        	/**** Funzione per ottenere i valori possibili per una colonna di tabella che accetta valori relativi ad una voce di dizionario	****/
440        	/**** Il valori possono essere trovati per una specifica riga della tabella (identificata attraverso il suo ROWID)			****/
441        	/**** Sfrutta le relazioni tra voci di dizionario e colonne delle tabelle definite in DMT_REL_COD_DIZ						****/
442        	function TrovaDictValuesForTabCol(
443        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,
444        																-- (obblig). Codice identificativo del token di connessione
445        			IdUserLavoroIn		IN		DMT_USERS.ID_USER%type DEFAULT NULL,-- Identificativo dell'utente di lavoro (se non valorizzato si intende che sia l'utente connesso)
446        			TargetTableNameIn		IN 		VARCHAR2, 						-- (obblig.) Nome della tabella
447        			TargetColNameIn		IN 		VARCHAR2, 						-- (obblig.) Nome della colonna della tabella TargetTableNameIn
448        			RowIdIn			IN 		VARCHAR2 DEFAULT NULL, 				-- Rowid della riga della tabella (TargetTableNameIn o sua nested) per cui trovare i possibili valori
449        																-- Se non valorizzato si intende che il valore è per una nuova riga
450        																-- Se valorizzato il valore della colonna per la data riga è sempre tra quelli trovati
451        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'),
452        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) per cui si richiede che i valori trovati siano validi. Se non valorizzato si intende che si richiedono valori validi a qualsisai data
453        			StrInValueIn		IN		VARCHAR2,						-- Stringa che deve essere contenuta nei valori da trovare (ricerca case-insensitive in like)
454        			StrInCodValueIn		IN		VARCHAR2,						-- Stringa che deve essere contenuta nei codici dei valori da trovare (ricerca case-insensitive in like)
455        			ValueGenVincoloIn		IN		VARCHAR2,						-- Valore (decodificato) di un campo più generale al quale i valori da trovare sono vincolati
456        			------------- inizio argomenti standard di tutte le funzioni di ricerca che devono restituire una lista --------------
457        			ColOrderByIO		IN OUT	VARCHAR2,						-- Indica il/i numeri della/e colonna dell'XML (CLOB ListaXMLOut) di output per cui ordinare i record nell'XML stesso. Se l'ordinamento è per più colonne queste vanno separate con "," (es: 1; 1,2)
458        																-- in output può essere diverso che in input solo se in input è NULL: in tal caso significa che esiste sul tipo di ordinamento una qualche preimpostazione di sistema/utente ecc.
459        																-- se non valorizzato (neppure in output) la lista di record restituita non è ordinata
460        			FlgDescOrderByIO  	IN OUT	VARCHAR2,						-- E' una stringa di 1 o 0/NULL, tanti quanti le colonne di ordinamento, separati da ",": 1 significa che l'ordinamento per la data colonna deve essere discendente anzichè ascendente (es: 1; 1,0; 1, )
461        																-- in output può essere diverso che in input solo se in input è NULL: in tal caso significa che esiste sul verso di ordinamento una qualche preimpostazione di sistema/utente ecc.
462        			FlgSenzaPaginazioneIn 	IN 		PLS_INTEGER DEFAULT NULL,            	-- (valori 1/0/NULL) Se 1 l'estrazione non è paginata, altrimenti sì
463        			NroPaginaIO      		IN OUT	PLS_INTEGER,                  		-- E' il numero della pagina da estrarre; se NULL e l'estrazione è paginata viene estratta la prima pagina
464           			BachSizeIO			IN OUT	PLS_INTEGER,					-- Indica il massimo n.ro di record da estrarre se l'estrazione non è paginata (FlgSenzaPaginazioneIn=1)
465        																-- Indica la dimensione (n.ro di record) della pagina se l'estrazione è paginata (FlgSenzaPaginazioneIn 0 o NULL) e in tal caso se non è valorizzato la dimensione della pagina è quella settata per l'utente di lavoro o è pari al valore del parametro STD_PAGE_NUM_ROW del dominio di lavoro
466        			OverFlowLimitIn		IN		PLS_INTEGER DEFAULT NULL,			-- E' il n.ro di record soddisfacenti la ricerca superato il quale la funzione deve restituire errore di overflow
467        			FlgSenzaTotIn		IN		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se 1 significa che non è richiesto come output il totale dei record soddisfacenti la ricerca (se la ricerca è paginata per la prima pagina il totale viene calcolato comunque, per le successive no)
468        			NroTotRecOut		OUT		PLS_INTEGER,					-- E' il n.ro di record complessivi trovati (valorizzato solo se FlgSenzaTotIn è 0 o NULL o se si estrae la prima pagina)
469             			NroRecInPaginaOut 	OUT   	PLS_INTEGER,                     		-- E' il numero di record nella pagina (valorizzato solo se l'estrazione è paginata, ovvero se FlgSenzaPaginazioneIn 0 o NULL)
470        			------------- fine argomenti standard di tutte le funzioni di ricerca che devono restituire una lista --------------
471        			ListaXMLOut			OUT		CLOB,							-- Lista dei possibili valori (XML conforme a schema LISTA_STD.xsd)
472        																-- Ogni valore è un tag Riga che contiene 2 colonne:
473        																-- 1: Display value
474        																-- 2: Internal value da assegnare alla colonna
475        																-- 3: Descrzione estesa (explanation) del valore di dizionario
476        																-- 4: (valori 1/NULL) FLG_OBBLIG_DETTAGLI del valore di dizionario
477        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
478        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
479        			ErrMsgOut			OUT 		VARCHAR2)						-- Messaggio d'errore
480        			return PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine, altrimenti 0
481        
482        	/******** funzione per ottenere il valore che aveva ad un dato momento (passato) un certo attributo numerico di un record di tabella la quale abbia il campo INFO_STORICO  	*****/
483        	/******** ATTENZIONE: Il valore viene ricercato solo nelle INFO_STORICO del record e restituito solo se è lì presente										*****/
484        	function GetStoricoAttrNumber(
485        			TableNameIn			IN		VARCHAR2,						-- (obblig.) Nome della tabella che contiene l'entità-record di cui trovare l'attributo storicizzato (tabella con colonna INFO_STORICO)
486        			RecRowidIn			IN		VARCHAR2,						-- (obblig.) Rowid del record di tabella TableNameIn del quale ricavare l'attributo storicizzato
487        			AttrNameIn 			IN 		VARCHAR2, 						-- (obblig.) Nome dell'attributo, vale a dire il nome della colonna o il nome dell'attributo addizionale
488        			NroOccorrenzaIn 		IN 		PLS_INTEGER,					-- Indica quale occorrenza si desidera tra i valori dell'attributo storicizzato: se NULL viene restituito il primo valore
489        			TsRifIn			IN		VARCHAR2						-- (obblig.) Stringa (nel formato GG/MM/AAAA HH24:MI:SS) con il timestamp (passato) a cui l'attributo aveva il valore da ricercare
490        			) return NUMBER;											-- valore dell'attributo al timestamp TsRifIn se presente nelle INFO_STORICO
491        																-- -999 se il valore non era presente nelle INFO_STORICO o in caso di errore
492        
493        	/******** funzione per ottenere il valore che aveva ad un dato momento (passato) un certo attributo alfanumerico di un record di tabella la quale abbia il campo INFO_STORICO  	*****/
494        	/******** ATTENZIONE: Il valore viene ricercato solo nelle INFO_STORICO del record e restituito solo se è lì presente											*****/
495        	function GetStoricoAttrText(
496        			TableNameIn			IN		VARCHAR2,						-- (obblig.) Nome della tabella che contiene l'entità-record di cui trovare l'attributo storicizzato (tabella con colonna INFO_STORICO)
497        			RecRowidIn			IN		VARCHAR2,						-- (obblig.) Rowid del record di tabella TableNameIn del quale ricavare l'attributo storicizzato
498        			AttrNameIn 			IN 		VARCHAR2, 						-- (obblig.) Nome dell'attributo, vale a dire il nome della colonna o il nome dell'attributo addizionale
499        			NroOccorrenzaIn 		IN 		PLS_INTEGER,					-- Indica quale occorrenza si desidera tra i valori dell'attributo storicizzato: se NULL viene restituito il primo valore
500        			TsRifIn			IN		VARCHAR2						-- (obblig.) Stringa (nel formato GG/MM/AAAA HH24:MI:SS) con il timestamp (passato) a cui l'attributo aveva il valore da ricercare
501        			) return VARCHAR2;										-- valore dell'attributo al timestamp TsRifIn se presente nelle INFO_STORICO
502        																-- #NOT_FOUND se il valore non era presente nelle INFO_STORICO o in caso di errore
503        
504        	/******** funzione per ottenere il valore che aveva ad un dato momento (passato) un certo attributo di tipo data di un record di tabella la quale abbia il campo INFO_STORICO  	*****/
505        	/******** ATTENZIONE: Il valore viene ricercato solo nelle INFO_STORICO del record e restituito solo se è lì presente											*****/
506        	function GetStoricoAttrDate(
507        			TableNameIn			IN		VARCHAR2,						-- (obblig.) Nome della tabella che contiene l'entità-record di cui trovare l'attributo storicizzato (tabella con colonna INFO_STORICO)
508        			RecRowidIn			IN		VARCHAR2,						-- (obblig.) Rowid del record di tabella TableNameIn del quale ricavare l'attributo storicizzato
509        			AttrNameIn 			IN 		VARCHAR2, 						-- (obblig.) Nome dell'attributo, vale a dire il nome della colonna o il nome dell'attributo addizionale
510        			NroOccorrenzaIn 		IN 		PLS_INTEGER,					-- Indica quale occorrenza si desidera tra i valori dell'attributo storicizzato: se NULL viene restituito il primo valore
511        			TsRifIn			IN		VARCHAR2						-- (obblig.) Stringa (nel formato GG/MM/AAAA HH24:MI:SS) con il timestamp (passato) a cui l'attributo aveva il valore da ricercare
512        			) return DATE;											-- valore dell'attributo al timestamp TsRifIn se presente nelle INFO_STORICO
513        																-- la data 01/01/9999 se il valore non era presente nelle INFO_STORICO o in caso di errore
514        
515        	/***** Funzione per decodificare una utente di cui sia noto l'identificativo univoco *****/
516        	function DecodeUser(
517        			IdUserIn			IN		DMT_USERS.ID_USER%type,				-- (obblig.) Identificativo dell'utente
518        			TipoDecodificaIn		IN		VARCHAR2,						-- (obblig.) Tipo di decodifica richiesta.
519        																-- Valori possibili:
520        																-- <DESCRIZIONE> = Descrizione dell'utente
521        																-- <NOME> = Nome dell'utente
522        																-- <COGNOME> = Cognome dell'utente
523        																-- <USERNAME> = Username dell'utente
524        																-- <NRO_MATRICOLA> = N.ro di matricola dell'utente
525        																-- <TITOLO> = Titolo professionale/ di studio
526        																-- Può anche essere una concatenazione dei valori precedenti (tutto ciò che è fuori dalle angle brackets si intende stringa fissa di separazione)
527        																-- ad es: <DESCRIZIONE> (<USERNAME>) significa che si richiede la descrizione seguita, tra parentesi, dalla username
528        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS')
529        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) per cui si richiede la decodifica dell'utente. Se non valorizzato si intende sysdate
530        			) return VARCHAR2;										-- Stringa con la decodifica; può essere NULL in caso di errore
531        
532        	/******* serve a ricercare un utente (accreditato in un dato dominio) a partire da Id. e/o denominazione e/o username e/o n.ro di matricola 	******/
533        	/******* restituisce l'Id. dell'utente solo se a partire dagli estremi immessi riesce a identificarlo univocamente					******/
534        	function FindUser(
535        			IdDominioAutIn		IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- Identificativo del dominio (soggetto produttore o AOO) in cui l'utente deve essere accreditato (se NULL significa che deve essere accreditato come utente di schema)
536        			IdUserIn			IN 		DMT_USERS.ID_USER%type DEFAULT NULL,	-- Identificativo dell'utente
537        			DesUserIn			IN		DMT_USERS.DES_USER%type DEFAULT NULL,	-- Denominazione dell'utente (o suo inizio; ricerca case insensitive in like)
538        			UsernameIn			IN		DMT_USERS.USERNAME%type DEFAULT NULL,	-- Username dell'utente (o suo inizio; ricerca case insensitive in like)
539        			NroMatricolaIn		IN		DMT_USERS.NRO_MATRICOLA%type DEFAULT NULL,-- N.ro di matricola dell'utente (o suo inizio; ricerca case insensitive in like)
540        			FlgSoloVldIn		IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL) Indica se l'utente deve essere valido (1) o no (al timestamp TsRifIn)
541        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS')
542        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) di riferimento al quale l'utente deve avere gli estremi specificati in input. Se non valorizzato si intende sysdate
543        			) return INTEGER;											-- restituisce ID_USER dell''utente se individuato, altrimenti NULL
544        
545        	/****** serve a ricercare un utente, accreditato presso un dato sogg. produttore o AOO, a partire dal suo identificativo in un'applicazione esterna *******/
546        	/******* restituisce l'ID_USER dell'utente se a partire dagli estremi immessi riesce a identificarlo univocamente						    *******/
547        	function FindUserFromExtID(
548        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,
549        																-- Identificativo del soggetto produttore o AOO presso cui l'utente deve essere accreditato (se non specificato viene ricavato come quello su cui insiste l'applicazione esterna/sua istanza)
550        			CodApplEsternaIn		IN		VARCHAR2,						-- (obblig.) Codice applicazione esterna in cui l'utente ha cod. identificativo pari a CodIdUserEsternoIn
551        			CodIstanzaApplEstIn	IN		VARCHAR2 DEFAULT NULL,				-- (solo se applicazione esterna multi-istanza) Codice istanza dell'applicazione esterna in cui l'utente ha cod. identificativo pari a CodIdUserEsternoIn
552        			CodIdUserEsternoIn	IN		VARCHAR2,						-- (obblig.) Codice identificativo dell'utente nell'applicazione esterna (eventualmente nella specfica istanza della stessa)
553        			FlgSoloVldIn		IN		PLS_INTEGER DEFAULT 1				-- (valori 1/0/NULL) Indica se l'utente deve essere valido (1) o no
554        			) return INTEGER;											-- restituisce ID_USER dell'utente se individuato, altrimenti NULL
555        
556        	/****** serve a ricercare un utente, accreditato presso un dato sogg. produttore o AOO, a partire dalle sue credenziali in un'applicazione esterna 	*******/
557        	/******* restituisce l'ID_USER dell'utente se a partire dagli estremi immessi riesce a identificarlo univocamente						    	*******/
558        	function FindUserFromExtCred(
559        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,
560        																-- Identificativo del soggetto produttore o AOO presso cui l'utente deve essere accreditato (se non specificato viene ricavato come quello su cui insiste l'applicazione esterna/sua istanza)
561        			CodApplEsternaIn		IN		VARCHAR2,						-- (obblig.) Codice applicazione esterna in cui l'utente ha cod. identificativo pari a CodIdUserEsternoIn
562        			CodIstanzaApplEstIn	IN		VARCHAR2 DEFAULT NULL,				-- (solo se applicazione esterna multi-istanza) Codice istanza dell'applicazione esterna in cui l'utente ha cod. identificativo pari a CodIdUserEsternoIn
563        			UsernameEstIn		IN		VARCHAR2,						-- (obblig.) Username dell'utente nell'applicazione esterna (eventualmente nella specfica istanza della stessa)
564        			PasswordEstIn		IN		VARCHAR2,						-- Password dell'utente nell'applicazione esterna (eventualmente nella specfica istanza della stessa)
565        			FlgSoloVldIn		IN		PLS_INTEGER DEFAULT 1				-- (valori 1/0/NULL) Indica se l'utente deve essere valido (1) o no
566        			) return INTEGER;											-- restituisce ID_USER dell'utente se individuato, altrimenti NULL
567        
568        
569        	/****** Funzione per ottenere il codice che identifica un dato utente in una data applicazione esterna e sua eventuale istanza ******/
570        	function GetUserExtCID(
571        			IdUserIn			IN		DMT_USERS.ID_USER%type,				-- (obblig.) Identificativo interno dell'utente
572        			CodApplEsternaIn		IN		VARCHAR2,						-- (obblig.) Codice applicazione esterna in cui trovare il codice identificativo dell'utente
573        			CodIstanzaApplEstIn	IN		VARCHAR2 DEFAULT NULL				-- (solo se applicazione esterna multi-istanza) Codice istanza dell'applicazione esterna in cui trovare il codice identificativo dell'utente
574        			) return VARCHAR2;										-- codice che identifica l'utente nell'applicazione esterna ed eventuale sua istanza
575        																-- NULL in caso di errore o codice non trovato
576        
577        	/***** Funzione per decodificare una UO di cui sia noto l'identificativo univoco *****/
578        	function DecodeUO(
579        			IdUOIn			IN 		DMT_STRUTTURA_ORG.ID_UO%type,			-- (obblig.) Identificativo della UO
580        			TipoDecodificaIn		IN		VARCHAR2,						-- (obblig.) Tipo di decodifica richiesta.
581        																-- Valori possibili:
582        																-- <DENOMINAZIONE> = Denominazione della UO (non preceduta da quelle delle UO superiori)
583        																-- <DENOMINAZIONE_ESTESA> = Denominazione della UO preceduta da quelle di tutte le UO superiori (separate da " | ").
584        																-- <DENOMINAZIONE_ESTESA_DA_LIV_n> = Denominazione della UO preceduta da quelle delle UO superiori di livello >=n (con n numero intero pari ad un livello delle struttura organizzativa)
585        																-- <LIVELLI> = N.ri livello della UO (separati dal separatore dei livelli valido per il soggetto produttore/AOO di appartenenza della UO)
586        																-- <LIVELLI_DA_LIV_n> = N.ri livello della UO a partire dal n.ro del livello n-esimo (con n numero intero >1 pari ad un livello delle struttura organizzativa)
587        																-- Può anche essere una concatenazione dei valori precedenti (tutto ciò che è fuori dalle angle brackets si intende stringa fissa di separazione)
588        																-- ad es: <LIVELLI> - <DENOMINAZIONE> significa che si richiedono livelli e denominazione separati da " - "
589        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS')
590        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) per cui si richiede la decodifica della UO. Se non valorizzato si intende sysdate
591        			) return VARCHAR2;										-- Stringa con la decodifica; può essere NULL in caso di errore
592        
593        	/******* serve a ricercare una UO relativa ad un dato sogg. produttore o AOO a partire da Id. e/o stringa con i codici di livello e/o denominazione 	******/
594        	/******* restituisce l'Id. della UO solo se a partire dagli estremi immessi riesce a identificarla univocamente							******/
595        	function FindUO(
596        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- (obblig.) Identificativo del soggetto produttore o AOO cui è relativa la UO
597        			IdUOIn			IN 		DMT_STRUTTURA_ORG.ID_UO%type DEFAULT NULL,-- Identificativo della UO
598        			LivelliStrIn		IN		VARCHAR2 DEFAULT NULL,				-- Stringa con i n.ri livello della UO da ricercare (tutti o solo alcuni; però se si specifica un livello è obbligatorio indicare tutti i livelli superiori; vanno indicati come appaiono nella GUI, ovvero romani se previsto, 0 o -- se nulli; vanno separati dal separatore dei livelli di UO valido per il soggetto produttore/AOO di appartenenza della UO)
599        			DesUOIn			IN		VARCHAR2 DEFAULT NULL,				-- Denominazione della UO (o suo inizio; ricerca case insensitive in like). Può essere quella semplice o la concatenazione con separatore "|" delle denominazioni delle UO superiori + quella della UO
600        																-- ATTENZIONE: mentre la ricerca sulla denominazione semplice intende sempre che il valore in input sia un possibile inizio (aggiunge in automatico un % finale al valore quando fa la ricerca in like), quella sulla concatenzione no (il % finale non viene aggiunto in automatico, altrimenti le UO con sotto-UO non sarebbero mai individuabili univocamente attraverso il solo filtro sulla denominazione)
601        			FlgSoloVldIn		IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL) Indica se la UO deve essere valida (1) o no (al timestamp TsRifIn)
602        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'),
603        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) di riferimento al quale la UO deve avere gli estremi specificati in input. Se non valorizzato si intende sysdate
604        			CodTipoIn			IN		VARCHAR2 DEFAULT NULL,				-- Codice del tipo della UO da trovare (ricerca esatta case-sensitive)
605        			LivelloGerarchicoIn	IN		DMT_STRUTTURA_ORG.LIVELLO_GERARCHICO%type DEFAULT NULL,
606        																-- Livello gerarchico (intero da 1 a n; 1 è il più alto) della UO
607        			FlgLivelliParzIn		IN		PLS_INTEGER DEFAULT NULL			-- (valori 1/0) Se 1 significa che se sono valorizzati solo alcuni livelli (i primi) i successivi sono da intendersi come non specificati e quindi possono avere qualsiasi valore
608        																-- Se 0 o NULL significa che i livelli non specificati dopo i primi devono essere non valorizzati
609        			) return INTEGER;											-- restituisce ID_UO della UO se individuata, altrimenti NULL
610        
611        	---overload della precedente, con l'unica differenza che i livelli sono passati come XML anzichè come stringa
612        	function FindUO(
613        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- (obblig.) Identificativo del soggetto produttore o AOO cui è relativa la UO
614        			IdUOIn			IN 		DMT_STRUTTURA_ORG.ID_UO%type DEFAULT NULL,-- Identificativo della UO
615        			LivelliXMLIn		IN		CLOB DEFAULT NULL,				-- XML (secondo schema LISTA_STD.xsd) con i n.ri livello della UO da ricercare (tutti o alcuni; però se si specifica un livello è obbligatorio indicare tutti i livelli superiori)(come appaiono nella GUI, ovvero romani se previsto, 0 o -- se nulli).
616        																-- Ogni livello è un tag Riga che contiene 2 colonne:
617        																-- 1: Nro (intero), con il livello gerarchico,
618        																-- 2: Codice (alfanumerico) , con il n.ro identifcativo del livello
619        			DesUOIn			IN		VARCHAR2 DEFAULT NULL,				-- Denominazione della UO (o suo inizio; ricerca case insensitive in like). Può essere quella semplice o la concatenazione con separatore "|" delle denominazioni delle UO superiori + quella della UO
620        																-- ATTENZIONE: mentre la ricerca sulla denominazione semplice intende sempre che il valore in input sia un possibile inizio (aggiunge in automatico un % finale al valore quando fa la ricerca in like), quella sulla concatenzione no (il % finale non viene aggiunto in automatico, altrimenti le UO con sotto-UO non sarebbero mai individuabili univocamente attraverso il solo filtro sulla denominazione)
621        			FlgSoloVldIn		IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL) Indica se la UO deve essere valida (1) o no (al timestamp TsRifIn)
622        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'),
623        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) di riferimento al quale la UO deve avere gli estremi specificati in input. Se non valorizzato si intende sysdate
624        			CodTipoIn			IN		VARCHAR2 DEFAULT NULL,				-- Codice del tipo della UO da trovare (ricerca esatta case-sensitive)
625        			LivelloGerarchicoIn	IN		DMT_STRUTTURA_ORG.LIVELLO_GERARCHICO%type DEFAULT NULL,
626        																-- Livello gerarchico (intero da 1 a n; 1 è il più alto) della UO
627        			FlgLivelliParzIn		IN		PLS_INTEGER DEFAULT NULL			-- (valori 1/0) Se 1 significa che se sono valorizzati solo alcuni livelli (i primi) i successivi sono da intendersi come non specificati e quindi possono avere qualsiasi valore
628        																-- Se 0 o NULL significa che i livelli non specificati dopo i primi devono essere non valorizzati
629        			) return INTEGER;											-- restituisce ID_UO della UO se individuata, altrimenti NULL
630        
631        	/******* serve a ricercare una UO relativa ad un dato sogg. produttore o AOO a partire dalla denominazione 	******/
632        	/******* restituisce l'Id. della UO solo se riesce a identificarla univocamente								******/
633        	function FindUOByDes(
634        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- (obblig.) Identificativo del soggetto produttore o AOO cui è relativa la UO
635        			DesUOIn			IN		VARCHAR2 DEFAULT NULL,				-- Denominazione della UO (o suo inizio; ricerca case insensitive in like). Può essere quella semplice o la concatenazione con separatore "|" delle denominazioni delle UO superiori + quella della UO
636        																-- ATTENZIONE: mentre la ricerca sulla denominazione semplice intende sempre che il valore in input sia un possibile inizio (aggiunge in automatico un % finale al valore quando fa la ricerca in like), quella sulla concatenzione no (il % finale non viene aggiunto in automatico, altrimenti le UO con sotto-UO non sarebbero mai individuabili univocamente attraverso il solo filtro sulla denominazione)
637        			FlgSoloVldIn		IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL) Indica se la UO deve essere valida (1) o no (al timestamp TsRifIn)
638        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS')
639        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) di riferimento al quale la UO deve avere gli estremi specificati in input. Se non valorizzato si intende sysdate
640        			) return INTEGER;											-- restituisce ID_UO della UO se individuata, altrimenti NULL
641        
642        	--- funzione per trovare una UO dai livelli (cod. rapido)
643        	function FindUOByLiv_J(
644        			IdSpAOOIn				IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,				-- (obblig.) Identificativo del soggetto produttore o AOO cui è relativa la UO
645        			LivelliStrIn			IN		VARCHAR2 DEFAULT NULL,								-- Stringa con i n.ri livello della UO da ricercare (vanno indicati come appaiono nella GUI, ovvero romani se previsto, 0 o -- se nulli; vanno separati dal separatore dei livelli di UO valido per il soggetto produttore/AOO di appartenenza della UO)
646        			FlgSoloVldIn			IN		PLS_INTEGER DEFAULT 1,								-- (valori 1/0/NULL) Indica se la UO deve essere valida (1) o no (al timestamp TsRifIn)
647        			IdUOOut					OUT 	DMT_STRUTTURA_ORG.ID_UO%type,						-- Id. della UO corrispondente ai livello indicato
648        			ErrContextOut			OUT		VARCHAR2,											-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
649        			ErrCodeOut				OUT		PLS_INTEGER,										-- N.ro errore di uscita
650        			ErrMsgOut				OUT 	VARCHAR2											-- Messaggio d'errore
651        			) return PLS_INTEGER;																-- Vale 1 la UO è stata trovata, altrimenti 0
652        
653        	/****** Funzione per ottenere l'id. di una delle UO che ricomprendono ad una certa data una data una UO indicata anch'essa attraverso l'id. ******/
654        	function GetIdUOSuperiore(
655        			IdUOIn			IN		DMT_STRUTTURA_ORG.ID_UO%type,			-- (obblig.) Identificativo della UO di cui trovare la UO superiore
656        			LivelloGerarchicoSupIn	IN		DMT_STRUTTURA_ORG.LIVELLO_GERARCHICO%type DEFAULT NULL,
657        																-- Livello gerarchico (intero da 1 a n; 1 è il più alto) della UO superiore da trovare
658        																-- Se NULL si intende la UO direttamente superiore
659        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS')
660        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) di riferimento al quale trovare la UO superiore di IdUOIn. Se non valorizzato si intende sysdate
661        			) return DMT_STRUTTURA_ORG.ID_UO%type;							-- restituisce ID_UO della UO superiore se individuata, altrimenti NULL
662        
663        	/****** Funzione per ottenere gli id. delle UO che ricomprendono ad una certa data una data una UO indicata anch'essa attraverso l'id. 	******/
664        	/****** Nalla lista viene inclusa la stessa UO 																******/
665        	function GetListaIdUOSuperiori(
666        			IdUOIn			IN		DMT_STRUTTURA_ORG.ID_UO%type,			-- (obblig.) Identificativo della UO di cui trovare le UO superiori
667        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS')
668        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) di riferimento al quale trovare le UO superiori di IdUOIn. Se non valorizzato si intende sysdate
669        			) return DMTO_ID;											-- restituisce gli ID_UO delle UO superiori (NULL in caso di errore)
670        
671        	/**** Funzione per testare se una UO/scrivania o un utente ricade/è collegato con una data UO ad un certo timestamp			******/
672        	/**** la relazione di appartenenza può anche essere indiretta, ovvero con una UO gerarchicamente ricompresa in quella indicata	******/
673        	function TestRelVsUO (
674        			IdUOOuterIn			IN		DMT_STRUTTURA_ORG.ID_UO%type,			-- (obblig.) Identificativo della UO in cui deve ricadere l'altra UO o un utente o scrivania
675        			FlgTpObjInnerIn		IN		VARCHAR2,						-- (obblig.) Indica il tipo di oggetto che si vuole testare se ricade nella UO IdUOOuterIn
676        																-- Valori ammessi:
677        																--	UO	=	U.O.
678        																-- 	SV	=	Scrivania virtuale
679        																--	UT	=	Utente
680        			IdObjInnerIn		IN		INTEGER,						-- (obblig.)  Identificativo (ID_UO o ID_USER o ID_SCRIVANIA) dell'oggetto che si vuole testare se ricade nella struttura IdUOOuterIn
681        			FlgTpRelIn			IN		VARCHAR2 DEFAULT NULL,				-- Indica il tipo di relazione che si deve verificare se esiste. Va valorizzato e viene controllato/gestito solo se FlgTpObjInnerIn=UT.
682        																-- Valori ammessi:
683        																--	NULL	=	Qualsiasi
684        																-- 	A 	= 	Appartenenza (implica abilitazione a lavorare su documenti e fascicoli assegnati alla UO con i propri privilegi)
685        																-- 	L 	= 	Abilitazione a lavorare su documenti e fascicoli assegnati alla UO con i propri privilegi
686        																-- 	D 	= 	Delega a lavorare su documenti e fascicoli come se si fosse quella UO (con i suoi privilegi)
687        			FlgAppDirettaIn		IN		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Va valorizzato e viene controllato/gestito solo se FlgTpObjInnerIn è UO o SV o se FlgTpRelIn=A(ppartenenza)
688        																-- se 1 la relazione di appartenenza che si vuole testare se esiste è una relazione DIRETTA
689        																-- se diverso da 1 il test dà esito positivo anche se l'utente/scrivania/UO appartiene ad una UO gerarchicamente ricompresa in IdUOOuterIn
690        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'))
691        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) a cui la relazione deve essere valida. Se non valorizzato si intende sysdate
692        			return PLS_INTEGER;										-- Valori possibili:
693        																--	1	=	test positivo
694        																--	0	=	test negativo
695        																--	interi negativi = errore (il result è il codice d'errore)
696        	/***** Table function per ottenere gli ID delle UO sottostanti (non solo con dipendenza diretta) una data UO in una certa data ******/
697        	function TrovaIdSottoUO (
698        			IdUOIn			IN		DMT_STRUTTURA_ORG.ID_UO%type,			-- (obblig.) Identificativo della UO di cui trovare le sotto-UO
699        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS')
700        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) a cui trovare le sotto-UO. Se non valorizzato si intende sysdate
701        			)return DMTO_ID;											-- Lista con gli id. delle sotto-UO
702        
703        	/**** Table function per ottenere gli ID dei ruoli inclusi (anche indirettamente) in un dato ruolo amministrativo ****/
704        	function TrovaIdRuoliInclusi(
705        			IdRuoloIn			IN		DMT_RUOLI_AMM.ID_RUOLO_AMM%type		-- (obblig.) Identificativo del ruolo di cui trovare i ruoli inclusi
706        			)return DMTO_ID;											-- Lista con gli id. dei ruoli inclusi (anche indirettamente)
707        
708        	/**** Funzione per testare se un dato ruolo amministrativo è dato ad un utente o a un ruolo (vale a dire incluso in esso)	******/
709        	/**** la verifica va a buon fine anche se la relazione NON E' DIRETTA (es: ruolo incluso in altro ruolo che ha l'utente) 	******/
710        	function TestRuoloAmmA(
711        			IdRuoloAmmIn		IN		DMT_RUOLI_AMM.ID_RUOLO_AMM%type,		-- (obblig.) Identificativo del ruolo amministrativo da verificare se dato/incluso
712        			FlgTpObjToTestIn		IN		VARCHAR2,						-- (obblig.) Indica il tipo di oggetto che si vuole testare se ha/ricomprende il ruolo
713        																-- Valori ammessi:
714        																--	RA	=	Ruolo amministrativo
715        																--	UT	=	Utente
716        			IdObjToTestIn		IN		INTEGER,						-- (obblig.)  Identificativo (ID_RUOLO_AMM o ID_USER) dell'oggetto che si vuole testare se ha/include il ruolo
717        			IdDominioIn			IN 		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type DEFAULT NULL,
718        																-- (gestito solo se FlgTpObjToTestIn='UT') Identificativo del dominio di lavoro (vale a dire l'id. del soggetto produttore o AOO ) in cui testare se l'utente ha il ruolo
719        																-- Se NULL e FlgTpObjToTestIn='UT' si intende che il dominio di lavoro in cui testare se l'utente ha il ruolo è il suo dominio di default, a meno che IdUOLimTestIn sia valorizzata, nel qual caso il test viene fatto nel dominio (sogg. produttore/AOO) di appartenenza della UO
720        			LivUOLimTestIn		IN		DMT_STRUTTURA_ORG.LIVELLO_GERARCHICO%type DEFAULT NULL,
721        																-- (gestito solo se FlgTpObjToTestIn=UT) Livello (valori da 1 a n; 1 è il più alto) della UO in cui si deve espletare il ruolo affinchè il test dia esito positivo
722        			CodTipoUOLimTestIn	IN		DMT_STRUTTURA_ORG.COD_TIPO%type DEFAULT NULL,
723        																-- (gestito solo se FlgTpObjToTestIn=UT e alternativo a LivUOLimTestIn) Codice del tipo della UO in cui si deve espletare il ruolo affinchè il test dia esito positivo
724        			IdUOLimTestIn		IN		DMT_STRUTTURA_ORG.ID_UO%type DEFAULT NULL,
725        																-- (gestito solo se FlgTpObjToTestIn=UT) Id. della UO in cui deve espletarsi il ruolo o da cui risalire alla/e UO (con il livello o tipo indicati) in cui deve espletarsi il ruolo affinchè il test dia esito positivo.
726        			FlgInclSottoUOIn		IN		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se 1 indica che il ruolo si può espletare anche nelle sotto-UO di IdUOLimTestIn o della/e UO a cui si risale da IdUOLimTestIn
727        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'))
728        																-- (gestito solo se FlgTpObjToTestIn=UT) Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) a cui testare se il ruolo è dato all'utente. Se non valorizzato si intende pari a sysdate
729        																-- se FlgTpObjToTestIn = RA il test è sempre alla data e ora correnti
730        																-- Il test dà esito positivo solo se l'utente ha il ruolo al timestamp specificato
731        			return PLS_INTEGER;										-- Valori possibili:
732        																--	1	=	test positivo
733        																--	0	=	test negativo
734        																--	interi negativi = errore (il result è il codice d'errore)
735        
736        	/**** Funzione per esplodere un ruolo amministrativo "contestualizzato" nell'insieme di utenti e scrivanie che gli corrispondono							******/
737        	/**** se un utente occupa quel ruolo contestualizzato essendo legato alla SO attraverso una scrivania viene restituita la scrivania anzichè l'utente, altrimenti lui 	******/
738        	function EsplodiRuoloContestualizzato(
739        			IdRuoloAmmIn		IN		DMT_RUOLI_AMM.ID_RUOLO_AMM%type,		-- (obblig.) Identificativo del ruolo amministrativo da esplodere
740        			FlgTpObjToExtractIn	IN		VARCHAR2,						-- Se valorizzato indica che espodendo si devono estrarre solo oggetti di un certo tipo.
741        																-- Valori ammessi:
742        																--	SV	=	Scrivanie viruali
743        																--	UT	=	Utente
744        																--	NULL	=	Entrambi
745        			IdDominioIn			IN 		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type DEFAULT NULL,
746        																-- (obblig. a meno che IdUORifRuoloIn sia valorizzato) Identificativo del dominio di lavoro (vale a dire l'id. del soggetto produttore o AOO ) in cui esplodere il ruolo contestualizzato
747        																-- Se NULL e IdUORifRuoloIn è valorizzato, si esplode per il dominio (sogg. produttore/AOO) di appartenenza della UO
748        			LivUOLimRuoloIn		IN		DMT_STRUTTURA_ORG.LIVELLO_GERARCHICO%type DEFAULT NULL,
749        																-- Livello (valori da 1 a n; 1 è il più alto) della UO in cui si deve espletare il ruolo da esplodere
750        			CodTipoUOLimRuoloIn	IN		DMT_STRUTTURA_ORG.COD_TIPO%type DEFAULT NULL,
751        																-- (alternativo a LivUOLimRuoloIn) Codice del tipo della UO in cui si deve espletare il ruolo da esplodere
752        			IdUORifRuoloIn		IN		DMT_STRUTTURA_ORG.ID_UO%type DEFAULT NULL,-- Id. della UO in cui si espleta il ruolo o da cui risalire alla/e UO (con il livello o tipo indicati) in cui si espleta il ruolo da esplodere.
753        			FlgInclSottoUOIn		IN		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se 1 indica che il ruolo può espletarsi anche nelle sotto-UO di IdUORifRuoloIn o della/e UO a cui si risale da IdUORifRuoloIn
754        			TsVldIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS')
755        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) a cui devono essere validi gli oggetti da estrarre. Se non valorizzato si intende che si debbano estrarre oggetti validi a qualsiasi timestamp
756        			)return DMTO_STRING;										-- Lista con le scrivanie e/o utenti in cui è stato esploso il ruolo
757        																-- Ogni record contiene la sigla del tipo di oggetto che rappresenta (UT o SV) concatenata con l'id. dell'oggetto stesso (ID_USER o ID_SCRIVANIA) (es: UT1001; SV99)
758        
759        	/**** Funzione per testare se un utente ha relazione con una data scrivania ad un certo timestamp ******/
760        	function TestRelUserVsSV (
761        			IdUserIn			IN		DMT_USERS.ID_USER%type,				-- (obblig.) Identificativo dell''utente
762        			IdScrivaniaIn		IN		DMT_SCRIVANIE_VIRTUALI.ID_SCRIVANIA%type,	-- (obblig.) Identificativo della scrivania
763        			FlgTpRelIn			IN		VARCHAR2 DEFAULT NULL,				-- Indica il tipo di relazione che si deve verificare se esiste.
764        																-- Valori ammessi:
765        																--	NULL	=	Qualsiasi
766        																-- 	A 	= 	Appartenenza alla UO in cui si colloca la scrivania (implica abilitazione a lavorare su documenti e fascicoli assegnati alla UO/scrivania con i propri privilegi)
767        																-- 	L 	= 	Abilitazione a lavorare su documenti e fascicoli assegnati alla scrivania con i propri privilegi
768        																-- 	D 	= 	Delega a lavorare su documenti e fascicoli della scrivania con i privilegi della stessa
769        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'),
770        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) a cui la relazione deve essere valida. Se non valorizzato si intende sysdate
771        			FlgExclSVAltriIn	IN		PLS_INTEGER DEFAULT NULL)	-- Se 1 vengono considerate SOLO le scrivanie dell'utente e non quelle di altri su cui ha visibilità per effetto del flag FLG_INCL_SCRIVANIE=1
772        			return PLS_INTEGER;										-- Valori possibili:
773        																--	1	=	test positivo
774        																--	0	=	test negativo
775        																--	interi negativi = errore (il result è il codice d'errore)
776        
777        	/**** Funzione per testare se una UO/scrivania/utente/gruppo appartiene ad un dato gruppo	di soggetti interni						*****/
778        	/**** ATTENZIONE: un utente non viene dato come appartenente ad un gruppo solo perchè nel gruppo ricade una UO o scrivania cui è collegato	*****/
779        	function TestAppartenenzaAGruppo (
780        			IdGruppoIn			IN		DMT_GRUPPI.ID_GRUPPO%type,			-- (obblig.) Identificativo del gruppo a cui si deve testare l'apprtenenza
781        			FlgTpObjToTestIn		IN		VARCHAR2,						-- (obblig.) Indica il tipo di oggetto che si vuole testare se appartiene al gruppo IdGruppoIn
782        																-- Valori ammessi:
783        																--	UO	=	U.O.
784        																-- 	SV	=	Scrivania virtuale
785        																--	UT	=	Utente
786        																--	G	=	Gruppo
787        			IdObjToTestIn		IN		INTEGER,				-- (obblig.)  Identificativo (ID_UO o ID_USER o ID_SCRIVANIA o ID_GRUPPO) dell'oggetto che si vuole testare se appartiene al gruppo IdGruppoIn
788        			IdUOTramiteIn		IN		INTEGER DEFAULT NULL,	-- (considerata solo se FlgTpObjToTestIn = UT) Id. UO che deve fare da tramite per l'appartenenza al gruppo dell'utente da testare
789        			FlgExclUOSVIncluseIn IN PLS_INTEGER DEFAULT NULL)	-- Se 1 nel test non vengono considerate le UO e scrivanie che l'utente per cui si testa ha associate solo per il tramite dei flag FLG_INCL_SOTTOUO e FLG_INCL_SCRIVANIE nelle sue relazioni con l'organigramma
790        			return PLS_INTEGER;									-- Valori possibili:
791        																--	1	=	test positivo
792        																--	0	=	test negativo
793        																--	interi negativi = errore (il result è il codice d'errore)
794        
795        	/***** Table function per esplodere un gruppo di soggetti interni nell'insieme di utenti e/o UO e/o scrivanie e/o altri gruppi che ricomprende	******/
796        	/***** NOTA: Se una UO è nel gruppo con tutte le sue sotto-UO vengono mostrate tutte le sotto-UO								******/
797        	function EsplodiGruppo(
798        			IdGruppoIn			IN		DMT_GRUPPI.ID_GRUPPO%type,			-- (obblig.) Identificativo del gruppo da esplodere
799        			LstTpObjToExtractIn	IN		VARCHAR2,						-- Se valorizzato indica che espodendo si devono estrarre solo oggetti di un certo/certi tipi.
800        																-- Valori ammessi:
801        																--	SV	=	Scrivanie viruali
802        																--	UT	=	Utenti
803        																--	UO	=	U.O.
804        																--	G	=	Gruppi
805        																-- 	una qualsiasi concatenazione dei precedenti separati da "," (es: SV,UT,UO)
806        																--	NULL	=	Qualsiasi tipo
807        			TsVldIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS')
808        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) a cui devono essere validi gli oggetti da estrarre. Se non valorizzato si intende che si debbano estrarre oggetti validi a qualsiasi timestamp
809        			)return DMTO_STRING;										-- Lista con le scrivanie e/o utenti e/o UO e/o gruppi in cui è stato esploso il gruppo
810        																-- Ogni record contiene la sigla del tipo di oggetto che rappresenta (UT o SV o UO o G) concatenata con l'id. dell'oggetto stesso (ID_USER o ID_SCRIVANIA o ID_UO o ID_GRUPPO) (es: UT1001; SV99; UO56)
811        
812        	/***** Funzione per testare se ad un certo timestamp un dato utente ha delega verso un altro utente ******/
813        	function TestDelUserVsUser(
814        			IdUserDelegatoIn		IN		DMT_USERS.ID_USER%type,				-- (obblig.) Identificativo dell''utente che deve avere la delega
815        			IdUserDelegaVsIn		IN		DMT_USERS.ID_USER%type,				-- (obblig.) Identificativo dell''utente verso cui si deve avere delega
816        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'))
817        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) a cui la delega deve essere valida. Se non valorizzato si intende sysdate
818        			return PLS_INTEGER;										-- Valori possibili:
819        																--	1	=	test positivo
820        																--	0	=	test negativo
821        																--	interi negativi = errore (il result è il codice d'errore)
822        
823        	/******* Funzione per ottenere le deleghe di un dato utente verso altri utenti *******/
824        	function TrovaDelUtenteVsUtenti(
825        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,
826        																-- (obblig). Codice identificativo del token di connessione
827        			IdUserDelegatoIn		IN		DMT_USERS.ID_USER%type,				-- (obblig.) Identificativo dell'utente per cui trovare le deleghe verso altri utenti
828        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'),
829        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) per cui si richiede che le deleghe trovate siano valide. Se non valorizzato si intende che si richiedono deleghe valide a qualsisai data
830        			StrInDesUserIn		IN		DMT_USERS.DES_USER%type DEFAULT NULL,	-- Stringa che deve essere contenuta nella denominazione (attuale) degli utenti verso cui devono essere le deleghe da trovare (ricerca case-insensitive in like)
831        			StrInUsernameIn		IN		DMT_USERS.USERNAME%type DEFAULT NULL,	-- Stringa che deve essere contenuta nella username (attuale) degli utenti verso cui devono essere le deleghe da trovare (ricerca case insensitive in like)
832        			StrInNroMatricolaIn	IN		DMT_USERS.NRO_MATRICOLA%type DEFAULT NULL,-- Stringa che deve essere contenuta nel N.ro di matricola (attuale) degli utenti verso cui devono essere le deleghe da trovare (ricerca case insensitive in like)
833        			FlgSoloUserVldIn		IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL; gestito solo se TsRifIn è valorizzato) Indica se gli utenti verso cui devono essere le deleghe da trovare devono essere validi (1) o no al timestamp TsRifIn
834        			StrInNaturaDelIn		IN		VARCHAR2 DEFAULT NULL,				-- Stringa che deve essere contenuta nella natura/motivi delle deleghe da trovare (ricerca case insensitive in like)
835        			------------- inizio argomenti standard di tutte le funzioni di ricerca che devono restituire una lista --------------
836        			ColOrderByIO		IN OUT	VARCHAR2,						-- Indica il/i numeri della/e colonna dell'XML (CLOB ListaXMLOut) di output per cui ordinare i record nell'XML stesso. Se l'ordinamento è per più colonne queste vanno separate con "," (es: 1; 1,2)
837        																-- in output può essere diverso che in input solo se in input è NULL: in tal caso significa che esiste sul tipo di ordinamento una qualche preimpostazione di sistema/utente ecc.
838        																-- se non valorizzato (neppure in output) la lista di record restituita non è ordinata
839        			FlgDescOrderByIO  	IN OUT	VARCHAR2,						-- E' una stringa di 1 o 0/NULL, tanti quanti le colonne di ordinamento, separati da ",": 1 significa che l'ordinamento per la data colonna deve essere discendente anzichè ascendente (es: 1; 1,0; 1, )
840        																-- in output può essere diverso che in input solo se in input è NULL: in tal caso significa che esiste sul verso di ordinamento una qualche preimpostazione di sistema/utente ecc.
841        			FlgSenzaPaginazioneIn 	IN 		PLS_INTEGER DEFAULT NULL,            	-- (valori 1/0/NULL) Se 1 l'estrazione non è paginata, altrimenti sì
842        			NroPaginaIO      		IN OUT	PLS_INTEGER,                  		-- E' il numero della pagina da estrarre; se NULL e l'estrazione è paginata viene estratta la prima pagina
843           			BachSizeIO			IN OUT	PLS_INTEGER,					-- Indica il massimo n.ro di record da estrarre se l'estrazione non è paginata (FlgSenzaPaginazioneIn=1)
844        																-- Indica la dimensione (n.ro di record) della pagina se l'estrazione è paginata (FlgSenzaPaginazioneIn 0 o NULL) e in tal caso se non è valorizzato la dimensione della pagina è quella settata per l'utente di lavoro o è pari al valore del parametro STD_PAGE_NUM_ROW del dominio di lavoro
845        			OverFlowLimitIn		IN		PLS_INTEGER DEFAULT NULL,			-- E' il n.ro di record soddisfacenti la ricerca superato il quale la funzione deve restituire errore di overflow
846        			FlgSenzaTotIn		IN		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se 1 significa che non è richiesto come output il totale dei record soddisfacenti la ricerca (se la ricerca è paginata per la prima pagina il totale viene calcolato comunque, per le successive no)
847        			NroTotRecOut		OUT		PLS_INTEGER,					-- E' il n.ro di record complessivi trovati (valorizzato solo se FlgSenzaTotIn è 0 o NULL o se si estrae la prima pagina)
848             			NroRecInPaginaOut 	OUT   	PLS_INTEGER,                     		-- E' il numero di record nella pagina (valorizzato solo se l'estrazione è paginata, ovvero se FlgSenzaPaginazioneIn 0 o NULL)
849        			------------- fine argomenti standard di tutte le funzioni di ricerca che devono restituire una lista --------------
850        			ListaXMLOut			OUT		CLOB,							-- Lista degli utenti-deleghe trovate(XML conforme a schema LISTA_STD.xsd)
851        																-- Ogni utente-delega è un tag Riga che contiene 7 colonne:
852        																-- 1: Id. dell'utente
853        																-- 2: Descrizione dell'utente
854        																-- 3: Username dell'utente
855        																-- 4: N.ro di matricola dell'utente
856        																-- 5: Data di inizio validità delega (in formato dato dal parametro di cong. FMT_STD_DATA)
857        																-- 6: Data di fine validità della delega (in formato dato dal parametro di cong. FMT_STD_DATA)
858        																-- 7: Natura/motivo della delega
859        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
860        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
861        			ErrMsgOut			OUT 		VARCHAR2)						-- Messaggio d'errore
862        			return PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine, altrimenti 0
863        
864        	/***** Funzione per decodificare una scrivania virtuale di cui sia noto l'identificativo univoco *****/
865        	function DecodeScrivaniaVirt(
866        			IdScrivaniaIn		IN 		DMT_SCRIVANIE_VIRTUALI.ID_SCRIVANIA%type,	-- (obblig.) Identificativo della scrivania virtuale
867        			TipoDecodificaIn		IN		VARCHAR2,						-- (obblig.) Tipo di decodifica richiesta.
868        																-- Valori possibili:
869        																-- <FULL> = Intestazione scrivania + eventuale descrizione utente che la occupa e suo titolo (se non già nell'intestazione) + ruolo che ha l'utente nella UO cui appartiene la scrivania (se non già nell'intestazione) + estremi della UO di appartenenza
870        																-- <INTESTAZIONE> = Intestazione della scrivania
871        																-- <DES_USER> = Denominazione dell''utente che la occupa
872        																-- <DES_RUOLO_USER> = Ruolo dell'utente quando la occupa
873        																-- <DENOMINAZIONE_UO> = Denominazione della UO in cui ricade (non preceduta da quelle delle UO superiori)
874        																-- <DENOMINAZIONE_UO_ESTESA> = Denominazione della UO in cui ricade preceduta da quelle di tutte le UO superiori (separate da " | ").
875        																-- <DENOMINAZIONE_UO_ESTESA_DA_LIV_n> = Denominazione della UO in cui ricade preceduta da quelle delle UO superiori di livello >=n (con n numero intero pari ad un livello delle struttura organizzativa)
876        																-- <LIVELLI_UO> = N.ri livello della UO in cui ricade (separati dal separatore dei livelli valido per il soggetto produttore/AOO di appartenenza della UO)
877        																-- <LIVELLI_UO_DA_LIV_n> = N.ri livello della UO in cui ricade a partire dal n.ro del livello n-esimo (con n numero intero >1 pari ad un livello delle struttura organizzativa)
878        																-- Può anche essere una concatenazione dei valori precedenti (tutto ciò che è fuori dalle angle brackets si intende stringa fissa di separazione)
879        																-- ad es: <DENOMINAZIONE_UO> - <DES_RUOLO_USER> <DES_USER> significa che si richiedono la denominazione della UO di appartenenza seguita da ruolo e denominazione dell''utente che la occupa
880        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS')
881        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) per cui si richiede la decodifica della scrivania virtuale. Se non valorizzato si intende sysdate
882        			) return VARCHAR2;										-- Stringa con la decodifica; può essere NULL in caso di errore
883        
884        	/******* serve a ricercare una scrivania virtuale relativa ad un dato sogg. produttore o AOO a partire da Id. e/o dati della UO in cui si colloca e/o sua intestazione e/o dati di chi la occupa ******/
885        	/******* restituisce l'Id. della scrivania solo se a partire dagli estremi immessi riesce a identificarla univocamente													 ******/
886        	function FindScrivaniaVirt(
887        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- (obblig.) Identificativo del soggetto produttore o AOO cui è relativa la scrivania
888        			IdScrivaniaIn		IN 		DMT_SCRIVANIE_VIRTUALI.ID_SCRIVANIA%type DEFAULT NULL,
889        																-- Identificativo della scrivania
890        			IntestazioneScrivIn	IN		DMT_SCRIVANIE_VIRTUALI.INTESTAZIONE%type DEFAULT NULL,
891        																-- Intestazione della scrivania (o suo inizio; ricerca case insensitive in like).
892        			IdUOIn			IN		DMT_STRUTTURA_ORG.ID_UO%type DEFAULT NULL,-- Identificativo della UO in cui si trova la scrivania
893        			LivelliStrIn		IN		VARCHAR2 DEFAULT NULL,				-- Stringa con i n.ri livello della UO in cui si trova la scrivania da ricercare (tutti o solo alcuni; però se si specifica un livello è obbligatorio indicare tutti i livelli superiori; vanno indicati come appaiono nella GUI, ovvero romani se previsto, 0 o -- se nulli; vanno separati dal separatore dei livelli di UO valido per il soggetto produttore/AOO di appartenenza della UO)
894        			DesUOIn			IN		VARCHAR2 DEFAULT NULL,				-- Denominazione della UO in cui si trova la scrivania (o suo inizio; ricerca case insensitive in like). Può essere quella semplice o la concatenazione con separatore "|" delle denominazioni delle UO superiori + quella della UO
895        																-- ATTENZIONE: mentre la ricerca sulla denominazione semplice intende sempre che il valore in input sia un possibile inizio (aggiunge in automatico un % finale al valore quando fa la ricerca in like), quella sulla concatenzione no (il % finale non viene aggiunto in automatico, altrimenti le UO con sotto-UO non sarebbero mai individuabili univocamente attraverso il solo filtro sulla denominazione)
896        			IdUserIn			IN		DMT_USERS.ID_USER%type DEFAULT NULL,	-- Identificativo dell'utente che la occupa
897        			DesUserIn			IN		DMT_USERS.DES_USER%type DEFAULT NULL,	-- Denominazione dell'utente che la occupa (o suo inizio; ricerca case insensitive in like).
898        			IdRuoloIn			IN		DMT_RUOLI_AMM.ID_RUOLO_AMM%type DEFAULT NULL,
899        																-- Identificativo del ruolo che ricopre l'utente quando la occupa
900        			DesRuoloUserIn		IN		DMT_RUOLI_AMM.DES_RUOLO_AMM%type DEFAULT NULL,
901        																-- Descrizione del ruolo che ricopre l'utente quando la occupa (o suo inizio; ricerca case insensitive in like).
902        			FlgSoloVldIn		IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL) Indica se la scrivania deve essere valida (1) o no
903        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'),
904        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) di riferimento al quale la scrivania deve avere gli estremi specificati in input. Se non valorizzato si intende sysdate
905        			FlgLivelliParzIn		IN		PLS_INTEGER DEFAULT NULL			-- (valori 1/0) Se 1 significa che se sono valorizzati solo alcuni livelli (i primi) i successivi sono da intendersi come non specificati e quindi possono avere qualsiasi valore
906        																-- Se 0 o NULL significa che i livelli non specificati dopo i primi devono essere non valorizzati
907        			) return INTEGER;											-- restituisce ID_SCRIVANIA della scrivania se individuata, altrimenti NULL
908        
909        	---overload della precedente, con l'unica differenza che i livelli sono passati come XML anzichè come stringa
910        	function FindScrivaniaVirt(
911        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- (obblig.) Identificativo del soggetto produttore o AOO cui è relativa la scrivania
912        			IdScrivaniaIn		IN 		DMT_SCRIVANIE_VIRTUALI.ID_SCRIVANIA%type DEFAULT NULL,
913        																-- Identificativo della scrivania
914        			IntestazioneScrivIn	IN		DMT_SCRIVANIE_VIRTUALI.INTESTAZIONE%type DEFAULT NULL,
915        																-- Intestazione della scrivania (o suo inizio; ricerca case insensitive in like).
916        			IdUOIn			IN		DMT_STRUTTURA_ORG.ID_UO%type DEFAULT NULL,-- Identificativo della UO in cui si trova la scrivania
917        			LivelliXMLIn		IN		CLOB DEFAULT NULL,				-- XML (secondo schema LISTA_STD.xsd) con i n.ri livello della UO in cui si trova la scrivania (tutti o alcuni; però se si specifica un livello è obbligatorio indicare tutti i livelli superiori)(come appaiono nella GUI, ovvero romani se previsto, 0 o -- se nulli).
918        																-- Ogni livello è un tag Riga che contiene 2 colonne:
919        																-- 1: Nro (intero), con il livello gerarchico,
920        																-- 2: Codice (alfanumerico) , con il n.ro identifcativo del livello
921        			DesUOIn			IN		VARCHAR2 DEFAULT NULL,				-- Denominazione della UO in cui si trova la scrivania (o suo inizio; ricerca case insensitive in like). Può essere quella semplice o la concatenazione con separatore "|" delle denominazioni delle UO superiori + quella della UO
922        																-- ATTENZIONE: mentre la ricerca sulla denominazione semplice intende sempre che il valore in input sia un possibile inizio (aggiunge in automatico un % finale al valore quando fa la ricerca in like), quella sulla concatenzione no (il % finale non viene aggiunto in automatico, altrimenti le UO con sotto-UO non sarebbero mai individuabili univocamente attraverso il solo filtro sulla denominazione)
923        			IdUserIn			IN		DMT_USERS.ID_USER%type DEFAULT NULL,	-- Identificativo dell'utente che la occupa
924        			DesUserIn			IN		DMT_USERS.DES_USER%type DEFAULT NULL,	-- Denominazione dell'utente che la occupa (o suo inizio; ricerca case insensitive in like).
925        			IdRuoloIn			IN		DMT_RUOLI_AMM.ID_RUOLO_AMM%type DEFAULT NULL,
926        																-- Identificativo del ruolo che ricopre l'utente quando la occupa
927        			DesRuoloUserIn		IN		DMT_RUOLI_AMM.DES_RUOLO_AMM%type DEFAULT NULL,
928        																-- Descrizione del ruolo che ricopre l'utente quando la occupa (o suo inizio; ricerca case insensitive in like).
929        			FlgSoloVldIn		IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL) Indica se la scrivania deve essere valida (1) o no
930        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'),
931        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) di riferimento al quale la scrivania deve avere gli estremi specificati in input. Se non valorizzato si intende sysdate
932        			FlgLivelliParzIn		IN		PLS_INTEGER DEFAULT NULL			-- (valori 1/0) Se 1 significa che se sono valorizzati solo alcuni livelli (i primi) i successivi sono da intendersi come non specificati e quindi possono avere qualsiasi valore
933        																-- Se 0 o NULL significa che i livelli non specificati dopo i primi devono essere non valorizzati
934        			) return INTEGER;											-- restituisce ID_SCRIVANIA della scrivania se individuata, altrimenti NULL
935        
936        	/***** Funzione per ottenere la decodifica di un ruolo contestualizzato, ovvero eventualmente circoscritto a UO di un certo livello e/o ad una specifica UO *****/
937        	/***** Es: Dirigente; Dirigenti di Settore; Dirigenti del Settore dalla UO...; Dirigenti dei Servizi dell'Area ...							*****/
938        	function DecodeRuoloContestualizzato (
939        			IdRuoloAmmIn		IN		DMT_RUOLI_AMM.ID_RUOLO_AMM%type,		-- (obblig.) Identificativo del ruolo amministrativo da decodificare
940        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type DEFAULT NULL,
941        																-- (obblig. e gestito solo se VsLivelloSOIn o VsCodTipoUOIn è valorizzato e VsIdUOIn no) Identificativo del soggetto produttore o AOO in cui dare la decodifica
942        			VsLivelloSOIn		IN		INTEGER DEFAULT NULL,				-- Indica il livello della struttura organizzativa in cui si espleta il ruolo (intero da 1 a n; 1 è il più alto)
943        			VsCodTipoUOIn		IN		VARCHAR2 DEFAULT NULL,				-- (alternativo a VsLivelloSOIn) Indica il codice del tipo di UO in cui si espleta il ruolo (valori da dictionary entry TIPO_UO)
944        			VsIdUOIn			IN		DMT_STRUTTURA_ORG.ID_UO%type DEFAULT NULL,-- Id. della UO in cui si espleta il ruolo o da cui risalire alla/e UO (con il livello o tipo indicati) in cui si espleta
945        			FlgInclSottoUOIn		IN		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se 1 indica che il ruolo può espletarsi anche nelle sotto-UO di VsIdUOIn o della/e UO a cui si risale da VsIdUOIn
946        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS')
947        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) per cui si richiede la decodifica. Se non valorizzato si intende sysdate
948        			) return VARCHAR2;										-- restituisce la descrizione del ruolo contestulaizzato o NULL in caso di errore
949        
950        	/***** Funzione per decodificare una classificazione di cui sia noto l'identificativo univoco *****/
951        	function DecodeClassificazione(
952        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- Identificativo del soggetto produttore o AOO in cui si sta lavorando. Se NULL significa che ci si è autenticati nel dominio "schema"
953        			IdClassificazioneIn	IN 		DMT_TITOLARIO.ID_CLASSIFICAZIONE%type,	-- (obblig.) Identificativo della classificazione
954        			TipoDecodificaIn		IN		VARCHAR2,						-- (obblig.) Tipo di decodifica richiesta.
955        																-- Valori possibili:
956        																-- <DESCRIZIONE> = Descrizione della classificazione (non preceduta da quelle delle classificazioni superiori)
957        																-- <DESCRIZIONE_ESTESA> = Descrizione della classificazione preceduta da quelle di tutte le classificazioni superiori (separate da " | ").
958        																-- <DESCRIZIONE_ESTESA_DA_LIV_n> = Descrizione della classificazione preceduta da quelle delle classificazioni superiori di livello >=n (con n numero intero pari ad un livello del titolario)
959        																-- <LIVELLI> = N.ri livello della classificazione (separati dal separatore dei livelli valido per il soggetto produttore/AOO IdSpAOOIn)
960        																-- <LIVELLI_DA_LIV_n> = N.ri livello della classificazione a partire dal n.ro del livello n-esimo (con n numero intero >1 pari ad un livello del titolario)
961        																-- Può anche essere una concatenazione dei valori precedenti (tutto ciò che è fuori dalle angle brackets si intende stringa fissa di separazione)
962        																-- ad es: <LIVELLI> - <DENOMINAZIONE> significa che si richiedono livelli e denominazione separati da " - "
963        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS')
964        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) per cui si richiede la decodifica della classificazione. Se non valorizzato si intende sysdate
965        			) return VARCHAR2;										-- Stringa con la decodifica; può essere NULL in caso di errore
966        
967        	/******* serve a ricercare classificazioni (eventualmente relative ad un dato sogg. produttore o AOO) a partire da Id. e/o stringa con i codici di livello e/o denominazione 		******/
968        	/******* restituisce gli id. della/e classificazioni trovate																				******/
969        	function FindClassificazioni(
970        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- Identificativo del soggetto produttore o AOO per cui deve valere la classificazione
971        			IdClassificazioneIn	IN 		DMT_TITOLARIO.ID_CLASSIFICAZIONE%type DEFAULT NULL,
972        																-- Identificativo della classificazione
973        			LivelliStrIn		IN		VARCHAR2 DEFAULT NULL,				-- Stringa con i n.ri livello della classificazione da ricercare (tutti o solo alcuni; però se si specifica un livello è obbligatorio indicare tutti i livelli superiori; vanno indicati come appaiono nella GUI, ovvero romani se previsto, 0 o -- se nulli; vanno separati dal separatore dei livelli di classificazione valido per il soggetto produttore/AOO IdSpAOOIn)
974        																				-- In alternativa può contenere Id Indice di Egrammata. Se esistono classifica e indice con id. indice = livelli classifica considera Id Indice Egrammata
975        			DesClassificazioneIn	IN		VARCHAR2 DEFAULT NULL,				-- Descrizione della classificazione (o suo inizio; ricerca case insensitive in like). Può essere quella semplice o la concatenazione con separatore "|" delle descrizioni delle calssificazioni superiori + quella della classificazione
976        																-- ATTENZIONE: mentre la ricerca sulla descrizione semplice intende sempre che il valore in input sia un possibile inizio (aggiunge in automatico un % finale al valore quando fa la ricerca in like), quella sulla concatenzione no (il % finale non viene aggiunto in automatico, altrimenti le classificazioni con "figli" non sarebbero mai individuabili univocamente attraverso il solo filtro sulla denominazione)
977        			FlgSoloVldIn		IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL) Indica se la classificazione deve essere valida (1) o no (al timestamp TsRifIn)
978        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'),
979        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) di riferimento al quale la classificazione deve avere gli estremi specificati in input. Se non valorizzato si intende sysdate
980        			LivelloGerarchicoIn	IN		DMT_TITOLARIO.LIVELLO_GERARCHICO%type DEFAULT NULL,
981        																-- Livello gerarchico (intero da 1 a n; 1 è il più alto) della classificazione
982        			FlgLivelliParzIn		IN		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0) Se 1 significa che se sono valorizzati solo alcuni livelli (i primi) i successivi sono da intendersi come non specificati e quindi possono avere qualsiasi valore
983        																-- Se 0 o NULL significa che i livelli non specificati dopo i primi devono essere non valorizzati
984        			IdPianoClassifIn		IN		DMT_PIANI_CLASSIF.ID_PIANO_CLASSIF%type DEFAULT NULL
985        																		-- Id. del piano di classificazione in cui cercare. Se non specificato si cerca in quello attualmente in vigore per il soggetto produttore/AOO
986        			) return DMTO_ID;											-- restituisce una lista con gli id. delle classificazioni trovate. In caso di errore la lista è NULL
987        
988        	/******* serve a ricercare una classificazione (eventualmente relativa ad un dato sogg. produttore o AOO) a partire da Id. e/o stringa con i codici di livello e/o denominazione 	******/
989        	/******* restituisce l'Id. della classificazione solo se a partire dagli estremi immessi riesce a identificarla univocamente										******/
990        	function FindClassificazione(
991        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- Identificativo del soggetto produttore o AOO per cui deve valere la classificazione
992        			IdClassificazioneIn	IN 		DMT_TITOLARIO.ID_CLASSIFICAZIONE%type DEFAULT NULL,
993        																-- Identificativo della classificazione
994        			LivelliStrIn		IN		VARCHAR2 DEFAULT NULL,				-- Stringa con i n.ri livello della classificazione da ricercare (tutti o solo alcuni; però se si specifica un livello è obbligatorio indicare tutti i livelli superiori; vanno indicati come appaiono nella GUI, ovvero romani se previsto, 0 o -- se nulli; vanno separati dal separatore dei livelli di classificazione valido per il soggetto produttore/AOO IdSpAOOIn)
995        																				-- In alternativa può contenere Id Indice di Egrammata. Se esistono classifica e indice con id. indice = livelli classifica considera Id Indice Egrammata
996        			DesClassificazioneIn	IN		VARCHAR2 DEFAULT NULL,				-- Descrizione della classificazione (o suo inizio; ricerca case insensitive in like). Può essere quella semplice o la concatenazione con separatore "|" delle descrizioni delle calssificazioni superiori + quella della classificazione
997        																-- ATTENZIONE: mentre la ricerca sulla descrizione semplice intende sempre che il valore in input sia un possibile inizio (aggiunge in automatico un % finale al valore quando fa la ricerca in like), quella sulla concatenzione no (il % finale non viene aggiunto in automatico, altrimenti le classificazioni con "figli" non sarebbero mai individuabili univocamente attraverso il solo filtro sulla denominazione)
998        			FlgSoloVldIn		IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL) Indica se la classificazione deve essere valida (1) o no (al timestamp TsRifIn)
999        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'),
1000        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) di riferimento al quale la classificazione deve avere gli estremi specificati in input. Se non valorizzato si intende sysdate
1001        			LivelloGerarchicoIn	IN		DMT_TITOLARIO.LIVELLO_GERARCHICO%type DEFAULT NULL,
1002        																-- Livello gerarchico (intero da 1 a n; 1 è il più alto) della classificazione
1003        			FlgLivelliParzIn		IN		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0) Se 1 significa che se sono valorizzati solo alcuni livelli (i primi) i successivi sono da intendersi come non specificati e quindi possono avere qualsiasi valore
1004        																-- Se 0 o NULL significa che i livelli non specificati dopo i primi devono essere non valorizzati
1005        			IdPianoClassifIn		IN		DMT_PIANI_CLASSIF.ID_PIANO_CLASSIF%type DEFAULT NULL
1006        																		-- Id. del piano di classificazione in cui cercare. Se non specificato si cerca in quello attualmente in vigore per il soggetto produttore/AOO
1007        			) return INTEGER;											-- restituisce ID_CLASSIFICAZIONE della classificazione se individuata, altrimenti NULL
1008        
1009        	---overload della precedente, con l'unica differenza che i livelli sono passati come XML anzichè come stringa
1010        	function FindClassificazione(
1011        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- Identificativo del soggetto produttore o AOO per cui deve valere la classificazione
1012        			IdClassificazioneIn	IN 		DMT_TITOLARIO.ID_CLASSIFICAZIONE%type DEFAULT NULL,
1013        																-- Identificativo della classificazione
1014        			LivelliXMLIn		IN		CLOB DEFAULT NULL,				-- XML (secondo schema LISTA_STD.xsd) con i n.ri livello della classificazione da ricercare (tutti o alcuni; però se si specifica un livello è obbligatorio indicare tutti i livelli superiori)(come appaiono nella GUI, ovvero romani se previsto, 0 o -- se nulli).
1015        																-- Ogni livello è un tag Riga che contiene 2 colonne:
1016        																-- 1: Nro (intero), con il livello gerarchico,
1017        																-- 2: Codice (alfanumerico), con il n.ro identifcativo del livello
1018        			DesClassificazioneIn	IN		VARCHAR2 DEFAULT NULL,				-- Descrizione della classificazione (o suo inizio; ricerca case insensitive in like). Può essere quella semplice o la concatenazione con separatore "|" delle descrizioni delle calssificazioni superiori + quella della classificazione
1019        																-- ATTENZIONE: mentre la ricerca sulla descrizione semplice intende sempre che il valore in input sia un possibile inizio (aggiunge in automatico un % finale al valore quando fa la ricerca in like), quella sulla concatenzione no (il % finale non viene aggiunto in automatico, altrimenti le classificazioni con "figli" non sarebbero mai individuabili univocamente attraverso il solo filtro sulla denominazione)
1020        			FlgSoloVldIn		IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL) Indica se la classificazione deve essere valida (1) o no (al timestamp TsRifIn)
1021        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'),
1022        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) di riferimento al quale la classificazione deve avere gli estremi specificati in input. Se non valorizzato si intende sysdate
1023        			LivelloGerarchicoIn	IN		DMT_TITOLARIO.LIVELLO_GERARCHICO%type DEFAULT NULL,
1024        																-- Livello gerarchico (intero da 1 a n; 1 è il più alto) della classificazione
1025        			FlgLivelliParzIn		IN		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0) Se 1 significa che se sono valorizzati solo alcuni livelli (i primi) i successivi sono da intendersi come non specificati e quindi possono avere qualsiasi valore
1026        																-- Se 0 o NULL significa che i livelli non specificati dopo i primi devono essere non valorizzati
1027        			IdPianoClassifIn		IN		DMT_PIANI_CLASSIF.ID_PIANO_CLASSIF%type DEFAULT NULL
1028        																		-- Id. del piano di classificazione in cui cercare. Se non specificato si cerca in quello attualmente in vigore per il soggetto produttore/AOO
1029        			) return INTEGER;											-- restituisce ID_CLASSIFICAZIONE della classificazione se individuata, altrimenti NULL
1030        
1031        	--- funzione per trovare la classificazione corrispondente ad un indice eGrammata il cui ID sia fornito in input
1032        	function FindClassifExIndiceEgr(
1033        			IdIndiceEgrIn			IN			DMT_TITOLARIO.ID_INDICE_EGR%type,					-- (obblig.) Id. indice eGrammata della classifica da restituire
1034        			FlgSoloVldIn			IN			PLS_INTEGER DEFAULT 1,								-- (valori 1/0/NULL) Indica se la classificazione deve essere valida (1) o può anche essere non valida
1035        			IdPianoClassifIO		IN OUT		DMT_PIANI_CLASSIF.ID_PIANO_CLASSIF%type, 			-- Id. del piano di classificazione in cui cercare. Se non specificato si cerca in tutti quelli del soggetto produttore/AOO
1036        			IdSpAOOIO				IN OUT		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,				-- (obblig.)Identificativo del soggetto produttore o AOO per cui trovare la classificazione.
1037        			IdClassificazioneOut	OUT 		DMT_TITOLARIO.ID_CLASSIFICAZIONE%type,				-- Id. della clasificazione corrispondente all'indice eGrammata
1038        			LivelliClassifOut		OUT			VARCHAR2,											-- Livelli(così come vanno mostrati nella GUI) della clasificazione corrispondente all'indice eGrammata
1039        			DesClassificazioneOut	OUT			VARCHAR2,											-- Descrizione della clasificazione corrispondente all'indice eGrammata
1040        			ErrContextOut			OUT		VARCHAR2,												-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
1041        			ErrCodeOut				OUT		PLS_INTEGER,											-- N.ro errore di uscita
1042        			ErrMsgOut				OUT 		VARCHAR2											-- Messaggio d'errore
1043        			) return PLS_INTEGER;																	-- Vale 1 la classificazione è stata trovata, altrimenti 0
1044        
1045        	--- overload della FindDocType: restituisce sempre 1 e l'id del doc type e' restituito come parametro di out nella firma
1046        	function FindDocType_J(
1047        			                 IdSpAOOIn			  IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	                       -- Identificativo del soggetto produttore o AOO per cui deve esistere la tipologia
1048        			                 IdDocTypeIn			IN 		DMT_DOC_TYPES.ID_DOC_TYPE%type DEFAULT NULL,                 -- Identificativo della tipologia
1049        			                 NomeDocTypeIn		IN		DMT_DOC_TYPES.NOME_DOC_TYPE%type DEFAULT NULL,               -- Nome della tipologia (o suo inizio; ricerca case insensitive in like).
1050        			                 FlgSoloVldIn		  IN		PLS_INTEGER DEFAULT 1,				                               -- (valori 1/0/NULL) Indica se la tipologia deve essere valida (1) o no
1051        			                 TsRifIn			    IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'),  -- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) di riferimento al quale la tipologia deve avere gli estremi specificati in input. Se non valorizzato si intende sysdate
1052        			                 ProvCIDocTypeIn	IN		DMT_DOC_TYPES.PROV_CI_DOC_TYPE%type DEFAULT NULL,
1053        			                 IdDocTypeOut	    OUT		INTEGER                                                      -- Identificativo del doc type
1054                               ) return INTEGER; 																			-- sempre 1 salvo in caso di eccezione (nel qual caso è 0)
1055        
1056        
1057        	/******* serve a ricercare una tipologia documentale (eventualmente relativa ad un dato sogg. produttore o AOO) a partire da id. e/o nome					 ******/
1058        	/******* restituisce l'Id. della tipologia solo se a partire dagli estremi immessi riesce a identificarla univocamente			 					 ******/
1059        	function FindDocType(
1060        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- Identificativo del soggetto produttore o AOO per cui deve esistere la tipologia
1061        			IdDocTypeIn			IN 		DMT_DOC_TYPES.ID_DOC_TYPE%type DEFAULT NULL,
1062        																-- Identificativo della tipologia
1063        			NomeDocTypeIn		IN		DMT_DOC_TYPES.NOME_DOC_TYPE%type DEFAULT NULL,
1064        																-- Nome della tipologia (o suo inizio; ricerca case insensitive in like).
1065        			FlgSoloVldIn		IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL) Indica se la tipologia deve essere valida (1) o no
1066        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'),
1067        																	-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) di riferimento al quale la tipologia deve avere gli estremi specificati in input. Se non valorizzato si intende sysdate
1068        			ProvCIDocTypeIn		IN		DMT_DOC_TYPES.PROV_CI_DOC_TYPE%type DEFAULT NULL
1069        																	-- Cod. della tipologia nel sistema da cui proviene (o suo inizio; ricerca case insensitive in like).
1070        			) return INTEGER;											-- restituisce ID_DOC_TYPE della tiplogia se individuata, altrimenti NULL
1071        
1072        	/******* serve a ricercare una tipologia di folder (eventualmente relativa ad un dato sogg. produttore o AOO) a partire da id. e/o nome					 ******/
1073        	/******* restituisce l'Id. della tipologia solo se a partire dagli estremi immessi riesce a identificarla univocamente			 					 ******/
1074        	function FindFolderType(
1075        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- Identificativo del soggetto produttore o AOO per cui deve esistere la tipologia
1076        			IdFolderTypeIn		IN 		DMT_FOLDER_TYPES.ID_FOLDER_TYPE%type DEFAULT NULL,
1077        																-- Identificativo della tipologia
1078        			NomeFolderTypeIn		IN		DMT_FOLDER_TYPES.NOME_FOLDER_TYPE%type DEFAULT NULL,
1079        																-- Nome della tipologia (o suo inizio; ricerca case insensitive in like).
1080        			FlgSoloVldIn		IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL) Indica se la tipologia deve essere valida (1) o no
1081        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS')
1082        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) di riferimento al quale la tipologia deve avere gli estremi specificati in input. Se non valorizzato si intende sysdate
1083        			) return INTEGER;											-- restituisce ID_FOLDER_TYPE della tiplogia se individuata, altrimenti NULL
1084        
1085        	/******* serve a ricercare una tipologia di processo/procedimento (eventualmente relativa ad un dato sogg. produttore o AOO) a partire da id. e/o nome		******/
1086        	/******* restituisce l'Id. della tipologia solo se a partire dagli estremi immessi riesce a identificarla univocamente			 					******/
1087        	function FindProcType(
1088        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- Identificativo del soggetto produttore o AOO per cui deve esistere la tipologia
1089        			IdProcessTypeIn		IN 		DMT_PROCESS_TYPES.ID_PROCESS_TYPE%type DEFAULT NULL,
1090        																-- Identificativo della tipologia
1091        			NomeProcessTypeIn		IN		DMT_PROCESS_TYPES.NOME_PROCESS_TYPE%type DEFAULT NULL,
1092        																-- Nome della tipologia (o suo inizio; ricerca case insensitive in like).
1093        			FlgSoloVldIn		IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL) Indica se la tipologia deve essere valida (1) o no
1094        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS')
1095        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) di riferimento al quale la tipologia deve avere gli estremi specificati in input. Se non valorizzato si intende sysdate
1096        			) return INTEGER;											-- restituisce ID_PROCESS_TYPE della tiplogia se individuata, altrimenti NULL
1097        
1098        	/******* serve a ricercare una tipologia di processo/procedimento a partire dal nome	del tipo di documento iniziale	******/
1099        	/******* restituisce l'Id. del tipo procedimento e l'id. del tipo documento finale del procedimento			 					******/
1100        	function FindProcTyFromNomeDocTypeIni(
1101        			IdSpAOOIn				IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- Identificativo del soggetto produttore o AOO per cui deve esistere la tipologia
1102        			NomeDocTypeIniIn		IN		DMT_DOC_TYPES.NOME_DOC_TYPE%type,		-- Nome del tipo documento iniziale
1103        			IdProcessTypeOut		OUT		DMT_PROCESS_TYPES.ID_PROCESS_TYPE%type,	-- Id. del tipo di processo/procedimento
1104        			IdDocTypeFinaleOut		OUT		DMT_DOC_TYPES.ID_DOC_TYPE%type,			-- Id. del tipo del documento finale del processo/procedimento
1105        			NomeDocTypeFinaleOut	OUT		DMT_DOC_TYPES.NOME_DOC_TYPE%type,		-- Nome del tipo del documento finale del processo/procedimento
1106        			ErrContextOut			OUT		VARCHAR2,								-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
1107        			ErrCodeOut				OUT		PLS_INTEGER,							-- N.ro errore di uscita
1108        			ErrMsgOut				OUT 		VARCHAR2							-- Messaggio d'errore
1109        			) return PLS_INTEGER;													-- restituisce 1 in caso di successo, 0 in caso di errore
1110        
1111        	/******* serve a ricercare a partire da id. e/o nome una tipologia di processo/procedimento che sia avviabile dall'utente di lavoro 	********/
1112        	/******* restituisce l'Id. della tipologia solo se a partire dagli estremi immessi riesce a identificarne univocamente una avviabile	********/
1113        	function FindProcTypeDaAvviare(
1114        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,
1115        																-- (obblig). Codice identificativo del token di connessione
1116        			IdUserLavoroIn		IN		DMT_USERS.ID_USER%type,				-- Identificativo dell'utente di lavoro (se non valorizzato si intende che sia l'utente connesso)
1117        			IdProcessTypeIO		IN OUT 	DMT_PROCESS_TYPES.ID_PROCESS_TYPE%type, 	-- Identificativo della tipologia (in output può non essere valorizzato solo in caso di errore)
1118        			NomeProcessTypeIn		IN		DMT_PROCESS_TYPES.NOME_PROCESS_TYPE%type DEFAULT NULL,
1119        																-- Nome della tipologia (o suo inizio; ricerca case insensitive in like senza forzare % finale).
1120        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
1121        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
1122        			ErrMsgOut			OUT 		VARCHAR2						-- Messaggio d'errore
1123        			) return PLS_INTEGER;										-- Vale 1 se l'individuazione è andata a buon fine, altrimenti 0
1124        
1125        	/******* serve a ricercare un formato elettronico ammesso(eventualmente relativa ad un dato sogg. produttore o AOO) a partire da id. e/o nome e/o estensione	******/
1126        	/******* restituisce l'Id. del formato solo se a partire dagli estremi immessi riesce a identificarlo univocamente			 					******/
1127        	function FindFormatoElAmmesso(
1128        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- Identificativo del soggetto produttore o AOO per cui deve esistere la tipologia
1129        			IdFormatoElIn		IN 		DMT_FORMATI_EL_AMMESSI.ID_FORMATO_EL%type DEFAULT NULL,
1130        																-- Identificativo del formato
1131        			NomeFormatoElIn		IN		DMT_FORMATI_EL_AMMESSI.NOME_FORMATO%type DEFAULT NULL,
1132        																-- Nome del formato (o suo inizio; ricerca case insensitive in like).
1133        			EstensioneIn		IN		VARCHAR2 DEFAULT NULL,				-- Estensione associata al formato (ricerca esatta case-insensitive)
1134        			FlgSoloAmmIn		IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL) Indica se il formato deve essere ammesso (1) o no
1135        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'),
1136        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) di riferimento al quale il formato deve avere gli estremi specificati in input. Se non valorizzato si intende sysdate
1137        			FlgNoPercFinaleSuNomeIn	IN		PLS_INTEGER	DEFAULT NULL,			-- (valori 1/0/NULL) Se 1 la ricerca sul nome non forza il % finale (a meno che non ci sia espressamente)
1138        			MimeTypeIn			IN		DMT_FORMATI_EL_AMMESSI.MIMETYPE%type DEFAULT NULL
1139        																-- mimetype del formato (ricerca case-sensitive esatta)
1140        			) return INTEGER;											-- restituisce ID_FORMATO_EL del formato se individuato, altrimenti NULL
1141        
1142        	/******* serve a ricercare un tipo di registrazione/numerazione di unità doc. (eventualmente relativa ad un dato sogg. produttore o AOO) a partire da id. e/o descrizione e/o categoria + sigla	******/
1143        	/******* restituisce l'Id. del tipo solo se a partire dagli estremi immessi riesce a identificarlo univocamente			 											******/
1144        	function FindTipoRegNumUD(
1145        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- Identificativo del soggetto produttore o AOO per cui deve esistere il tipo di registrazione/numerazione
1146        			IdTipoRegNumIn		IN 		DMT_TIPI_REGISTRAZIONE.ID_TP_REGISTRAZIONE%type DEFAULT NULL,
1147        																-- Identificativo del tipo di registrazione/numerazione di unità doc.
1148        			CodCategoriaIn		IN		DMT_TIPI_REGISTRAZIONE.COD_CATEGORIA%type DEFAULT NULL,
1149        																-- Codice della categoria del tipo di registrazione/numerazione (protocollo gen, repertorio ecc) (ricerca esatta case-insensitive)
1150        			SiglaIn			IN		DMT_TIPI_REGISTRAZIONE.SIGLA%type DEFAULT NULL,
1151        																-- Sigla del tipo di registrazione/numerazione (ricerca esatta case-insensitive)
1152        			DesTipoRegNumIn		IN		DMT_TIPI_REGISTRAZIONE.DESCRIZIONE%type DEFAULT NULL,
1153        																-- Descrizione del tipo di registrazione/numerazione (o suo inizio; ricerca case insensitive in like).
1154        			FlgSoloVldIn		IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL) Indica se la tipologia deve essere valida (1) o no
1155        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'),
1156        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) di riferimento al quale la tipologia deve avere gli estremi specificati in input. Se non valorizzato si intende sysdate
1157        			FlgNoPercFinaleSuDesIn	IN		PLS_INTEGER	DEFAULT NULL			-- (valori 1/0/NULL) Se 1 la ricerca sulla descrizione non forza il % finale (a meno che non ci sia espressamente)
1158        			) return INTEGER;											-- restituisce ID_TIPO_REGISTRAZIONE della tiplogia se individuata, altrimenti NULL
1159        
1160        	/******* serve a ricercare un modello di registrazione di entità (eventualmente relativa ad un dato sogg. produttore o AOO e specifico per la reg. di entità di un dato tipo) a partire da id. e/o nome 			******/
1161        	/******* restituisce l'Id. del modello solo se a partire dagli estremi immessi riesce a identificarlo univocamente			 														******/
1162        	function FindModelloReg(
1163        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- Identificativo del soggetto produttore o AOO per cui deve esistere il modello
1164        			CodEntitaTargetIn		IN		DMT_MODELLI_REG_ENTITA.COD_TIPO_ENTITA_TARGET%type DEFAULT NULL,
1165        																-- Codice che identifica il tipo di entità per cui è il modello
1166        			IdModelloRegIn		IN		DMT_MODELLI_REG_ENTITA.ID_MODELLO_REG%type  DEFAULT NULL,
1167        																-- Identificativo univoco del modello di registrazione
1168        			NomeModelloRegIn		IN		DMT_MODELLI_REG_ENTITA.NOME_MODELLO_REG%type DEFAULT NULL,
1169        																-- Nome del modello di registrazione (o suo inizio; ricerca case insensitive in like)
1170        			FlgSoloVldIn		IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL) Indica se il modello deve essere valido (1) o no
1171        			FlgNoPercFinaleSuNomeIn	IN		PLS_INTEGER	DEFAULT NULL			-- (valori 1/0/NULL) Se 1 la ricerca sul nome non forza il % finale (a meno che non ci sia espressamente)
1172        			) return INTEGER;											-- restituisce ID_MODELLO_REG del modello se individuato, altrimenti NULL
1173        
1174        	/******* serve a ricercare un ruolo amministrativo a partire da id. e/o nome 							******/
1175        	/******* restituisce l'Id. del ruolo solo se a partire dagli estremi immessi riesce a identificarlo univocamente	******/
1176        	function FindRuoloAmm(
1177        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- Identificativo del soggetto produttore o AOO per cui deve esistere il ruolo
1178        			IdRuoloAmmIn		IN		DMT_RUOLI_AMM.ID_RUOLO_AMM%type  DEFAULT NULL,
1179        																-- Identificativo univoco del ruolo
1180        			DesRuoloAmmIn		IN		DMT_RUOLI_AMM.DES_RUOLO_AMM%type DEFAULT NULL,
1181        																-- Descrizione del ruolo (o suo inizio; ricerca case insensitive in like)
1182        			FlgSoloVldIn		IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL) Indica se il ruolo deve essere valido (1) o no
1183        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'),
1184        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) di riferimento al quale il ruolo deve avere gli estremi specificati in input. Se non valorizzato si intende sysdate
1185        			FlgNoPercFinaleSuDesIn	IN		PLS_INTEGER	DEFAULT NULL			-- (valori 1/0/NULL) Se 1 la ricerca sulla descrizione non forza il % finale (a meno che non ci sia espressamente)
1186        			) return INTEGER;											-- restituisce ID_RUOLO_AMM del ruolo se individuato, altrimenti NULL
1187        
1188        	/******* serve a ricercare un profilo di utente, UO o scrivania virtuale (senza nome o con, ovvero specifico o meno di un singolo utente/UO/scrivania) a partire da id. e/o nome 		******/
1189        	/******* restituisce l'Id. del profilo solo se a partire dagli estremi immessi riesce a identificarlo univocamente												******/
1190        	function FindProfilo(
1191        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- Identificativo del soggetto produttore o AOO per cui deve esistere il profilo
1192        			IdProfiloIn			IN		DMT_PROFILI.ID_PROFILO%type  DEFAULT NULL,
1193        																-- Identificativo univoco del profilo
1194        			NomeProfiloIn		IN		DMT_PROFILI.NOME_PROFILO%type DEFAULT NULL,
1195        																-- Nome del profilo (o suo inizio; ricerca case insensitive in like)
1196        			FlgTargetIn			IN		VARCHAR2 DEFAULT NULL,				-- (valori UT/UO/SV) Serve a ricercare solo profilo legato a utente/i (UT) o Unità Operativa (UO) o scrivania virtuale (SV)
1197        			FlgSoloGeneralizzatiIn	IN		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Indica se il profilo deve essere uno generalizzato (1), cioè agganciabile a più soggetti e quindi con un suo nome, o uno specifico di un singolo soggetto (senza nome)
1198        			FlgSoloVldIn		IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL) Indica se il profilo deve essere valido (1) o no
1199        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'),
1200        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) di riferimento al quale il profilo deve avere gli estremi specificati in input. Se non valorizzato si intende sysdate
1201        			FlgNoPercFinaleSuNomeIn	IN		PLS_INTEGER	DEFAULT NULL			-- (valori 1/0/NULL) Se 1 la ricerca sul nome non forza il % finale (a meno che non ci sia espressamente)
1202        			) return INTEGER;											-- restituisce ID_PROFILO del ruolo se individuato, altrimenti NULL
1203        
1204        	/******* serve a ricercare un gruppo di privilegi a partire da id. e/o nome 								******/
1205        	/******* restituisce l'Id. del gruppo solo se a partire dagli estremi immessi riesce a identificarlo univocamente		******/
1206        	function FindGruppoPrivilegi(
1207        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- Identificativo del soggetto produttore o AOO per cui deve esistere il gruppo di privilegi
1208        			IdGruppoIn			IN		DMT_GRUPPI_PRIVILEGI.ID_GRUPPO_PRIV%type DEFAULT NULL,
1209        																-- Identificativo univoco del gruppo di privilegi
1210        			NomeGruppoIn		IN		DMT_GRUPPI_PRIVILEGI.NOME_GRUPPO_PRIV%type DEFAULT NULL,
1211        																-- Nome del gruppo di privilegi (o suo inizio; ricerca case insensitive in like)
1212        			FlgSoloVldIn		IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL) Indica se il gruppo di privilegi deve essere valido (1) o no
1213        			FlgNoPercFinaleSuNomeIn	IN		PLS_INTEGER	DEFAULT NULL			-- (valori 1/0/NULL) Se 1 la ricerca sul nome non forza il % finale (a meno che non ci sia espressamente)
1214        			) return INTEGER;											-- restituisce ID_GRUPPO_PRIV del gruppo di privilegi se individuato, altrimenti NULL
1215        
1216        	/******* serve a ricercare un gruppo di soggetti interni (utenti/UO/scrivanie) a partire da id. e/o nome 			******/
1217        	/******* restituisce l'Id. del gruppo solo se a partire dagli estremi immessi riesce a identificarlo univocamente		******/
1218        	function FindGruppo(
1219        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- Identificativo del soggetto produttore o AOO per cui deve esistere il gruppo
1220        			IdGruppoIn			IN		DMT_GRUPPI.ID_GRUPPO%type DEFAULT NULL,
1221        																-- Identificativo univoco del gruppo
1222        			NomeGruppoIn		IN		DMT_GRUPPI.NOME_GRUPPO%type DEFAULT NULL,
1223        																-- Nome del gruppo (o suo inizio; ricerca case insensitive in like)
1224        			FlgSoloVldIn		IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL) Indica se il gruppo deve essere valido (1) o no (al timestamp indicato nell'argomento successivo)
1225        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'),
1226        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) di riferimento al quale il gruppo deve essere valido ed evere gli estremi indicati in input. Se non valorizzato si intende sysdate
1227        			FlgNoPercFinaleSuNomeIn	IN		PLS_INTEGER	DEFAULT NULL,			-- (valori 1/0/NULL) Se 1 la ricerca sul nome non forza il % finale (a meno che non ci sia espressamente)
1228        			ProvCIGruppoIn		IN		DMT_GRUPPI.PROV_CI_GRUPPO%type DEFAULT NULL
1229        																	-- Codice origine del gruppo (ricerca case-sensitive esatta)
1230        			) return INTEGER;											-- restituisce ID_GRUPPO del gruppo se individuato, altrimenti NULL
1231        
1232        	/********* Funzione per ottenere l'identificativo di un'unità documentaria a partire dagli estremi di una sua registrazione/numerazione *************/
1233        	function GetIdUDFromEstremiRegNum(
1234        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,
1235        																			-- (obblig.) Identificativo del soggetto produttore o AOO cui è relativa l'UD
1236        			CodCategoriaRegIn		IN		VARCHAR2 DEFAULT NULL,			-- Codice della categoria di registrazione/numerazione dell'unità documentaria
1237        			SiglaRegIn			IN		VARCHAR2 DEFAULT NULL,				-- Sigla di registrazione/numerazione dell'unità documentaria
1238        			AnnoRegIn			IN		PLS_INTEGER DEFAULT NULL,			-- Anno di registrazione/numerazione dell'unità documentaria
1239        			NumRegIn			IN		PLS_INTEGER DEFAULT NULL,			-- (obblig.)  N.ro di registrazione/numerazione dell'unità documentaria
1240        			SubNumRegIn			IN		VARCHAR2 DEFAULT NULL)				-- Sub del n.ro di registrazione/numerazione dell'unità documentaria
1241        			return INTEGER;													-- Identificativo dell'unità documentaria trovata
1242        																			-- vale NULL in caso di errore o unità non trovata univocamente
1243        
1244        	/******* serve a ricercare un'unità documentaria (in un dato dominio) a partire da Id. e/o estremi di una sua registrazione/numerazione 		******/
1245        	/******* restituisce l'Id. dell'unità documentaria solo se a partire dagli estremi immessi riesce a identificarla univocamente			******/
1246        	function FindUD(
1247        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- (obblig.) Identificativo del soggetto produttore o AOO cui è relativa l'UD
1248        			IdUDIn			IN		INTEGER DEFAULT NULL,						-- Identificativo unità documentaria
1249        			CodCategoriaRegIn		IN		VARCHAR2 DEFAULT NULL,				-- Codice della categoria di registrazione/numerazione dell'unità documentaria
1250        			SiglaRegIn			IN		VARCHAR2 DEFAULT NULL,					-- Sigla di registrazione/numerazione dell'unità documentaria
1251        			AnnoRegIn			IN		PLS_INTEGER DEFAULT NULL,				-- Anno di registrazione/numerazione dell'unità documentaria
1252        			NumRegIn			IN		INTEGER DEFAULT NULL,					-- N.ro di registrazione/numerazione dell'unità documentaria
1253        			CodApplOwnerIn		IN		VARCHAR2 DEFAULT NULL,					-- la ricerca viene ristretta alle UD della data applicazione
1254        			CodIstApplOwnerIn	IN		VARCHAR2 DEFAULT NULL,					-- la ricerca viene ristretta alle UD della data istanza di applicazione
1255        			SubNumRegIn			IN		VARCHAR2 DEFAULT NULL)					-- Sub del n.ro di registrazione/numerazione dell'unità documentaria
1256        			return INTEGER;														-- Identificativo dell'unità documentaria trovata
1257        																				-- vale NULL in caso di errore o se l'unità non esiste/non è individuabile univocamente
1258        
1259        	--- overload della precedente: l'unica differenza è che restituisce -1 in caso di errore o se l'UD non viene trovata
1260        	function FindUD_J(
1261        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- (obblig.) Identificativo del soggetto produttore o AOO cui è relativa l'UD
1262        			IdUDIn			IN		INTEGER DEFAULT NULL,						-- Identificativo unità documentaria
1263        			CodCategoriaRegIn		IN		VARCHAR2 DEFAULT NULL,				-- Codice della categoria di registrazione/numerazione dell'unità documentaria
1264        			SiglaRegIn			IN		VARCHAR2 DEFAULT NULL,					-- Sigla di registrazione/numerazione dell'unità documentaria
1265        			AnnoRegIn			IN		PLS_INTEGER DEFAULT NULL,				-- Anno di registrazione/numerazione dell'unità documentaria
1266        			NumRegIn			IN		INTEGER DEFAULT NULL,					-- N.ro di registrazione/numerazione dell'unità documentaria
1267        			CodApplOwnerIn		IN		VARCHAR2 DEFAULT NULL,					-- la ricerca viene ristretta alle UD della data applicazione
1268        			CodIstApplOwnerIn	IN		VARCHAR2 DEFAULT NULL,					-- la ricerca viene ristretta alle UD della data istanza di applicazione
1269        			IdUDOut				OUT		INTEGER,								-- Identificativo dell'unità documentaria trovata
1270        			SubNumRegIn			IN		VARCHAR2 DEFAULT NULL)					-- Sub del n.ro di registrazione/numerazione dell'unità documentaria
1271        			return INTEGER;														-- vale sempre 1
1272        
1273        
1274        
1275        	/******** Funzione per ottenere l'identificativo del documento che corrisponde al primario o n-esimo allegato di una data unità documentaria *******/
1276        	/******** Indicata attraverso il suo identificativo IdUDIn o attraverso gli estremi di una registrazione/numerazione assegnatale		   *******/
1277        	function GetIdDocPrimarioAllegatoFromUD(
1278        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type, 	-- (obblig.) Identificativo del soggetto produttore o AOO cui è relativa l'UD
1279        			IdUDIn			IN		INTEGER DEFAULT NULL,						-- Identificativo unità documentaria cui appartiene il documento
1280        			CodCategoriaRegIn		IN		VARCHAR2 DEFAULT NULL,				-- Codice della categoria di registrazione/numerazione dell'unità documentaria cui appartiene il documento
1281        			SiglaRegIn			IN		VARCHAR2 DEFAULT NULL,					-- Sigla di registrazione/numerazione dell'unità documentaria cui appartiene il documento
1282        			AnnoRegIn			IN		PLS_INTEGER DEFAULT NULL,				-- Anno di registrazione/numerazione dell'unità documentaria cui appartiene il documento
1283        			NumRegIn			IN		PLS_INTEGER DEFAULT NULL,				-- N.ro di registrazione/numerazione dell'unità documentaria cui appartiene il documento
1284        			NroDocVsUDIn		IN		PLS_INTEGER,							-- (obblig.) Serve a identificare il documento di cui trovare l'ID_DOC rispetto all'unità documentaria
1285        																				-- 0 = File primario
1286        																				-- n, numero da 1 in su = allegato n-esimo.
1287        			SubNumRegIn			IN		VARCHAR2 DEFAULT NULL)					-- Sub del n.ro di registrazione/numerazione dell'unità documentaria
1288        			return INTEGER;														-- è l'ID_DOC se trovato, altrimenti -1
1289        
1290        	/******** Funzione per ottenere l'identificativo del documento che corrisponde al primario o n-esimo allegato di una data unità documentaria *******/
1291        	/******** Indicata attraverso il suo identificativo IdUDIn o attraverso gli estremi di una registrazione/numerazione assegnatale		     *******/
1292        	/******** IMPORTANTE: Il Nro di allegato non è quello effettivo a DB ma il N° posizione a video, ovvero il N° di allegato valido			 *******/
1293        	function GetIdDocPAllFromUD_ByPos(
1294        			IdSpAOOIn				IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type, 	-- (obblig.) Identificativo del soggetto produttore o AOO cui è relativa l'UD
1295        			IdUDIn					IN		INTEGER DEFAULT NULL,					-- Identificativo unità documentaria cui appartiene il documento
1296        			CodCategoriaRegIn		IN		VARCHAR2 DEFAULT NULL,					-- Codice della categoria di registrazione/numerazione dell'unità documentaria cui appartiene il documento
1297        			SiglaRegIn				IN		VARCHAR2 DEFAULT NULL,					-- Sigla di registrazione/numerazione dell'unità documentaria cui appartiene il documento
1298        			AnnoRegIn				IN		PLS_INTEGER DEFAULT NULL,				-- Anno di registrazione/numerazione dell'unità documentaria cui appartiene il documento
1299        			NumRegIn				IN		PLS_INTEGER DEFAULT NULL,				-- N.ro di registrazione/numerazione dell'unità documentaria cui appartiene il documento
1300        			NroPosizioneAllIn		IN		PLS_INTEGER,							-- Serve a identificare il documento di cui trovare l'ID_DOC rispetto all'unità documentaria
1301        																					-- 0 = File primario
1302        																					-- n, numero da 1 in su che indica la posizione dell'allegato tra gli allegati validi
1303        																					-- Se è vuoto significa che si vuole sapere in che posizione - primario o nuovo allegato - caricare un'immagine che nel barcode ha gli estremi UD e non il n.ro posizione
1304        			NroUltimoAllegatoOut	OUT		PLS_INTEGER,							-- N.ro posizione dell'ultimo allegato valido esistente in DB per l'UD (0 se non ce ne sono)
1305        			IdDocOut				OUT		INTEGER,								-- Id. del doumento trovato (se non trovato è NULL)
1306        			SubNumRegIn				IN		VARCHAR2 DEFAULT NULL)					-- Sub del n.ro di registrazione dell'unità documentaria cui appartiene il documento
1307        			return PLS_INTEGER;														-- è 1 se trovato l'IdDoc, altrimenti 0
1308        
1309        
1310        	/******** Funzione per ottenere l'identificativo del documento che corrisponde al doc primario di un'UD in una pratica storica identificata da registrazione del documento capofila  *******/
1311        	/******** IMPORTANTE: Il Nro di posizione dell'UD nella pratica non è quello effettivo a DB ma il N° posizione a video			 													 ******/
1312        	function GetIdDocInPraticaStorica_ByPos(
1313        			IdSpAOOIn				IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type, 	-- (obblig.) Identificativo del soggetto produttore o AOO cui è relativa l'UD
1314        			CodCategoriaRegIn		IN		VARCHAR2,								-- Codice della categoria di registrazione/numerazione dell'unità documentaria capofila della pratica
1315        			SiglaRegIn				IN		VARCHAR2 DEFAULT NULL,					-- Sigla di registrazione/numerazione dell'unità documentaria capofila della pratica
1316        			AnnoRegIn				IN		PLS_INTEGER,							-- Anno di registrazione/numerazione dell'unità documentaria capofila della pratica
1317        			NumRegIn				IN		PLS_INTEGER,							-- N.ro di registrazione/numerazione dell'unità documentaria capofila della pratica
1318        			SubNumRegIn				IN		VARCHAR2 DEFAULT NULL,					-- Sub del n.ro di registrazione dell'unità documentaria capofila della pratica
1319        			SezionePraticaIn		IN		VARCHAR2 DEFAULT NULL,					-- Specifica sezione della pratica in cui va messo/si trova il documento
1320        			NroPosDocInPraticaIn	IN		PLS_INTEGER DEFAULT NULL,				-- n, numero da 1 in su che indica la posizione dell'UD nella pratica tra le UD valide
1321        																					-- Se è vuoto significa che si vuole caricare un'immagine come nuova UD nella pratica, senza caricarla in una posizione specifica
1322        			NroPosizioneUltimaUDOut	OUT		PLS_INTEGER,							-- N.ro posizione dell'ultima UD nella pratica o sezione della pratica (0 se non ce ne sono)
1323        			IdDocOut				OUT		INTEGER,								-- Id. del doumento primario dell'UD che corrisponde al N.ro posizione indicato o al prossimo n.ro posizione da occupare con un file
1324        			IdFolderOut				OUT		INTEGER)								-- Id. del folder che corrisponde alla pratica
1325        			return PLS_INTEGER;														-- è 1 in caso chiamata andata a buon fine, altrimenti 0
1326        
1327        
1328        	/******** Funzione per ottenere gli estremi di una registrazione/numerazione di un'unità documentaria di cui è noto l'id.********/
1329        	function GetEstremiRegNumUD(
1330        			IdUDIn			IN		INTEGER,								-- (obblig.) Identificativo unità documentaria di cui trovare gli estremi di registrazione
1331        			CodCategoriaRegIO		IN OUT	VARCHAR2,						-- In INPUT: Codice della categoria di registrazione/numerazione di cui mostrare gli estremi (valori da dizionario)
1332        																			--		 può avere valore '#NU' che indica la prima numerazione non a protocollo o repertorio (non ufficiale)
1333        																			--		 può avere valore '#U' che indica la prima numerazione ufficiale (a protocollo o repertorio)
1334        																			-- 		 Se non è valorizzata viene trovata la prima registrazione/numerazione presente andando nel seguente ordine: Protocollo Generale, Protocollo interno, Protocollo Particolare, Repertorio, Registrazione d'Emergenza, Altra numerazione esterna al sistema, Numerazione interna al sistema
1335        																			-- In OUTPUT: Codice della categoria di registrazione/numerazione di cui sono restituiti gli estremi
1336        			SiglaRegIO			IN OUT	VARCHAR2,							-- In INPUT: Sigla della registrazione/numerazione di cui mostrare gli estremi
1337        																			-- In OUTPUT: Sigla della registrazione/numerazione di cui sono restituiti gli estremi
1338        			AnnoRegOut			OUT		PLS_INTEGER,						-- Anno di registrazione/numerazione
1339        			NumRegOut			OUT		INTEGER,							-- N.ro di registrazione
1340        			TsRegOut			OUT		DATE)								-- Data e ora di registrazione/numerazione
1341        			return PLS_INTEGER;												-- restituisce 1 in caso di estremi trovati, altrimenti 0
1342        
1343        	/******** overload della function precedente con in più il sub del nro di registrazione come output							********/
1344        	function GetEstremiRegNumUD(
1345        			IdUDIn			IN		INTEGER,								-- (obblig.) Identificativo unità documentaria di cui trovare gli estremi di registrazione
1346        			CodCategoriaRegIO		IN OUT	VARCHAR2,						-- In INPUT: Codice della categoria di registrazione/numerazione di cui mostrare gli estremi (valori da dizionario)
1347        																			--		 può avere valore '#NU' che indica la prima numerazione non a protocollo o repertorio (non ufficiale)
1348        																			--		 può avere valore '#U' che indica la prima numerazione ufficiale (a protocollo o repertorio)
1349        																			-- 		 Se non è valorizzata viene trovata la prima registrazione/numerazione presente andando nel seguente ordine: Protocollo Generale, Protocollo interno, Protocollo Particolare, Repertorio, Registrazione d'Emergenza, Altra numerazione esterna al sistema, Numerazione interna al sistema
1350        																			-- In OUTPUT: Codice della categoria di registrazione/numerazione di cui sono restituiti gli estremi
1351        			SiglaRegIO			IN OUT	VARCHAR2,							-- In INPUT: Sigla della registrazione/numerazione di cui mostrare gli estremi
1352        																			-- In OUTPUT: Sigla della registrazione/numerazione di cui sono restituiti gli estremi
1353        			AnnoRegOut			OUT		PLS_INTEGER,						-- Anno di registrazione/numerazione
1354        			NumRegOut			OUT		INTEGER,							-- N.ro di registrazione
1355        			TsRegOut			OUT		DATE,								-- Data e ora di registrazione/numerazione
1356        			SubNumRegOut		OUT		VARCHAR2)							-- Sub del nro di registrazione
1357        			return PLS_INTEGER;												-- restituisce 1 in caso di estremi trovati, altrimenti 0
1358        
1359        	/******** identica alla precedente ma con nome diverso per essere richiamata da java ********/
1360        	function GetEstremiRegNumUD_J(
1361        			IdUDIn			IN		INTEGER,						-- (obblig.) Identificativo unità documentaria di cui trovare gli estremi di registrazione
1362        			CodCategoriaRegIO		IN OUT	VARCHAR2,						-- In INPUT: Codice della categoria di registrazione/numerazione di cui mostrare gli estremi (valori da dizionario)
1363        																--		 può avere valore '#NU' che indica la prima numerazione non a protocollo o repertorio (non ufficiale)
1364        																--		 può avere valore '#U' che indica la prima numerazione ufficiale (a protocollo o repertorio)
1365        																-- 		 Se non è valorizzata viene trovata la prima registrazione/numerazione presente andando nel seguente ordine: Protocollo Generale, Protocollo interno, Protocollo Particolare, Repertorio, Registrazione d'Emergenza, Altra numerazione esterna al sistema, Numerazione interna al sistema
1366        																-- In OUTPUT: Codice della categoria di registrazione/numerazione di cui sono restituiti gli estremi
1367        			SiglaRegIO			IN OUT	VARCHAR2,						-- In INPUT: Sigla della registrazione/numerazione di cui mostrare gli estremi
1368        																-- In OUTPUT: Sigla della registrazione/numerazione di cui sono restituiti gli estremi
1369        			AnnoRegOut			OUT		PLS_INTEGER,					-- Anno di registrazione/numerazione
1370        			NumRegOut			OUT		INTEGER,					-- N.ro di registrazione
1371        			TsRegOut			OUT		DATE)							-- Data e ora di registrazione/numerazione
1372        			return PLS_INTEGER;										-- restituisce 1 in caso di estremi trovati, altrimenti 0
1373        
1374        	/******** Funzione per ottenere gli estremi di una registrazione/numerazione di un'unità documentaria di si ha la lista di estremi di reg./num.********/
1375        	function GetEstremiRegNumUD(
1376        			EstremiRegNumTabIn	IN		DMTO_REG_NUM_UD,					-- (obblig.) Lista con gliestremi di registrazione/numerazione dell'UD
1377        			CodCategoriaRegIO		IN OUT	VARCHAR2,						-- In INPUT: Codice della categoria di registrazione/numerazione di cui mostrare gli estremi (valori da dizionario)
1378        																--		 può avere valore '#NU' che indica la prima numerazione non a protocollo o repertorio (non ufficiale)
1379        																--		 può avere valore '#U' che indica la prima numerazione ufficiale (a protocollo o repertorio)
1380        																-- 		 Se non è valorizzata viene trovata la prima registrazione/numerazione presente andando nel seguente ordine: Protocollo Generale, Protocollo interno, Protocollo Particolare, Repertorio, Registrazione d'Emergenza, Altra numerazione esterna al sistema, Numerazione interna al sistema
1381        																-- In OUTPUT: Codice della categoria di registrazione/numerazione di cui sono restituiti gli estremi
1382        			SiglaRegIO			IN OUT	VARCHAR2,						-- In INPUT: Sigla della registrazione/numerazione di cui mostrare gli estremi
1383        																-- In OUTPUT: Sigla della registrazione/numerazione di cui sono restituiti gli estremi
1384        			AnnoRegOut			OUT		PLS_INTEGER,					-- Anno di registrazione/numerazione
1385        			NumRegOut			OUT		INTEGER,					-- N.ro di registrazione
1386        			TsRegOut			OUT		DATE)							-- Data e ora di registrazione/numerazione
1387        			return PLS_INTEGER;										-- restituisce 1 in caso di estremi trovati, altrimenti 0
1388        
1389        	/******** overload della function precedente con in più il sub del nro di registrazione come output							********/
1390        	function GetEstremiRegNumUD(
1391        			EstremiRegNumTabIn	IN		DMTO_REG_NUM_UD,					-- (obblig.) Lista con gliestremi di registrazione/numerazione dell'UD
1392        			CodCategoriaRegIO		IN OUT	VARCHAR2,						-- In INPUT: Codice della categoria di registrazione/numerazione di cui mostrare gli estremi (valori da dizionario)
1393        																--		 può avere valore '#NU' che indica la prima numerazione non a protocollo o repertorio (non ufficiale)
1394        																--		 può avere valore '#U' che indica la prima numerazione ufficiale (a protocollo o repertorio)
1395        																-- 		 Se non è valorizzata viene trovata la prima registrazione/numerazione presente andando nel seguente ordine: Protocollo Generale, Protocollo interno, Protocollo Particolare, Repertorio, Registrazione d'Emergenza, Altra numerazione esterna al sistema, Numerazione interna al sistema
1396        																-- In OUTPUT: Codice della categoria di registrazione/numerazione di cui sono restituiti gli estremi
1397        			SiglaRegIO			IN OUT	VARCHAR2,						-- In INPUT: Sigla della registrazione/numerazione di cui mostrare gli estremi
1398        																-- In OUTPUT: Sigla della registrazione/numerazione di cui sono restituiti gli estremi
1399        			AnnoRegOut			OUT		PLS_INTEGER,					-- Anno di registrazione/numerazione
1400        			NumRegOut			OUT		INTEGER,					-- N.ro di registrazione
1401        			TsRegOut			OUT		DATE,							-- Data e ora di registrazione/numerazione
1402        			SubNumRegOut		OUT		VARCHAR2)							-- Sub del nro di registrazione
1403        			return PLS_INTEGER;										-- restituisce 1 in caso di estremi trovati, altrimenti 0
1404        
1405        	function GetEstremiRegNumUD(
1406        			IdUDIn			IN		INTEGER,						-- (obblig.) Identificativo unità documentaria di cui trovare gli estremi di registrazione
1407        			CodCategoriaRegIO		IN OUT	VARCHAR2,						-- In INPUT: Codice della categoria di registrazione/numerazione di cui mostrare gli estremi (valori da dizionario)
1408        																--		 può avere valore '#NU' che indica la prima numerazione non a protocollo o repertorio (non ufficiale)
1409        																--		 può avere valore '#U' che indica la prima numerazione ufficiale (a protocollo o repertorio)
1410        																-- 		 Se non è valorizzata viene trovata la prima registrazione/numerazione presente andando nel seguente ordine: Protocollo Generale, Protocollo interno, Protocollo Particolare, Repertorio, Registrazione d'Emergenza, Altra numerazione esterna al sistema, Numerazione interna al sistema
1411        																-- In OUTPUT: Codice della categoria di registrazione/numerazione di cui sono restituiti gli estremi
1412        			SiglaRegIO			IN OUT	VARCHAR2,						-- In INPUT: Sigla della registrazione/numerazione di cui mostrare gli estremi
1413        																-- In OUTPUT: Sigla della registrazione/numerazione di cui sono restituiti gli estremi
1414        			AnnoRegOut			OUT		PLS_INTEGER,					-- Anno di registrazione/numerazione
1415        			NumRegOut			OUT		INTEGER,					-- N.ro di registrazione
1416        			TsRegOut			OUT		VARCHAR2)						-- Data e ora di registrazione/numerazione (nel formato dato dal parametro di config. FMT_STD_TIMESTAMP del sogg. prod. /AOO di appartenenza dell'unità documentaria)
1417        			return PLS_INTEGER;										-- restituisce 1 in caso di estremi trovati, altrimenti 0
1418        
1419        
1420        	/******** overload della function precedente con in più il sub del nro di registrazione come output							********/
1421        	function GetEstremiRegNumUD(
1422        			IdUDIn			IN		INTEGER,						-- (obblig.) Identificativo unità documentaria di cui trovare gli estremi di registrazione
1423        			CodCategoriaRegIO		IN OUT	VARCHAR2,						-- In INPUT: Codice della categoria di registrazione/numerazione di cui mostrare gli estremi (valori da dizionario)
1424        																--		 può avere valore '#NU' che indica la prima numerazione non a protocollo o repertorio (non ufficiale)
1425        																--		 può avere valore '#U' che indica la prima numerazione ufficiale (a protocollo o repertorio)
1426        																-- 		 Se non è valorizzata viene trovata la prima registrazione/numerazione presente andando nel seguente ordine: Protocollo Generale, Protocollo interno, Protocollo Particolare, Repertorio, Registrazione d'Emergenza, Altra numerazione esterna al sistema, Numerazione interna al sistema
1427        																-- In OUTPUT: Codice della categoria di registrazione/numerazione di cui sono restituiti gli estremi
1428        			SiglaRegIO			IN OUT	VARCHAR2,						-- In INPUT: Sigla della registrazione/numerazione di cui mostrare gli estremi
1429        																-- In OUTPUT: Sigla della registrazione/numerazione di cui sono restituiti gli estremi
1430        			AnnoRegOut			OUT		PLS_INTEGER,					-- Anno di registrazione/numerazione
1431        			NumRegOut			OUT		INTEGER,					-- N.ro di registrazione
1432        			TsRegStrOut			OUT		VARCHAR2,						-- Data e ora di registrazione/numerazione (nel formato dato dal parametro di config. FMT_STD_TIMESTAMP del sogg. prod. /AOO di appartenenza dell'unità documentaria)
1433        			SubNumRegOut		OUT		VARCHAR2)							-- Sub del nro di registrazione
1434        			return PLS_INTEGER;										-- restituisce 1 in caso di estremi trovati, altrimenti 0
1435        
1436        
1437        	------------overload delle precedenti senza argomenti di output (quindi utilizzabile in una query)
1438        	function GetEstremiRegNumUD(
1439        			EstremiRegNumTabIn	IN		DMTO_REG_NUM_UD,					-- (obblig.) Lista con gliestremi di registrazione/numerazione dell'UD
1440        			CodCategoriaRegIn		IN		VARCHAR2 DEFAULT NULL,				-- Codice della categoria di registrazione/numerazione di cui mostrare gli estremi (valori da dizionario)
1441        																--		 può avere valore '#NU' che indica la prima numerazione non a protocollo o repertorio (non ufficiale)
1442        																--		 può avere valore '#U' che indica la prima numerazione ufficiale (a protocollo o repertorio)
1443        																-- Se non è valorizzata viene trovata la prima registrazione/numerazione presente andando nel seguente ordine: Protocollo Generale, Protocollo interno, Protocollo Particolare, Repertorio, Registrazione d'Emergenza, Altra numerazione esterna al sistema, Numerazione interna al sistema
1444        			SiglaRegIn			IN		VARCHAR2 DEFAULT NULL,				-- Sigla della registrazione/numerazione di cui mostrare gli estremi
1445        			FlgFmtEstremiIn		IN		VARCHAR2,						-- (obblig.) Formato con cui mostrare gli estremi cercati:
1446        																-- Valori possibili:
1447        																-- <FULL> = Categoria [sigla] Data o Anno.Nro
1448        																-- <FULL+TIPO_PROV> = Categoria [sigla] .Data o Anno.Nro[.E/I/U]
1449        																-- <ORDER_BY_VALUE> mette categoria, sigla, anno e numero in modo utile per ordinare privilegiando le numerazioni ufficiali e poi in ordine coronologico
1450        																-- <CATEGORIA> = Descrizione della categoria di registrazione/numerazione
1451        																-- <SIGLA> = Sigla di registrazione/numerazione
1452        																-- <DES_SEZIONALE> = Decodifica SIGLA presa da DMT_SEZIONALI
1453        																-- <DES_REGISTRO> = Decodifica SIGLA presa da DMT_TIPI_REGISTRAZIONE
1454        																-- <ANNO> = Anno di registrazione/numerazione
1455        																-- <NRO> = N.ro di registrazione/numerazione
1456        																-- <NRO_NOPAD> = N.ro di registrazione/numerazione senza LPAD con 0 fino a 7 cifre
1457        																-- <DATA> = Data di registrazione (nel formato dato dal parametro di config. FMT_STD_DATA del sogg. prod. /AOO di appartenenza dell'unità documentaria)
1458        																-- <ORA> = Orario di registrazione (nel formato HH24:MI)
1459        																-- Può anche essere una concatenazione dei valori precedenti (tutto ciò che è fuori dalle angle brackets si intende stringa fissa di separazione)
1460        																-- ad es: <NRO>/<ANNO>; <SIGLA>/<ANNO>/<NRO> del <DATA>
1461        			FlgTpDominioIn		IN	PLS_INTEGER DEFAULT NULL,				-- (obblig. se il formato contiene <CATEGORIA>) Indica il tipo di dominio (2 = Soggetto produttore; 3 = AOO) cui è relativa l'UD
1462        			IdSpAOOIn			IN	DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type DEFAULT NULL,
1463        																-- (obblig. se il formato contiene <CATEGORIA>) Identificativo del del soggetto produttore o AOO cui è relativa l'UD
1464        			FmtDataIn			IN	VARCHAR2 DEFAULT NULL,					-- (serve se il formato contiene <DATA>) Formato per la data (formato Oracle); se non valorizzato si prende il formato di default per IdSpAOOIn
1465        			TipoProvIn			IN	DMT_UNITA_DOC.FLG_TIPO_PROV%type DEFAULT NULL)  --indica il tipo di registrazione: E = Entrata, U = Uscita, I = Interna
1466        			return VARCHAR2;											-- estremi cercati; è NULL solo in caso di errore registrazione/numerazione non presente
1467        
1468        	------------overload delle precedenti senza argomenti di output (quindi utilizzabile in una query)
1469        	function GetEstremiRegNumUD(
1470        			IdUDIn			IN		INTEGER,						-- (obblig.) Identificativo unità documentaria di cui trovare gli estremi di registrazione
1471        			CodCategoriaRegIn		IN		VARCHAR2 DEFAULT NULL,				-- Codice della categoria di registrazione/numerazione di cui mostrare gli estremi (valori da dizionario)
1472        																--		 può avere valore '#NU' che indica la prima numerazione non a protocollo o repertorio (non ufficiale)
1473        																--		 può avere valore '#U' che indica la prima numerazione ufficiale (a protocollo o repertorio)
1474        																-- Se non è valorizzata viene trovata la prima registrazione/numerazione presente andando nel seguente ordine: Protocollo Generale, Protocollo interno, Protocollo Particolare, Repertorio, Registrazione d'Emergenza, Altra numerazione esterna al sistema, Numerazione interna al sistema
1475        			SiglaRegIn			IN		VARCHAR2 DEFAULT NULL,				-- Sigla della registrazione/numerazione di cui mostrare gli estremi
1476        			FlgFmtEstremiIn		IN		VARCHAR2)						-- (obblig.) Formato con cui mostrare gli estremi cercati:
1477        																-- Valori possibili:
1478        																-- <FULL> = Categoria [sigla] Data o Anno.Nro
1479        																-- <FULL+TIPO_PROV> = Categoria [sigla] .Data o Anno.Nro[.E/I/U]
1480        																-- <ORDER_BY_VALUE> mette categoria, sigla, anno e numero in modo utile per ordinare privilegiando le numerazioni ufficiali e poi in ordine coronologico
1481        																-- <CATEGORIA> = Descrizione della categoria di registrazione/numerazione
1482        																-- <SIGLA> = Sigla di registrazione/numerazione
1483        																-- <DES_SEZIONALE> = Decodifica SIGLA presa da DMT_SEZIONALI
1484        																-- <DES_REGISTRO> = Decodifica SIGLA presa da DMT_TIPI_REGISTRAZIONE
1485        																-- <ANNO> = Anno di registrazione/numerazione
1486        																-- <NRO> = N.ro di registrazione/numerazione
1487        																-- <NRO_NOPAD> = N.ro di registrazione/numerazione senza LPAD con 0 fino a 7 cifre
1488        																-- <DATA> = Data di registrazione (nel formato dato dal parametro di config. FMT_STD_DATA del sogg. prod. /AOO di appartenenza dell'unità documentaria)
1489        																-- <ORA> = Orario di registrazione (nel formato HH24:MI)
1490        																-- Può anche essere una concatenazione dei valori precedenti (tutto ciò che è fuori dalle angle brackets si intende stringa fissa di separazione)
1491        																-- ad es: <NRO>/<ANNO>; <SIGLA>/<ANNO>/<NRO> del <DATA>
1492        			return VARCHAR2;											-- estremi cercati; è NULL solo in caso di errore registrazione/numerazione non presente
1493        
1494        	------------funzione per ottenere lo stato di annullamento di una registrazione/numerazione di UD senza argomenti di output (quindi utilizzabile in una query)
1495        	function GetStatoAnnRegNumUD(
1496        			EstremiRegNumTabIn	IN		DMTO_REG_NUM_UD,					-- (obblig.) Lista con gli estremi di registrazione/numerazione dell'UD
1497        			CodCategoriaRegIn		IN		VARCHAR2 DEFAULT NULL,			-- Codice della categoria di registrazione/numerazione di cui ricavare stato di annullamento
1498        																			--		 può avere valore '#NU' che indica la prima numerazione non a protocollo o repertorio (non ufficiale)
1499        																			--		 può avere valore '#U' che indica la prima numerazione ufficiale (a protocollo o repertorio)
1500        																			-- Se non è valorizzata viene considerata la prima registrazione/numerazione presente andando nel seguente ordine: Protocollo Generale, Protocollo interno, Protocollo Particolare, Repertorio, Registrazione d'Emergenza, Altra numerazione esterna al sistema, Numerazione interna al sistema
1501        			SiglaRegIn			IN		VARCHAR2 DEFAULT NULL)				-- Sigla della registrazione/numerazione di cui ricavare stato di annullamento
1502        			return VARCHAR2;												-- stato di annullamento: valori A = Annullata, R = Richiesto annullamento (e non ancora autorizzato); D = Autorizzato annullamento (ma non ancora effettuato); NULL
1503        
1504        	------------funzione per ottenere i dettagli dell'annullamento o richiesta di annullamento di una registrazione/numerazione di UD senza argomenti di output (quindi utilizzabile in una query)
1505        	function GetDettAnnRegNumUD(
1506        			EstremiRegNumTabIn	IN		DMTO_REG_NUM_UD,					-- (obblig.) Lista con gli estremi di registrazione/numerazione dell'UD
1507        			CodCategoriaRegIn	IN		VARCHAR2 DEFAULT NULL,				-- Codice della categoria di registrazione/numerazione di cui ricavare i dettagli dell'annullamento o richiesta di annullamento
1508        																			--		 può avere valore '#NU' che indica la prima numerazione non a protocollo o repertorio (non ufficiale)
1509        																			--		 può avere valore '#U' che indica la prima numerazione ufficiale (a protocollo o repertorio)
1510        																			-- Se non è valorizzata viene considerata la prima registrazione/numerazione presente andando nel seguente ordine: Protocollo Generale, Protocollo interno, Protocollo Particolare, Repertorio, Registrazione d'Emergenza, Altra numerazione esterna al sistema, Numerazione interna al sistema
1511        			SiglaRegIn			IN		VARCHAR2 DEFAULT NULL,				-- Sigla della registrazione/numerazione di cui ricavare i dettagli dell'annullamento o richiesta di annullamento
1512        			TsLastUpdStatoIn	IN		DATE)								-- Data e ora di ultimo cambio di stato dell'unità documentaria
1513        			return VARCHAR2;												-- stringa con i dettagli dell'annullamento o richiesta di annullamento (quando, ad opera di chi, autorizzata con che atto)
1514        
1515        	/******** Funzione per ottenere data e ora di una registrazione/numerazione di un'unità documentaria di cui è noto l'id.********/
1516        	function GetTsRegNumUD(
1517        			IdUDIn			IN		INTEGER,						-- (obblig.) Identificativo unità documentaria di cui trovare gli estremi di registrazione
1518        			CodCategoriaRegIn		IN		VARCHAR2,						-- Codice della categoria di registrazione/numerazione di cui mostrare gli estremi (valori da dizionario)
1519        																--		 può avere valore '#NU' che indica la prima numerazione non a protocollo o repertorio (non ufficiale)
1520        																--		 può avere valore '#U' che indica la prima numerazione ufficiale (a protocollo o repertorio)
1521        																-- Se non è valorizzata viene trovata la prima registrazione/numerazione presente andando nel seguente ordine: Protocollo Generale, Protocollo interno, Protocollo Particolare, Repertorio, Registrazione d'Emergenza, Altra numerazione esterna al sistema, Numerazione interna al sistema
1522        			SiglaRegIO			IN		VARCHAR2						-- Sigla della registrazione/numerazione di cui mostrare gli estremi
1523        			)return DATE;											-- Data e ora di registrazione/numerazione
1524        
1525        	/******** Funzione per ottenere data e ora di una registrazione/numerazione di un'unità documentaria di cui è nota la lista di estremi di reg./num.********/
1526        	function GetTsRegNumUD(
1527        			EstremiRegNumTabIn	IN		DMTO_REG_NUM_UD,					-- (obblig.) Lista con gliestremi di registrazione/numerazione dell'UD
1528        			CodCategoriaRegIn		IN		VARCHAR2,						-- Codice della categoria di registrazione/numerazione di cui mostrare gli estremi (valori da dizionario)
1529        																--		 può avere valore '#NU' che indica la prima numerazione non a protocollo o repertorio (non ufficiale)
1530        																--		 può avere valore '#U' che indica la prima numerazione ufficiale (a protocollo o repertorio)
1531        																-- Se non è valorizzata viene trovata la prima registrazione/numerazione presente andando nel seguente ordine: Protocollo Generale, Protocollo interno, Protocollo Particolare, Repertorio, Registrazione d'Emergenza, Altra numerazione esterna al sistema, Numerazione interna al sistema
1532        			SiglaRegIO			IN		VARCHAR2						-- Sigla della registrazione/numerazione di cui mostrare gli estremi
1533        			)return DATE;											-- Data e ora di registrazione/numerazione
1534        
1535        	/**** Funzione per ottenere l'id. dell'unità documentaria di un documento con un certo id. *****/
1536        	function GetIdUDOfDoc(
1537        			IdDocIn			IN		DMT_DOCUMENTS.ID_DOC%type)			-- Id. del documento di cui trovare l'unità documentaria di appartenenza
1538        			return DMT_UNITA_DOC.ID_UD%type;								-- id. dell'unità documentaria se trovata, NULL in caso di errore
1539        
1540        	/***** Funzione per creare in DB la cache in cui registrare le variabili di un dato flusso di navigazione applicativo  	*****/
1541        	/***** se la cache già c'era quella preesistente viene cancellata (la si reinizializza)						*****/
1542        	function InitCacheFlussoNav(
1543        			CIFlussoNavIn		IN		DMT_FLUSSI_NAV_WEB.CI_FLUSSO%TYPE,		-- (obblig.) Codice identificativo del flusso di cui creare la cache
1544        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
1545        																-- ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
1546        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
1547        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
1548        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
1549        			ErrMsgOut			OUT 		VARCHAR2)						-- Messaggio d'errore
1550        			RETURN PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine, altrimenti 0
1551        
1552        	/***** Funzione per cancellare da DB la cache con le le variabili di un dato flusso di navigazione applicativo  *****/
1553        	function DelCacheFlussoNav(
1554        			CIFlussoNavIn		IN		DMT_FLUSSI_NAV_WEB.CI_FLUSSO%TYPE,		-- (obblig.) Codice identificativo del flusso di cui eliminare la cache
1555        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
1556        																-- ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
1557        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
1558        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
1559        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
1560        			ErrMsgOut			OUT 		VARCHAR2)						-- Messaggio d'errore
1561        			RETURN PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine, altrimenti 0
1562        
1563        	/***** Funzione per inserire/aggiornare il/i valori di una data variabile di un dato flusso  navigazione applicativo	*****/
1564        	/***** se c'erano già dei valori presenti per la variabile (ed eventuale sezione indicata) questi vengono rimossi; 	*****/
1565        	/***** i nuovi valori sono registrati mantenendo l'ordine con cui sono forniti in input						*****/
1566        	/***** se la cache del flusso di navigazione non esiste, viene inizializzata								*****/
1567        	function SetVarCacheFlussoNav(
1568        			CIFlussoNavIn		IN		DMT_FLUSSI_NAV_WEB.CI_FLUSSO%TYPE,		-- (obblig.) Codice identificativo del flusso di navigazione
1569        			SezioneFlussoIn		IN		VARCHAR2,						-- Sezione eventuale del flusso di navigazione per cui settare la variabile
1570        			NomeVariabileIn		IN		VARCHAR2,						-- (obblig.) Nome della variabile (mono-valore e non strutturata) di cui settare il valore (controllato in modalità case-sensitive)
1571        			ValoreIn			IN		VARCHAR2,						-- Valore da assegnare alla variabile
1572        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
1573        																-- ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
1574        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
1575        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
1576        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
1577        			ErrMsgOut			OUT 		VARCHAR2)						-- Messaggio d'errore
1578        			RETURN PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine, altrimenti 0
1579        
1580        	function SetVarCacheFlussoNav(
1581        			CIFlussoNavIn		IN		DMT_FLUSSI_NAV_WEB.CI_FLUSSO%TYPE,		-- (obblig.) Codice identificativo del flusso di navigazione
1582        			SezioneFlussoIn		IN		VARCHAR2,						-- Sezione eventuale del flusso di navigazione per cui settare la variabile
1583        			NomeVariabileIn		IN		VARCHAR2,						-- (obblig.) Nome della variabile (multi-valore e/o strutturata) di cui settare il valore (controllato in modalità case-sensitive)
1584        			ValoreIn			IN		CLOB,							-- Valore/i da assegnare alla variabile (XML conforme a schema LISTA_STD.xsd)
1585        																-- Ogni valore è un tag Riga
1586        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
1587        																-- ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
1588        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
1589        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
1590        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
1591        			ErrMsgOut			OUT 		VARCHAR2)						-- Messaggio d'errore
1592        			RETURN PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine, altrimenti 0
1593        
1594        	/***** Funzione per modificare o aggiungere dei record ad una variabile di un dato flusso  navigazione applicativo che è una lista di record 	*****/
1595        	/***** se la cache del flusso di navigazione non esiste, viene inizializzata												*****/
1596        	function SetRecVarCacheFlussoNav(
1597        			CIFlussoNavIn		IN		DMT_FLUSSI_NAV_WEB.CI_FLUSSO%TYPE,		-- (obblig.) Codice identificativo del flusso di navigazione
1598        			SezioneFlussoIn		IN		VARCHAR2,						-- Sezione eventuale del flusso di navigazione cui appartiene la variabile multi-record di cui settare un record
1599        			NomeVariabileIn		IN		VARCHAR2,						-- (obblig.) Nome della variabile (multi-record) di cui settare il record (controllato in modalità case-sensitive)
1600        			FlgActionTypeIn		IN		VARCHAR2 DEFAULT 'A',				-- (obblig.) Tipo di azione da fare; valori ammessi:
1601        																-- A = Aggiunta di record
1602        																-- M = Modifica di record esistenti
1603        			NroPaginaIn			IN		PLS_INTEGER DEFAULT 1,				-- N.ro della pagina in cui viene mostrato il primo record da modificare o quello dopo cui aggiungere il/i nuovi record. Se NULL si intende 1
1604        			DimPaginaIn			IN		PLS_INTEGER,					-- N.ro di record per pagina. Obbligatorio se NroPaginaIn>1
1605        			PosRecInPaginaIn		IN		PLS_INTEGER,					-- (obblig. se FlgActionTypeIn='M') Posizione (interi da 1 a DimPaginaIn) che ha nella pagina il primo record da modificare o che deve avere il primo record da aggiungere (se posizione già occupata da un record quello e i successivi vengono spostati dopo). Se NULL il/i record vengono aggiunti dopo l'ultimo della pagina
1606        			ValoreRecordIn		IN		CLOB,							-- Valore/i da assegnare ai campi dei record (XML conforme a schema LISTA_STD.xsd; verranno aggiunti/modificati tanti record quanti i tag Riga)
1607        																-- I campi corrispondenti a colonne non specificate nei tag Riga, se si tratta di modifica, verranno settati a NULL
1608        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
1609        																-- ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
1610        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
1611        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
1612        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
1613        			ErrMsgOut			OUT 		VARCHAR2)						-- Messaggio d'errore
1614        			RETURN PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine, altrimenti 0
1615        
1616        	/***** Funzione per settare più variabili di una data sezione di un dato flusso di navigazione applicativo			*****/
1617        	/***** le variabili già settate nella sezione e non presenti in input restano invariate						*****/
1618        	/***** se la cache del flusso di navigazione non esiste, viene inizializzata								*****/
1619        	function SetSezCacheFlussoNav(
1620        			CIFlussoNavIn		IN		DMT_FLUSSI_NAV_WEB.CI_FLUSSO%TYPE,		-- (obblig.) Codice identificativo del flusso di navigazione
1621        			SezioneFlussoIn		IN		VARCHAR2,						-- (obblig.) Sezione del flusso di navigazione per cui settare le variabili
1622        			VariabiliIn			IN		CLOB,							-- (obblig.) Nomi e valore/i delle variabili da settare nella sezione (XML conforme a schema SezioneCache.xsd)
1623        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
1624        																-- ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
1625        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
1626        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
1627        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
1628        			ErrMsgOut			OUT 		VARCHAR2)						-- Messaggio d'errore
1629        			RETURN PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine, altrimenti 0
1630        
1631        	/***** Funzione per rimuovere dalla cache di un dato flusso di navigazione o un data variabile o tutte le variabili di una data sezione *****/
1632        	FUNCTION DelVarSezCacheFlussoNav(
1633        			CIFlussoNavIn		IN		DMT_FLUSSI_NAV_WEB.CI_FLUSSO%TYPE,		-- (obblig.) Codice identificativo del flusso di navigazione
1634        			SezioneFlussoIn		IN		VARCHAR2,						-- Sezione del flusso di navigazione per cui cancellare la variabile indicata o tutte le variabili (controllo in modalità case-insensitive)
1635        			NomeVariabileIn		IN		VARCHAR2,						-- Nome della variabile da cancellare(controllato in modalità case-sensitive)
1636        																-- Se NULL significa che tutte le variabili della sezione sono da cancellare
1637        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
1638        																-- ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
1639        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
1640        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
1641        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
1642        			ErrMsgOut			OUT 		VARCHAR2)						-- Messaggio d'errore
1643        			RETURN PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine, altrimenti 0
1644        
1645        	/***** Funzione per rimuovere dalla cache di un dato flusso di navigazione una lista di variabili di una data sezione*****/
1646        	FUNCTION DelVarSezCacheFlussoNav_Multi(
1647        			CIFlussoNavIn		IN		DMT_FLUSSI_NAV_WEB.CI_FLUSSO%TYPE,		-- (obblig.) Codice identificativo del flusso di navigazione
1648        			SezioneFlussoIn		IN		VARCHAR2,						-- Sezione del flusso di navigazione per cui cancellare le variabile indicate (controllo in modalità case-insensitive)
1649        			NomiVariabiliIn		IN		CLOB,							-- Lista con i nomi delle variabili da cancellare (conforme a schema LISTA_STD.xsd)
1650        																-- Ogni tag Riga contiene una sola colonna con il nome della variabile
1651        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
1652        																-- ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
1653        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
1654        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
1655        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
1656        			ErrMsgOut			OUT 		VARCHAR2)						-- Messaggio d'errore
1657        			RETURN PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine, altrimenti 0
1658        
1659        	/***** Funzione per rimuovere un record da una variabile di un dato flusso  navigazione applicativo che è una lista di record 		*****/
1660        	function DelRecVarCacheFlussoNav(
1661        			CIFlussoNavIn		IN		DMT_FLUSSI_NAV_WEB.CI_FLUSSO%TYPE,		-- (obblig.) Codice identificativo del flusso di navigazione
1662        			SezioneFlussoIn		IN		VARCHAR2,						-- Sezione eventuale del flusso di navigazione cui appartiene la variabile multi-record di cui cancellare un record
1663        			NomeVariabileIn		IN		VARCHAR2,						-- (obblig.) Nome della variabile (multi-record) di cui cancellare il record (controllato in modalità case-sensitive)
1664        			NroPaginaIn			IN		PLS_INTEGER DEFAULT 1,				-- N.ro della pagina in cui viene mostrato il record da cancellare. Se NULL si intende 1
1665        			DimPaginaIn			IN		PLS_INTEGER,					-- N.ro di record per pagina. Obbligatorio se NroPaginaIn>1
1666        			PosRecInPaginaIn		IN		PLS_INTEGER,					-- (obblig.) Posizione (interi da 1 a DimPaginaIn) che ha nella pagina il record da cancellare.
1667        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
1668        																-- ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
1669        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
1670        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
1671        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
1672        			ErrMsgOut			OUT 		VARCHAR2)						-- Messaggio d'errore
1673        			RETURN PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine, altrimenti 0
1674        
1675        	/***** Funzione per ricavare il/i valori di una data variabile di un dato flusso di  navigazione 			*****/
1676        	/***** i valori vengono restituiti mantenendo l'ordine con cui sono stati salvati in DB					*****/
1677        	function GetVarCacheFlussoNav(
1678        			CIFlussoNavIn		IN		DMT_FLUSSI_NAV_WEB.CI_FLUSSO%TYPE,		-- (obblig.) Codice identificativo del flusso da cui estrarre il valore
1679        			SezioneFlussoIn		IN		VARCHAR2,						-- Sezione del flusso di navigazione da cui estrarre la variabile indicata (controllo in modalità case-insensitive)
1680        			NomeVariabileIn		IN		VARCHAR2,						-- (obblig.) Nome della variabile della quale estrarre il valore(controllato in modalità case-sensitive)
1681        			ValoreOut			OUT		VARCHAR2,						-- Valore della variabile (di tipo semplice, cioè monovalore non strutturata) nel flusso di navigazione
1682        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
1683        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
1684        			ErrMsgOut			OUT 		VARCHAR2)						-- Messaggio d'errore
1685        			RETURN PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine , altrimenti 0
1686        
1687        	function GetVarCacheFlussoNav(
1688        			CIFlussoNavIn		IN		DMT_FLUSSI_NAV_WEB.CI_FLUSSO%TYPE,		-- (obblig.) Codice identificativo del flusso da cui estrarre il valore
1689        			SezioneFlussoIn		IN		VARCHAR2,						-- Sezione del flusso di navigazione da cui estrarre la variabile indicata (controllo in modalità case-insensitive)
1690        			NomeVariabileIn		IN		VARCHAR2,						-- (obblig.) Nome della variabile della quale estrarre il valore(controllato in modalità case-sensitive)
1691        			ValoreOut			OUT 		CLOB,							-- Valore/i della variabile (XML conforme a schema LISTA_STD.xsd)
1692        																-- Ogni valore è un tag Riga
1693        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
1694        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
1695        			ErrMsgOut			OUT 		VARCHAR2)						-- Messaggio d'errore
1696        			RETURN PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine e il progressivo è generato, altrimenti 0
1697        
1698        	/***** Funzione per ottenere il contenuto di una sequenza di record da una variabile di un dato flusso  navigazione applicativo che è una lista di record 		*****/
1699        	function GetRecVarCacheFlussoNav(
1700        			CIFlussoNavIn		IN		DMT_FLUSSI_NAV_WEB.CI_FLUSSO%TYPE,		-- (obblig.) Codice identificativo del flusso di navigazione
1701        			SezioneFlussoIn		IN		VARCHAR2,						-- Sezione eventuale del flusso di navigazione cui appartiene la variabile multi-record di cui ottenere il record
1702        			NomeVariabileIn		IN		VARCHAR2,						-- (obblig.) Nome della variabile (multi-record) di cui ottenere il record (controllato in modalità case-sensitive)
1703        			NroPaginaIn			IN		PLS_INTEGER DEFAULT 1,				-- N.ro della pagina in cui viene mostrato il primo dei record da ottenere. Se NULL si intende 1
1704        			DimPaginaIn			IN		PLS_INTEGER,					-- N.ro di record per pagina. Obbligatorio se NroPaginaIn>1
1705        			PosRecInPaginaIn		IN		PLS_INTEGER,					-- (obblig.) Posizione (interi da 1 a DimPaginaIn) che ha nella pagina il primo dei record da ottenere.
1706        			NroRecordIO			IN OUT	PLS_INTEGER,					-- in input è il n.ro di record da estrarre. Se NULL si intende 1.
1707        																-- in output è il n.ro di record estratti
1708        			ValoreRecordOut		OUT		CLOB,							-- Valore/i dei campi dei record (XML conforme a schema LISTA_STD.xsd e contenente un n.ro di tag Riga pari al valore di output di NroRecordIO)
1709        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
1710        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
1711        			ErrMsgOut			OUT 		VARCHAR2)						-- Messaggio d'errore
1712        			RETURN PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine, altrimenti 0
1713        
1714        
1715        	/***** Funzione per estrarre i valori di tutte le variabili di una data sezione di un dato flusso di navigazione applicativo	*****/
1716        	function GetSezCacheFlussoNav(
1717        			CIFlussoNavIn		IN		DMT_FLUSSI_NAV_WEB.CI_FLUSSO%TYPE,		-- (obblig.) Codice identificativo del flusso di navigazione
1718        			SezioneFlussoIn		IN		VARCHAR2,						-- (obblig.) Sezione del flusso di navigazione per cui estrarre i valori di tutte le variabili
1719        			FlgTipoVarIn		IN		VARCHAR2 DEFAULT NULL,				-- (valori S/L/NULL) Tipo di variabili da estrarre: se valorizzato significa che vanno estratte solo le variabili semplici (se S) o solo quelle di tipo lista (se L)
1720        			VariabiliOut		OUT		CLOB,							--  Nomi e valore/i delle variabili della sezione (XML conforme a schema SezioneCache.xsd)
1721        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
1722        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
1723        			ErrMsgOut			OUT 		VARCHAR2)						-- Messaggio d'errore
1724        			RETURN PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine, altrimenti 0
1725        
1726        	/***** Funzione per ottenere i nomi e i valori delle variabili 		 ******/
1727        	/***** contenute in un XML di tipo sezione cache 				 ******/
1728        	function GetVariablesFromXMLSezCache(
1729        			XMLIn				IN		CLOB							-- XML conforme a SezioneCache.xsd
1730        			) return DMTO_VAR_SEZ_CACHE;   								-- restituisce la lista delle variabili semplici e complesse
1731        																-- In ogni elemento della table di result:
1732        			  		 			 								-- NOME: contiene il nome della variabile
1733        																-- FLG_TIPO_SEMPLICE = è 1 se è una variabile con valore semplice, altrimenti NULL
1734        																-- VALORE_SEMPLICE: contiene il valore della variabile se semplice
1735        																-- VALORE_COMPLESSO: contiene il valore della variabile se complessa; ogni riga del valore complesso è un varray DMVA_STRING
1736        
1737        	/***** Funzione per ottenere il valore di una data variabile semplice (di dimensione anche > 4000 caratteri) ******/
1738        	/***** contenuta in un XML di tipo sezione cache 				 											 ******/
1739        	function GetVariableClobFromXMLSezCache(
1740        			XMLIn				IN		CLOB,					-- XML conforme a SezioneCache.xsd
1741        			NomeVariabileIn		IN		VARCHAR2				-- Nome della variabile da recuperare
1742        			) return CLOB;   									-- restituisce il valore della variabile, se presente, come CLOB
1743        
1744        	/**** Funzione per ottenere il codice di una funzione	a partire dalle tre parti COD_FUNZ_P1, COD_FUNZ_P2, COD_FUNZ_P3 ******/
1745        	function GetCodFunz(
1746        			CodFunzP1In			IN		DMT_FUNZIONI.COD_FUNZ_P1%type,
1747        			CodFunzP2In			IN		DMT_FUNZIONI.COD_FUNZ_P2%type DEFAULT NULL,
1748        			CodFunzP3In			IN		DMT_FUNZIONI.COD_FUNZ_P3%type DEFAULT NULL)
1749        			return VARCHAR2;											-- Codice della funzione, se esiste, altrimenti NULL
1750        
1751        	/**** Funzione per convertire una lista di attributi (non predefiniti e quindi da tipizzare) fornita come XML (secondo schema LISTA_STD.xsd) in una struttura di tipo DMTO_ATTR_VALUES 	*****/
1752        	/**** I valori di un attributo vengono riportati nella struttura di output rispettando l'ordine con cui figurano nell'XML in input										*****/
1753        	function ConvertXMLToAltriAttrTab(
1754        			AltriAttributiXMLIn	IN		CLOB,							-- XML con gli attributi (XML conforme a schema LISTA_STD.xsd)
1755        																-- Ogni valore è un tag Riga che contiene 3 colonne che devono essere tutte valorizzate:
1756        																-- 1: (obblig.) Nome dell'attributo (stringa lung. max. 250)
1757        																-- 2: (obblig.) Tipo del valore (valori possibili: S=Stringa, N=Numerico, D=Data/Timestamp)
1758        																-- 3: (obblig.) Valore (se è un numerico deve avere la "," come separatore dei decimali; se è una data deve avere il formato DD/MM/RRRR HH24:MI:SS)
1759        																-- Un attributo con un certo nome può avere più valori (tutti dello stesso tipo)
1760        			AltriAttributiTabOut	OUT		DMTO_ATTR_VALUES,					-- Oggetto tabella con gli attributi ricavati dall'XML
1761        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
1762        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
1763        			ErrMsgOut			OUT 		VARCHAR2						-- Messaggio d'errore
1764        			) RETURN PLS_INTEGER;										-- Vale 1 se la conversione è andata a buon fine, altrimenti 0
1765        
1766        	/****** Funzione per ricavare dall'id. di un processo alcuni dati basilari dello stesso *******/
1767        	function GetBasicInfoProcess(
1768        			IdProcessIn			IN		DMT_PROCESSES.ID_PROCESS%type,		--(obblig) Identificativo del processo di cui estrarre i dati base
1769        			IdProcessTypeOut		OUT		DMT_PROCESSES.ID_PROCESS_TYPE%type,		-- Identificativo del tipo del processo
1770        			CITypeFlussoWFOut		OUT		DMT_PROCESSES.PROV_CI_TY_FLUSSO_WF%type,	-- Codice identificativo del tipo dell'eventuale flusso workflow associato al processo
1771        			CIFlussoWFOut		OUT		DMT_PROCESSES.PROV_CI_FLUSSO_WF%type,	-- Codice identificativo dell'eventuale flusso workflow associato al processo
1772        			FlgTpObjProcessOnOut	OUT		VARCHAR2,						-- Indica se il processo è realtivo a: C = Copia di unità documentaria; U = Unità documentaria; F = Folder
1773        			IdObjProcessOnOut		OUT		INTEGER						-- Identificativo della copia di unità documentaria, unità documentaria o folder cui è relativo il processo. Valorizzato solo se lo è FlgTpObjProcessOnOut.
1774        			) RETURN PLS_INTEGER;										-- restituisce 1 se tutto ok, 0 in caso di errore
1775        
1776        
1777        	/****** funzione per creare un nodo "Variabile" con valore lista in un XML conforme allo schema SezioneCache.xsd *******/
1778        	function CreaNodoVarListaXMLSezCache(
1779        			NomeVariabileIn		IN		VARCHAR2,						-- (obblig.) Valore da dare al tag "Nome" del tag "Variabile" da creare
1780        			XMLListaIn			IN		CLOB							-- XML conforme allo schema LISTA_STD.xsd con il contenuto del tag "Lista" del tag "Variabile" da creare
1781        			) return CLOB;											-- clob con il tag "Variabile" creato
1782        
1783        	/****** funzione per aggiungere un nodo "Variabile" con valore lista in un XML conforme allo schema SezioneCache.xsd *******/
1784        	/****** se il nodo realtivo a quella variabile già c'era il pre-esistente viene rimpiazzato					*******/
1785        	function AddVarListaXMLSezCache(
1786        			XMLSezioneCacheIO		IN OUT	NOCOPY CLOB,					-- XML conforme allo schema SezioneCache.xsd in cui aggiungere un tag "Variabile" con valore "Lista"
1787        																-- Se NULL viene inizializzato dalla function stessa
1788        			NomeVariabileIn		IN		VARCHAR2,						-- (obblig.) Valore da dare al tag "Nome" del tag "Variabile" da aggiungere
1789        			XMLListaIn			IN		CLOB,							-- XML conforme allo schema LISTA_STD.xsd con il contenuto del tag "Lista" del tag "Variabile" da aggiungere
1790        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
1791        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
1792        			ErrMsgOut			OUT 		VARCHAR2						-- Messaggio d'errore
1793        			) RETURN PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine, altrimenti 0
1794        
1795        	/****** funzione per creare un nodo "Variabile" con valore semplice in un XML conforme allo schema SezioneCache.xsd *******/
1796        	function CreaNodoVarSempliceXMLSezCache(
1797        			NomeVariabileIn		IN		VARCHAR2,						-- (obblig.) Valore da dare al tag "Nome" del tag "Variabile" da creare
1798        			ValoreSempliceIn		IN		VARCHAR2						-- Valore da dare al tag "ValoreSemplice" del tag "Variabile" da creare
1799        			) return CLOB;											-- clob con il tag "Variabile" creato
1800        
1801        	/****** funzione per creare un nodo "Variabile" con valore semplice in un XML conforme allo schema SezioneCache.xsd *******/
1802        	function CreaNodoVarSemplXMLSezCacheCl(
1803        			NomeVariabileIn		IN		VARCHAR2,						-- (obblig.) Valore da dare al tag "Nome" del tag "Variabile" da creare
1804        			ValoreSempliceIn		IN		CLOB						-- Valore da dare al tag "ValoreSemplice" del tag "Variabile" da creare
1805        			) return CLOB;											-- clob con il tag "Variabile" creato
1806        
1807        	/****** funzione per aggiungere un nodo "Variabile" con valore semplice in un XML conforme allo schema SezioneCache.xsd *******/
1808        	/****** se il nodo realtivo a quella variabile già c'era il pre-esistente viene rimpiazzato					*******/
1809        	function AddVarSempliceXMLSezCache(
1810        			XMLSezioneCacheIO		IN OUT	NOCOPY CLOB,					-- XML conforme allo schema SezioneCache.xsd in cui aggiungere un tag "Variabile" con valore "Lista"
1811        																-- Se NULL viene inizializzato dalla function stessa
1812        			NomeVariabileIn		IN		VARCHAR2,						-- (obblig.) Valore da dare al tag "Nome" del tag "Variabile" da aggiungere
1813        			ValoreSempliceIn		IN		VARCHAR2,						-- Valore da dare al tag "ValoreSemplice" del tag "Variabile" da aggiungere
1814        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
1815        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
1816        			ErrMsgOut			OUT 		VARCHAR2						-- Messaggio d'errore
1817        			) RETURN PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine, altrimenti 0
1818        
1819        	/****** funzione per aggiungere un nodo "Variabile" con valore semplice in un XML conforme allo schema SezioneCache.xsd *******/
1820        	/****** se il nodo realtivo a quella variabile già c'era il pre-esistente viene rimpiazzato					*******/
1821        	function AddVarSemplXMLSezCacheCl(
1822        			XMLSezioneCacheIO		IN OUT	NOCOPY CLOB,					-- XML conforme allo schema SezioneCache.xsd in cui aggiungere un tag "Variabile" con valore "Lista"
1823        																-- Se NULL viene inizializzato dalla function stessa
1824        			NomeVariabileIn		IN		VARCHAR2,						-- (obblig.) Valore da dare al tag "Nome" del tag "Variabile" da aggiungere
1825        			ValoreSempliceIn		IN		CLOB,						-- Valore da dare al tag "ValoreSemplice" del tag "Variabile" da aggiungere
1826        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
1827        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
1828        			ErrMsgOut			OUT 		VARCHAR2						-- Messaggio d'errore
1829        			) RETURN PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine, altrimenti 0
1830        
1831        	/***** Funzione per ottenere i dati di un indirizzo/luogo legato ad un soggetto della rubrica soggetti esterni ******/
1832        	function GetIndirizzoSoggRubrica(
1833        			IdSoggRubricaIn		IN		DMT_RUBRICA_SOGGETTI.ID_SOGG_RUBRICA%type,-- (obblig.) Identificativo del soggetto della rubrica di cui si ricerca un indirizzo
1834        			CodTipoIndIn		IN		VARCHAR2,						-- (obblig.) Codice del tipo dell'indirizzo/luogo relativo al soggetto che si vuole ottenere (valori da dizionario)
1835        			FlgUltimoIn			IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL) Indica se l'indirizzo ricercato è l'ultimo de dato tipo per il soggetto
1836        			TsVldIn			IN 		VARCHAR2 DEFAULT TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS')
1837        																-- Stinga con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) a cui deve essere valido l'indirizzo
1838        																-- Viene considerato solo se FlgUltimoIn è diverso da 1, e in tal caso se non è valorizzato si intende pari a data e ora correnti
1839        			) return DMO_ESTREMI_INDIRIZZO;								-- Restituisce un oggetto con i dati dell'indirizzo, se esiste; altrimenti restituisce NULL (anche in caso d'errore)
1840        
1841        	/*********** Funzione per controllare i dati principali di un soggetto esterno					**********/
1842        	/*********** I dati vengono rielaborati e restituiti pronti per l'inserimento/aggiornamento in rubrica	**********/
1843        	function CtrlDatiSoggEsterno(
1844        			IdDominioIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- Identificativo del dominio (soggetto produttore o AOO) di lavoro (se NULL significa che il dominio è lo schema)
1845        			DatiSoggXMLIO		IN OUT	NOCOPY CLOB,					-- Dati del soggetto esterno da controllare e rielaboare (tag XML fatto come un tag "Riga" dello schema LISTA_STD.xsd)
1846        																-- Il tag "Riga" può contenere le seguenti colonne:
1847        																-- 1:  Denominazione/cognome del soggetto
1848        																-- 2:	 Nome del soggetto (se persona fisica)
1849        																-- 3:  (valori 1/0/NULL) Indicatore se persona fisica (1) o giuridica (0 o NULL)
1850        																-- 4:  Codice fiscale del soggetto
1851        																-- 5:  Partita IVA del soggetto
1852        																-- 6:  Data di nascita/istituzione del soggetto (nel formato del parametro di conf. FMT_STD_DATA)
1853        																-- 7: (valori M/F) Sesso del soggetto (se persona fisica): M = Maschio, F = Femmina
1854        																-- 8: Codice ISTAT del comune (se italiano) di nascita/istituzione del soggetto
1855        																-- 9: Nome del comune (italiano o estero) di nascita/istituzione del soggetto
1856        																-- 10: Codice ISTAT dello stato di nascita/istituzione del soggetto
1857        																-- 11: Nome dello stato di nascita/istituzione del soggetto
1858        																-- 12: Codice ISTAT dello stato di cittadinanza del soggetto
1859        																-- 13: Nome dello stato di cittadinanza del soggetto
1860        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
1861        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
1862        			ErrMsgOut			OUT 		VARCHAR2,						-- Messaggio d'errore
1863        			FlgEscludiCtrlSuCFIn	IN		PLS_INTEGER DEFAULT NULL)			-- (1/0/NULL) Se 1 non vengono fatti controlli formali sul cod. fiscale delle persone fisiche
1864        			return PLS_INTEGER;										-- Vale 1 se il controllo è andato a buon fine, altrimenti 0
1865        
1866        	/*********** Funzione per controllare i dati di un indirizzo (esclusi quelli che lo legano ad un soggetto o altra entità)	**********/
1867        	/*********** I dati vengono rielaborati e restituiti pronti per l'inserimento/aggiornamento in DB					**********/
1868        	function CtrlDatiIndirizzo(
1869        			IdDominioIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- Identificativo del dominio (soggetto produttore o AOO) di lavoro (se NULL significa che il dominio è lo schema)
1870        			DatiIndirizzoXMLIO	IN OUT	NOCOPY CLOB,					-- Dati dell'indirizzo da controllare e rielaboare (tag XML fatto come un tag "Riga" dello schema LISTA_STD.xsd)
1871        																-- Il tag "Riga" può contenere le seguenti colonne:
1872        																-- 1: Codice identificativo toponomastico (se indirizzo censito nella toponomastica del sistema; viene considerato solo se è valorizzata anche la colonna successiva)
1873        																-- 2: Indirizzo (senza civico) (alternativo o ridondante rispetto al campo precedente)
1874        																--	  In input può contenere anche il tipo di toponimo (i.e. via, piazza, vicolo ecc); in output no, se il tipo di toponimo c'è ed è uno di quelli censiti (il tipo di toponimo in questo caso si trova in colonna 15)
1875        																-- 3: N. civico (senza appendici, che sono in colonna 15)
1876        																-- 4: Interno
1877        																-- 5: Scala
1878        																-- 6: Piano
1879        																-- 7: CAP
1880        																-- 8: Frazione
1881        																-- 9: Codice ISTAT del comune italiano
1882        																-- 10: Nome del comune italiano o della città (se estera)
1883        																-- 11: Codice ISTAT dello stato
1884        																-- 12: Nome dello stato
1885        																-- 13: Zona
1886        																-- 14: Complemento (i.e. altri dati) indirizzo
1887        																-- 15: Tipo di toponimo dell'indirizzo (i.e. via, piazza, vicolo ecc: deve essere uno di quelli censiti). In output viene sempre valorizzato anche se in input era in colonna 3
1888        																-- 16: Appendici del n.ro civico (esponente, colore, bis/ter ecc)
1889        			TsVldIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'),
1890        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) al quale l'indirizzo deve essere valido. Se non valorizzato si intende sysdate
1891        			FlgIndObbligIn		IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL) Se 1 si controlla che il campo indirizzo (il 2°) sia specificato, altrimenti si può specificare solo comune o stato
1892        			FlgSoloIndInViarioIn	IN		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se 1 si controlla che l'indirizzo sia nel viario del sistema
1893        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
1894        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
1895        			ErrMsgOut			OUT 		VARCHAR2)						-- Messaggio d'errore
1896        			return PLS_INTEGER;										-- Vale 1 se il controllo è andato a buon fine, altrimenti 0
1897        
1898        	/******* Funzione per verificare se un soggetto esiste in rubrica soggetti e vi è identificabile univocamente												******/
1899        	/******* Il match con i soggetti della rubrica segue i seguenti criteri: 																		******/
1900        	/******* per i soggetti in rubrica i campi corrispondenti ai dati del soggetto che compaiono in input, valorizzati o meno che siano, sono uguali al corrispondente campo in input  	******/
1901        	/******* per i soggetti in rubrica i campi corrispondenti ai dati del soggetto che NON compaiono in input possono essere non valorizzati o valorizzati in qualsiasi modo 		******/
1902        	/******* La funzione restituisce l'Id. del soggetto in rubrica solo se a partire dagli estremi immessi riesce a identificarlo univocamente							******/
1903        	/******* I dati passati in input vengono restituiti comunque rielaborati (ad es. ricavando data di nascita dal cod. fiscale o il codice del comune di residenza dal suo nome ecc.);	******/
1904        	/******* è possibile (richiedendolo con apposito input) far sì che siano restituiti completando i dati del soggetto che in input mancavano con quelli del sogg. di rubrica trovato	******/
1905        	function FindSoggettoInRubrica(
1906        			IdDominioIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- Identificativo del dominio (soggetto produttore o AOO) di lavoro (se NULL significa che il dominio è lo schema)
1907        			DatiSoggXMLIO		IN OUT	NOCOPY CLOB,					-- Dati del soggetto (tag XML fatto come un tag "Riga" dello schema LISTA_STD.xsd)
1908        																-- Le colonne che mancano del tutto sono campi che per il soggetto di rubrica da trovare possono assumere qualsiasi valore (NULL incluso).
1909        																-- Le colonne presenti ma non valorizzate sono campi che si vuole che siano non valorizzati anche sul soggetto di rubrica da trovare.
1910        																-- Le colonne possibili sono:
1911        																-- 1:  Denominazione primaria/cognome del soggetto
1912        																-- 2:  Nome del soggetto (se persona fisica)
1913        																-- 3:  (valori 1/0/NULL) Indicatore di persona fisica (1) o giuridica (0 o NULL)
1914        																-- 4:  Codice fiscale del soggetto
1915        																-- 5:  Partita IVA del soggetto
1916        																-- 6:  Data di nascita/istituzione del soggetto (nel formato del parametro di conf. FMT_STD_DATA)
1917        																-- 7: (valori M/F) Sesso del soggetto (se persona fisica): M = Maschio, F = Femmina
1918        																-- 8:  Codice ISTAT del comune (italiano) di nascita/istituzione del soggetto (viene considerato solo se è valorizzata anche la colonna successiva)
1919        																-- 9:  Nome del comune italiano di nascita/istituzione del soggetto
1920        																-- 10: Codice ISTAT dello stato di nascita/istituzione del soggetto (viene considerato solo se è valorizzata anche la colonna successiva)
1921        																-- 11: Nome dello stato di nascita/istituzione del soggetto
1922        																-- 12: Codice ISTAT dello stato di cittadinanza del soggetto (viene considerato solo se è valorizzata anche la colonna successiva)
1923        																-- 13: Nome dello stato di cittadinanza del soggetto
1924        																-- 14: Identificativo del soggetto in rubrica
1925        																-- 15: Codice identificativo toponomastico dell'indirizzo di residenza/sede legale (se indirizzo censito nella toponomastica del sistema; viene considerato solo se è valorizzata anche la colonna successiva)
1926        																-- 16: Indirizzo di residenza/sede legale (senza civico) In input può essere comprensivo del tipo di toponimo (via, piazza ecc), in output l'eventuale toponimo viene separato e messo in colonna 25
1927        																-- 17: Civico (solo il N. senza appendici che sono in colonna 26) della residenza/sede legale
1928        																-- 18: Frazione della residenza/sede legale
1929        																-- 19: Codice ISTAT del comune italiano di residenza/sede legale (viene considerato solo se è valorizzata anche la colonna successiva)
1930        																-- 20: Nome del comune italiano o della città (se estera) di residenza/sede legale
1931        																-- 21: Codice ISTAT dello stato di residenza/sede legale (viene considerato solo se è valorizzata anche la colonna successiva)
1932        																-- 22: Nome dello stato di residenza/sede legale
1933        																-- 23: Zona della residenza/sede legale
1934        																-- 24: Complemento indirizzo di residenza/sede legale
1935        																-- 25: Tipo di toponimo (i.e. via, vicolo ecc) dell'indirizzo di residenza/sede legale
1936        																-- 26: Appendici (esponente, colore, bis/ter ecc) del N. civico dell'indirizzo di residenza/sede legale
1937        																-- 27: Codice rapido del soggetto
1938        																-- 28: Cod. tipo di soggetto (di dettaglio se c'è, se no quello principale). Tra i valori possibili: UOI=UO/ufficio interno, AOOI=AOO interna, UP=Unità di personale (interna), AOOE= AOO di altra PA
1939        																-- 29: Decrizione del tipo di soggetto
1940        																-- 30: Denominazione sintetica
1941        																-- 31: ID_UO della UO che corrisponde al soggetto (solo in output, in input NON viene considerata)
1942        																-- 32: ID_USER dell'utente che corrisponde al soggetto (solo in output, in input NON viene considerata)
1943        																-- 33: ID_SCRIVANIA dell'unica scrivania virtuale attualmente occupata nell'organigramma dall' utente che corrisponde al soggetto (solo in output, in input NON viene considerata)
1944        																-- 34: Codice della categoria del soggetto: #APA; #IAMM; UO;UOI; UP; #AF; #AG
1945        																-- 		Possono essere anche più di uno separati da ,
1946        																-- 35: PROV_CI_UO della UO che corrisponde al soggetto (solo in output, in input NON viene considerata)
1947        																-- 36: (valori 1/0, solo in output, in input NON viene considerata) Flag di assegnazione inibita (=1) al soggetto, se presente in organigramma
1948        																-- 37: (valori 1/0 solo in output, in input NON viene considerata) Flag di invio per conoscenza inibito (=1) al soggetto, se presente in organigramma
1949        																-- 38: Username dell'utente che corrisponde al soggetto (solo in output, in input NON viene considerata)
1950        																-- 39: (valori 1/0) Se 1 è selezionabile come assegnatario
1951        																--		La colonna viene valorizzata solo in output e solo se FinalitaIn è valorizzata
1952        																-- Almeno una tra le colonne 1, 4, 5, 27, 30 deve essere valorizzata
1953        			FlgSoloVldIn		IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL) Indica se il soggetto deve essere valido e attivo (1) o no (al timestamp TsRifIn)
1954        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'),
1955        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) di riferimento al quale il soggetto deve avere gli estremi specificati in input. Se non valorizzato si intende sysdate
1956        			FlgCompletaDatiDaRubrIn	IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL) Se 1 indica che qualora si identifichi univocamente il soggetto in rubrica (return 1) DatiSoggXMLIO viene restituito con i dati del soggetto trovato
1957        			IdSoggInRubricaOut	OUT		DMT_RUBRICA_SOGGETTI.ID_SOGG_RUBRICA%type,-- Identificativo del soggetto di rubrica trovato
1958        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
1959        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
1960        			ErrMsgOut			OUT 		VARCHAR2,						-- Messaggio d'errore
1961        			FlgInOrganigrammaIn	IN			VARCHAR2 DEFAULT NULL,		-- Restringe la ricerca ai soli soggetti che sono nell'organigramma in vigore
1962        																		-- Può essere valorizzato a: UO = Unità Organizzative
1963        																		-- 							 SV = Scrivanie virtuali
1964        																		--							 UT = Utenti in organigramma
1965        																		-- può anche essere una concatenazione dei precedenti valori separati da ; (es UO;SV)
1966        			IdUserLavoroIn		IN			INTEGER DEFAULT NULL,		-- Id. dell'utente di lavoro (delegante se si lavora in delega se non utente loggato)
1967        			FinalitaIn			IN			VARCHAR2 DEFAULT NULL,		-- Motivo per cui viene chiamata la Find. Valori ammessi:
1968        																		-- MITT_DEST_CARTACEO = Per selezionare la UO/utente/scrivania mittente o destinatario di documantazione cartacea
1969        																		-- MITT_DEST_NO_CARTACEO = Per selezionare la UO/utente/scrivania mittente o destinatario di documantazione NON cartacea
1970        																		-- MITT_DEST = Per selezionare la UO/utente/scrivania mittente o destinatario di documantazione
1971        			IdUDIn				IN			INTEGER DEFAULT NULL)		-- Id. dell'UD a cui è legato il soggetto da cercare (come mittente o destinatario)
1972        																		-- Viene considerata solo se FinalitaIn è valorizzata e serve per il calcolo di colonna 39 dei dati del soggetto
1973        			return PLS_INTEGER;											-- Vale 1 se il soggetto è stato individuato univocamente, altrimenti 0
1974        
1975        	/****** funzione da richiamare per costruire il custom-tag con i livelli di un oggetto (tipo UO, classificazione) relativo ad una gerarchia ******/
1976        	function GetInfoLivelliForGUI(
1977        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,
1978        																-- (obblig). Codice identificativo del token di connessione
1979        			TargetIn			IN		VARCHAR2,						-- (obblig.) Per chi costruire i livelli: valori ammessi:
1980        																-- UO=Unità operativa
1981        																-- CL=Classificazione
1982        			LivelliStrIn		IN		VARCHAR2 DEFAULT NULL,				-- Stringa con i n.ri livello da mettere nei vari campi (vanno indicati come appaiono nella GUI, ovvero romani se previsto, 0 o -- se nulli; vanno separati dal separatore dei livelli valido per livelli di un oggetto del tipo TargetIn nel dominio lavoro)
1983        			IdPianoClassifIn		IN		DMT_PIANI_CLASSIF.ID_PIANO_CLASSIF%type DEFAULT NULL,
1984        																		-- Id. del piano di classificazione cui è relativa la classifica da rappresentare. Se non specificato si intende il piano attualmente in vigore per il soggetto produttore/AOO
1985        			SeparatoreOut		OUT		VARCHAR2,						-- Separatore con cui i livelli sono impachettati in una stringa unica
1986        			LivelliOut			OUT		NOCOPY CLOB,					-- Lista con le informazione relative ai vari livelli (XML conforme a LISTA_STD-xsd)
1987        																-- Ogni tag "Riga" rappresenta un livello e contiene le seguenti colonne:
1988        																-- 1 : Size del livello (a video)
1989        																-- 2 : Massimo numero di caratteri del livello
1990        																-- 3 : (valori 1/0) Indicatore di livello numerico (arabo) se 1 o alfanumerico se 0
1991        																-- 4 : Valore da livello
1992        																-- 5 : Label del livello
1993        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
1994        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
1995        			ErrMsgOut			OUT 		VARCHAR2)						-- Messaggio d'errore
1996        			return PLS_INTEGER;										-- Vale 1 se tutto è andato a buon fine, altrimenti 0
1997        
1998        	/******* serve a ricercare una tipologia di evento (eventualmente relativa ad un dato sogg. produttore o AOO o applicativo verticale) a partire da id. e/o nome		******/
1999        	/******* restituisce l'Id. della tipologia solo se a partire dagli estremi immessi riesce a identificarla univocamente			 						******/
2000        	function FindEventType(
2001        			IdSpAOOIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- Identificativo del soggetto produttore o AOO per cui deve esistere la tipologia
2002        			IdEventTypeIn		IN 		DMT_EVENT_TYPES.ID_EVENT_TYPE%type DEFAULT NULL,
2003        																-- Identificativo della tipologia
2004        			DesEventTypeIn		IN		DMT_EVENT_TYPES.DES_EVENT_TYPE%type DEFAULT NULL,
2005        																-- Nome della tipologia (o suo inizio; ricerca case insensitive in like).
2006        			FlgSoloVldIn		IN		PLS_INTEGER DEFAULT 1,				-- (valori 1/0/NULL) Indica se la tipologia deve essere valida (1) o no
2007        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'),
2008        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) di riferimento al quale la tipologia deve avere gli estremi specificati in input. Se non valorizzato si intende sysdate
2009        
2010        			CodApplEsternaIn		IN		VARCHAR2 DEFAULT NULL,			-- Codice eventuale applicazione esterna da cui si sta lavorando
2011        			CodIstanzaApplEstIn	IN		VARCHAR2 DEFAULT NULL				-- (solo se applicazione esterna multi-istanza) Codice eventuale istanza dell'applicazione esterna da cui si sta lavorando
2012        			) return INTEGER;											-- restituisce ID_EVENT_TYPE della tipologia se individuata, altrimenti NULL
2013        
2014        	/********** funzione che controlla (e in caso di controllo positivo "spacchetta") una stringa con una lista di denominazioni di soggetti esterni che: 											******/
2015        	/**********	a) sono separati da ;																															******/
2016        	/**********	b) possono essere soggetti prelevati dalla rubrica soggetti, nel qual caso la denominazione è seguita da [<ID_SOGG_RUBRICA>] o [RS<ID_SOGG_RUBRICA>]										******/
2017        	/********** c) possono essere soggetti prelevati dalla rubrica e presenti anche in anagrafe residenti/ditte, nel qual caso la denominazione è seguita da [*<PROV_CI_SOGG>], con PROV_CI_SOGG del soggetto in rubrica	******/
2018        	/**********	d) possono essere nominativi esterni già associati al processo/procedimento (IdProcessIn) in cui l'oggetto (unità documentaria, folder) cui si riferiscono i nominativi è accquisito/prodotto/lavorato	******/
2019        	/**********		in questo caso la denominazione è seguita da [**<ID_RELAZIONE>] o [NP<ID_RELAZIONE>], con ID_RELAZIONE del nominativo in tabella DMT_PROCESS_SOGG_EST									******/
2020        	function CtrlStringaNominativiEsterni(
2021        			ListaNominativiStrIn		IN		VARCHAR2,					-- Stringa con la lista dei nominativi esterni da controllare e spacchettare
2022        			IdProcessIn				IN		DMT_PROCESSES.ID_PROCESS%type DEFAULT NULL,
2023        																-- Eventuale id. del processo a cui sono relativi alcuni dei nominativi specificati
2024        			ListaNominativiXMLOut		OUT		NOCOPY CLOB,				-- Lista con i dati dei nominativi trovati nella stringa in input (XML conforme a schema LISTA_STD.xsd)
2025        																-- Ogni nominativo è un tag Riga che può contenere le seguenti colonne:
2026        																-- 	1: Id. del soggetto in rubrica soggetti
2027        																--	2: (valori 1/0) Se 1 indica che il soggetto è una persona fisica
2028        																--	3: Denominazione (se persona giuridica) o cognome (se persona fisica)
2029        																--	4: Nome (se persona fisica)
2030        																--	5: Codice fiscale
2031        																--	6: Partita IVA
2032        																--	7: Sesso (valori F/M/NULL) (se persona fisica)
2033        																--	8: Data di nascita/istituzione (nel formato dato dal parametro FMT_STD_DATA)
2034        																--	9: Codice ISTAT del comune di nascita/istituzione
2035        																--	10: Codice ISTAT dello stato estero di nascita/istituzione
2036        																--	11: Codice ISTAT dello stato di cittadinanza
2037        																--	12: Cod. toponomastico della via/piazza ecc. dell'indirizzo fisico di invio al nominativo come destinatario (se invio tramite posta ordinaria)
2038        																--	13: Nome della via/piazza ecc. dell'indirizzo fisico di invio al nominativo come destinatario (se invio tramite posta ordinaria)
2039        																--	14: Località dell'indirizzo fisico di invio al nominativo come destinatario (se invio tramite posta ordinaria) (alternativo al campo precedente qunado si tratta di via/piazza ecc. al di fuori del viario)
2040        																--	15: N.ro civico (con eventuale esponente o colore) dell'indirizzo fisico di invio al nominativo come destinatario (se invio tramite posta ordinaria)
2041        																--	16: Interno del civico dell'indirizzo fisico di invio al nominativo come destinatario (se invio tramite posta ordinaria)
2042        																--	17: Scala del civico dell'indirizzo fisico di invio al nominativo come destinatario (se invio tramite posta ordinaria)
2043        																--	18: Piano nel civico dell'indirizzo fisico di invio al nominativo come destinatario (se invio tramite posta ordinaria)
2044        																--	19: Codice Avviamento Postale dell'indirizzo fisico di invio al nominativo come destinatario (se invio tramite posta ordinaria)
2045        																--	20: Codice istat del comune (se italiano) dell'indirizzo fisico di invio al nominativo come destinatario (se invio tramite posta ordinaria)
2046        																--	21: Nome del comune/città dell'indirizzo fisico di invio al nominativo come destinatario (se invio tramite posta ordinaria)
2047        																--	22: Codice istat dello stato estero dell'indirizzo fisico di invio al nominativo come destinatario (se invio tramite posta ordinaria)
2048        																--	23: Nome dello stato estero dell'indirizzo fisico di invio al nominativo come destinatario (se invio tramite posta ordinaria)
2049        																--	24: Indirizzo e-mail di invio al nominativo come destinatario (se invio tramite posta elettronica)
2050        																--	25: Codice del soggetto in anagrafe residenti/ditte esterna
2051        																-- ATTENZIONE: se la 1a colonna è valorizzata le colonne da 2 a 11 non sono mai presenti, in quanto gli attributi corrispondenti del nominativo si intendono come quelli con cui appare in rubrica
2052        																--			le colonne da 12 in poi possono essere valorizzate solo se il nominativo era già associato al processo
2053        			ErrContextOut			OUT		VARCHAR2,					-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
2054        			ErrCodeOut				OUT		PLS_INTEGER,				-- N.ro errore di uscita
2055        			ErrMsgOut				OUT 		VARCHAR2)					-- Messaggio d'errore
2056        			return PLS_INTEGER;										-- Vale 1 se il controllo è andato a buon fine, altrimenti 0
2057        
2058        	/****** funzione per testare se un certo nome di oggetto di schema DB è un sinonimo verso un oggetto remoto (puntato tramite DB LINK) *****/
2059        	function TestIfRemoteObject (
2060        			ObjectNameIn			IN		VARCHAR2)					-- nome (sinonimo) con cui l'oggetto viene risolto
2061        			return PLS_INTEGER;										-- se 1 il test è positivo, ovvero l'oggetto è remoto
2062        																-- se 0 non è un oggetto remoto
2063        																-- valori negativi in caso di errore (oggetto inesistente ecc.)
2064        
2065        	/****** funzione per testare se in una stringa ci sono caratteri speciali. Se ne viene trovato uno, viene restituito in SpecCharOut  *****/
2066        	function TestSpecChr(StrIn IN VARCHAR2, SpecCharOut OUT VARCHAR2)
2067        	return PLS_INTEGER;
2068        
2069        	/****** funzione per ricavare da un indirizzo email gli estremi del soggetto (utente, UO o soggetto esterno) che gli corrisponde ******/
2070        	function GetIdentityFromEmailAddress (
2071        			CodIdConnectionTokenIn		IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,
2072        																-- (obblig). Codice identificativo del token di connessione
2073        			EmailAddressIn			IN		VARCHAR2,					-- (obblig.) Indirizzo e-mail
2074        			FlgSoloInterniIn			IN		PLS_INTEGER DEFAULT NULL,		-- (valori 1/0/NULL) Se 1 significa che il soggetto va cercato solo tra utenti del sistema e UO (solo soggetti interni)
2075        			FlgTipoOut				OUT		VARCHAR2,					-- Indica il tipo di soggetto che corrisponde all'indirizzo email. Valori ammessi:
2076        																-- E 	= 	Soggetto esterno
2077        																-- UT =	Utente del sistema
2078        																-- UO	=	Unità operativa
2079        			IdSoggOut				OUT		INTEGER,					-- Identificativo (ID_SOGG_RUBRICA o ID_USER o ID_UO) del soggetto che corrisponde all'indirizzo email
2080        			FlagFisicaOut			OUT		PLS_INTEGER,				-- (valori 1/0/NULL) Se FlgTipoOut=E indica se il soggetto che corrisponde all'indirizzo email è una persona fisica (=1) o giuridica (=0)
2081        			Denominazione_CognomeOut	OUT		VARCHAR2,					-- Denominazione del soggetto che corrisponde all'indirizzo email (o suo cognome se trattasi di persona fisica)
2082        			NomeOut				OUT		VARCHAR2,					-- Nome del soggetto se trattasi di persona fisica
2083        			CodFiscaleOut			OUT		VARCHAR2,					-- Codice fiscale del soggetto che corrisponde all'indirizzo email
2084        			PartitaIvaOut			OUT		VARCHAR2,					-- Partita IVA del soggetto che corrisponde all'indirizzo email
2085        			ErrContextOut			OUT		VARCHAR2,					-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
2086        			ErrCodeOut				OUT		PLS_INTEGER,				-- N.ro errore di uscita
2087        			ErrMsgOut				OUT 		VARCHAR2)					-- Messaggio d'errore
2088        			return PLS_INTEGER;										-- Vale 1 se l'individuazione del soggetto va a buon fine, altrimenti 0
2089        
2090        	/******** funzione per individuare un'entità di un dato tipo a partire dal suo codice identificativo in un sistema esterno e/o dal suo identificativo interno al sistema 			******/
2091        	/******** In caso l'entità sia individuata univocamente vengono restituiti in output sia il suo codice identificativo esterno che il suo identificativo interno al sistema 			******/
2092        	/********* Se si è connessi da applicazione esterna, per le entità che lo prevedono, la ricerca può essere ristretta o meno alle sole entità create da quell'applicazione esterna		******/
2093        	/******** ATTENZIONE: la ricerca NON tiene conto delle eventuali policy di accesso alle entità del dato tipo													******/
2094        	function FindObjFromCIProv(
2095        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,
2096        																-- (obblig). Codice identificativo del token di connessione
2097        			TargetTableNameIn		IN 		VARCHAR2, 						-- (obblig.) Nome della tabella che cotiene le entità del dato tipo
2098        																-- Valori ammessi:
2099        																-- DMT_PROCESSES 	= Processi/procedimenti
2100        																-- DMT_FOLDER 	= Cartelle/fascicoli
2101        																-- DMT_UNITA_DOC 	= Unità documentarie
2102        																-- DMT_USERS 	= Utenti
2103        			CIProvObjIO			IN OUT	VARCHAR2,						-- Codice identificativo dell'entità nel sistema esterno (ricerca case-sensitive in like senza forzare il % finale)
2104        			CIIntObjIO			IN OUT	VARCHAR2,						-- Identificativo dell'entità interno al sistema (ricerca case-sensitive esatta)
2105        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
2106        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
2107        			ErrMsgOut			OUT 		VARCHAR2,						-- Messaggio d'errore
2108        			FlgRestrApplOwnerIn	IN		PLS_INTEGER DEFAULT 1)				-- (valori 1/0/NULL) Se vale 1 e si è connessi da applicazione esterna la ricerca viene ristretta alle sole entità create dall'applicazione esterna/istanza di applicazione da cui si è connessi (qualora il tipo delle entità preveda quest'informazione)
2109        			return PLS_INTEGER;										-- Vale 1 se l'entità è stata individuata univocamente, altrimenti 0
2110        
2111        	/**** Funzione per ricercare le richieste di trasmissione via fax sottomesse ****/
2112        	FUNCTION TrovaRichTrasmissioneFax(
2113        			CodIdConnectionTokenIn		IN	    	DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
2114        																	-- (obblig). Codice identificativo del token di connessione
2115        			IdUserLavoroIn			IN		DMT_USERS.ID_USER%type DEFAULT NULL,	-- Id. dell'utente a nome di cui si lavora. Se non valorizzato è l'utente connesso
2116        			FlgPreimpostaFiltroIn		IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se vale 1 i filtri e l'ordinamento vengono settati secondo le impostazioni dell'utente di lavoro, altrimenti restano come passati in input
2117        			--------------- inizio filtri di ricerca-------------------
2118        			IdRichTrasmissioneIO		IN OUT	DMT_FAX.ID_RICH_TRASMISSIONE%type,		-- 1° filtro di ricerca: id. univoco della richiesta di trasmissione da ricercare
2119        			CIFaxPerFaxServerIO		IN OUT	DMT_FAX.PROV_CI_FAX%type,			-- 2° filtro di ricerca: cod. assegnato alla richiesta di trasmissione dal fax-server che l'ha presa in carico (ricerca esatta case-sensitive)
2120        			FaxServerMittIO			IN OUT	DMT_FAX.FAX_SERVER_MITT%type,			-- 3° filtro di ricerca: indirizzo IP o nome del fax-server cui è stata sottomessa la richiesta di trasmissione (ricerca case-insensitive in like)
2121        			FlgSoloSottomesseUtenteLavIO	IN OUT	PLS_INTEGER,					-- 4° filtro di ricerca: (valori 1/0/NULL) Se 1 significa che si vogliono solo le richieste di trasmissione sottomesse dall'utente di lavoro (ovvero quello connesso se non si lavora a nome di altri)
2122        			CodApplicazioneIO			IN OUT	VARCHAR2,						-- 5° filtro di ricerca: Codice dell'applicazione da cui sono state sottomesse le richieste di trasmissione da ricercare. Se valorizzata pari a #BY_CONN_TKN e si è connessi da un'applicazione esterna si ricercano solo le richieste di trasmissione sottomesse da quell'applicazione
2123        			CodIstApplicazioneIO		IN OUT	VARCHAR2,						-- 6° filtro di ricerca: Codice dell'istanza di applicazione da cui sono state sottomesse le richieste di trasmissione da ricercare. Se valorizzata pari a #BY_CONN_TKN e si è connessi da un'applicazione esterna si ricercano solo le richieste di trasmissione sottomesse dall'istanza di applicazione esterna da cui si è connessi
2124        			NroFaxDestIO			IN OUT	DMT_FAX.NRO_FAX_DEST%type,			-- 7° filtro di ricerca: numero fax destinatario (ricerca case-insensitive in like che ignora spazi, e caratteri quali /, -, .)
2125        			FlgStatiRichTrasmIO		IN OUT	VARCHAR2,						-- 8° filtro di ricerca: indica gli stati che devono avere le richieste di trasmissione da ricercare.
2126        																		-- Può essere una concatenazione (con separatore ;) dei seguenti valori:
2127        																		-- S = Evasa con successo,
2128        																		-- X = Andata in errore
2129        																		-- R = Da evadere
2130        																		-- K = Annullata
2131        			RichTrasmDaIO			IN OUT	VARCHAR2,						-- 9° filtro di ricerca: data di inizio dell'intervallo di ricerca sulla data di sottomissione delle richieste di trasmissione da ricercare (nel formato dato dal parametro di config. FMT_STD_TIMESTAMP)
2132        			RichTrasmAIO			IN OUT	VARCHAR2,						-- 10° filtro di ricerca: data di fine dell'intervallo di ricerca sulla data di sottomissione delle richieste di trasmissione da ricercare (nel formato dato dal parametro di config. FMT_STD_TIMESTAMP)
2133        			------------- inizio argomenti standard di tutte le funzioni di ricerca che devono restituire una lista --------------
2134        			ColOrderByIO			IN OUT	VARCHAR2,						-- Indica il/i numeri della/e colonna dell'XML (CLOB ListaXMLOut) di output per cui ordinare i record nell'XML stesso (si può ordinare solo per le colonne da 1 a 11). Se l'ordinamento è per più colonne queste vanno separate con "," (es: 2; 2,3)
2135        																	-- in output può essere diverso che in input solo se in input è NULL: in tal caso significa che esiste sul tipo di ordinamento una qualche preimpostazione di sistema/utente ecc.
2136        																	-- se non valorizzato (neppure in output) la lista di record restituita non è ordinata
2137        			FlgDescOrderByIO  		IN OUT	VARCHAR2,						-- E' una stringa di 1 o 0/NULL, tanti quanti le colonne di ordinamento, separati da ",": 1 significa che l'ordinamento per la data colonna deve essere discendente anzichè ascendente (es: 1; 1,0; 1, )
2138        																	-- in output può essere diverso che in input solo se in input è NULL: in tal caso significa che esiste sul verso di ordinamento una qualche preimpostazione di sistema/utente ecc.
2139        			FlgSenzaPaginazioneIn 		IN 		PLS_INTEGER DEFAULT NULL,            	-- (valori 1/0/NULL) Se 1 l'estrazione non è paginata, altrimenti sì
2140        			NroPaginaIO      			IN OUT	PLS_INTEGER,                  		-- E' il numero della pagina da estrarre; se NULL e l'estrazione è paginata viene estratta la prima pagina
2141           			BachSizeIO				IN OUT	PLS_INTEGER,					-- Indica il massimo n.ro di record da estrarre se l'estrazione non è paginata (FlgSenzaPaginazioneIn=1)
2142        																	-- Indica la dimensione (n.ro di record) della pagina se l'estrazione è paginata (FlgSenzaPaginazioneIn 0 o NULL) e in tal caso se non è valorizzato la dimensione della pagina è quella settata per l'utente di lavoro o è pari al valore del parametro STD_PAGE_NUM_ROW del dominio di lavoro
2143        			OverFlowLimitIn			IN		PLS_INTEGER DEFAULT NULL,			-- E' il n.ro di record soddisfacenti la ricerca superato il quale la funzione deve restituire errore di overflow
2144        			FlgSenzaTotIn			IN		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se 1 significa che non è richiesto come output il totale dei record soddisfacenti la ricerca (se la ricerca è paginata per la prima pagina il totale viene calcolato comunque, per le successive no)
2145        			NroTotRecOut			OUT		PLS_INTEGER,					-- E' il n.ro di record complessivi trovati (valorizzato solo se FlgSenzaTotIn è 0 o NULL o se si estrae la prima pagina)
2146             			NroRecInPaginaOut 		OUT   	PLS_INTEGER,                     		-- E' il numero di record nella pagina (valorizzato solo se l'estrazione è paginata, ovvero se FlgSenzaPaginazioneIn 0 o NULL)
2147        			------------- fine argomenti standard di tutte le funzioni di ricerca che devono restituire una lista --------------
2148        			ListaXMLOut				OUT		NOCOPY CLOB,					-- Lista delle richieste di trasmissione via fax trovate (XML conforme a schema LISTA_STD.xsd)
2149        																	-- Ogni richiesta è un tag Riga che può contenere le seguenti colonne:
2150        																	-- 1:  Identificativo univoco della richiesta
2151        																	-- 2:  Codice assegnato alla richiesta di trasmissione dal fax-server che l'ha presa in carico
2152        																	-- 3:  Indirizzo IP o nome del fax-server cui è stata sottomessa la richiesta di trasmissione
2153        																	-- 4:  Numero fax destinatario
2154        																	-- 5:  Timestamp in cui è stata sottomessa la richiesta di trasmissione (nel formato dato dal parametro di config. FMT_STD_TIMESTAMP)
2155        																	-- 6:  Id. dell'utente che ha sottomesso la richiesta
2156        																	-- 7:  Descrizione dell'utente che ha sottomesso la richiesta
2157        																	-- 8:  Stato della richiesta di trasmissione (Da evadere, Evasa con successo, Andata in errore, Annullata)
2158        																	-- 9:  Motivo dell'errore
2159        																	-- 10: N.ro pagine trasmesse
2160        																	-- 11: Note
2161        																	-- 12: Flag che indica che la richiesta di trasmissione via fax è stato sottomessa dall'applicazione CodApplicazioneIO ed eventuale istanza CodIstApplicazioneIO
2162        																	-- 13: Descrizione dell'applicazione (ed eventuale istanza) che ha sottomesso la richiesta
2163        																	-- 14: Timestamp di ultima modifica dei dati della richiesta (nel formato dato dal parametro di conf. FMT_STD_TIMESTAMP)
2164        			ErrContextOut			OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
2165        			ErrCodeOut				OUT		PLS_INTEGER,					-- N.ro errore di uscita
2166        			ErrMsgOut				OUT 		VARCHAR2,						-- Messaggio d'errore
2167        			NomeTagRigaIn			IN		VARCHAR2 default null,				--se valorizzato è il nome del tag riga che deve avere l'xml in output
2168        			NomeTagColonnaIn			IN		DMVA_STRING default null)   			--se valorizzatorappresenta i nomi dei tag colonne dell'xml di output
2169        			return PLS_INTEGER;											-- Vale 1 se tutto è andato a buon fine, altrimenti 0
2170        
2171        	/****** funzione per estrarre i dati dei livelli della struttura organizzativa di un dato soggetto produttore o AOO *******/
2172        	function GetDatiLivelliSO(
2173        			IdDominioAutIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type	-- Id. del soggetto produttore/AOO per cui tirar fuori nomi e tipi dei livelli della struttura organizzativa
2174        			) RETURN DMTO_DENOM_TIPIZZATE;									-- vengono restituiti tanti record quanti i livelli (attributo CARDINALITA è il livello gerarchico): di ogni livello vengono riportati cod. (attributo TIPO) e descrizione (attributo DENOMINAZIONE) dell'unico tipo di UO che occupa il livello (se ve n'è uno solo)
2175        
2176        	/****** funzione per estrarre i dati dei livelli del titolario di un dato soggetto produttore o AOO *******/
2177        	function GetDatiLivelliTit(
2178        			IdDominioAutIn			IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type	-- Id. del soggetto produttore/AOO per cui tirar fuori i livelli del titolario. Se NULL significa che si vogliono i livelli di titolario validi per tutti i soggetti produttori
2179        			) RETURN DMTO_LIV_GERARCHIA;										-- vengono restituiti tanti record quanti i livelli (attributo NRO è il livello gerarchico)
2180        
2181        	/****** serve a testare se la data e ora correnti corrispondono ad un momento ad alta o a bassa operatività sul sistema *******/
2182        	function TestIfHighLowTransactionTime
2183        			return VARCHAR2;											-- può valere:
2184        																	-- H se è un momento ad alta operatività
2185        																	-- L se è un momento a bassa operatività
2186        
2187        	/*********** Funzione per ottenere come DMVA_STRING i dati di un soggetto specificato come type DMO_SOGGETTO_INTERNO **********/
2188        	function ConvertDatiSoggInterno(
2189        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,														-- (obblig). Codice identificativo del token di connessione
2190        			DatiSoggIntIn		IN		DMO_SOGGETTO_INTERNO,
2191        			DatiSoggIntOut		OUT		DMVA_STRING,					-- Contiene i seguenti elementi:
2192        																--	1: Indicatore del tipo di soggetto
2193        																--		Valori possibili:
2194        																--			SP	= Soggetto produttore
2195        																-- 			AOO	= AOO
2196        																-- 			UT 	= Utente
2197        																--			SV	= Scrivania virtuale
2198        																--			UO	= Unità organizzativa (vale a dire tutte le scrivanie virtuali ad essa afferenti)
2199        																--			G	= Gruppo
2200        																--			R	= Ruolo amministrativo contestualizzato ovvero i soggetti che hanno un certo ruolo amministrativo (eventualmente rispetto ad una certa UO o un dato livello della struttura organizzativa/tipo di UO o entrambi)
2201        																--	2: Identificativo del soggetto
2202        																--		è un ID_SP_AOO di DMT_SOGGETTI_PROD_AOO se colonna 1 è SP o AOO
2203        																--		è un ID_UO di DMT_STRUTTURA_ORG se colonna 1=UO,
2204        																--		è un ID_GRUPPO di DMT_GRUPPI se colonna 1 =G
2205        																--		è un ID_USER di DMT_USERS se colonna 1 =UT
2206        																--		è un ID_SCRIVANIA di DMT_SCRIVANIE_VIRTUALI se colonna 1 =SV
2207        																--		è un ID_RUOLO_AMM di DMT_RUOLI_AMM se colonna 1 =R
2208        																--	3: Denominazione/nome del soggetto (se trattasi di UO in input può essere sia la denominazione semplice che quella preceduta dalle denominazioni di tutte le UO superiori separate da "|"; in output è la denominazione semplice)
2209        																--	4: Identificativo della UO cui appartiene la scrivania-soggetto
2210        																--	5: Nri livello della UO-soggetto o della UO a cui appartiene la scrivania-soggetto (in input tutti o alcuni; però se si specifica un livello è obbligatorio indicare tutti i livelli superiori; vanno specificati come appaiono nella GUI, ovvero romani se previsto, 0 o -- se nulli; sono separati dal separatore dei livelli valido per il soggetto produttore/AOO di appartenenza della UO)
2211        																--	o codice rapido del gruppo (se ha un corrispondente gruppo in rubrica soggetti) o utente
2212        																--	6: Denominazione della UO cui appartiene la scrivania-soggetto(in input può essere la denominazione semplice quella preceduta dalle denominazioni di tutte le UO superiori separate da "|"; in output è la denominazione semplice)
2213        																--	7: Codice che identifica nell'applicazione esterna da cui ci si connette l'utente-soggetto o quello che occupa la scrivania-soggetto
2214        																--	8: Denominazione dell'utente che occupa la scrivania-soggetto
2215        																--	9: (valore 1) Indica che il soggetto, se UO, sono anche tutte le sue sotto-UO
2216        																--	10:(valori interi da 1 a n) Livello della struttura organizzativa in cui si espleta il ruolo amministrativo-soggetto
2217        																--	11: Se colonna 1 =R: Codice del tipo di unità organizzativa in cui si espleta il ruolo amministrativo-soggetto (alternativo alla colonna 10)
2218        																--		Se colonna 1 =UT o SV: Username (delle credenziali locali) dell'utente-soggetto o che occupa la scrivania-soggetto
2219        																--	12: Se colonna 1 =R: Descrizione del tipo di unità organizzativa (es: settore, servizio, ecc) in cui si espleta il ruolo amministrativo-soggetto (alternativo alla colonna 10)
2220        																--		Se colonna 1 =UT o SV: N.ro di matricola dell'utente-soggetto o che occupa la scrivania-soggetto
2221        																--	13: Identificativo della UO in cui si espleta il ruolo amministrativo-soggetto o dalla quale risalire alla/e UO del livello/tipo indicati in cui si espleta il ruolo amministrativo-soggetto
2222        																--	14: Denominazione/nome della UO in cui si espleta il ruolo amministrativo-soggetto o dalla quale risalire alla/e UO del livello/tipo indicati in cui si espleta il ruolo amministrativo-soggetto (in input può essere la denominazione semplice o quella preceduta dalle denominazioni di tutte le UO superiori separate da "|"; in output è sempre la denominazione semplice)
2223        																--	15: Nri livello della UO in cui si espleta il ruolo amministrativo-soggetto o dalla quale risalire alla/e UO del livello/tipo indicati in cui si espleta il ruolo amministrativo-soggetto (in input tutti o alcuni; però se si specifica un livello è obbligatorio indicare tutti i livelli superiori; vanno specificati come appaiono nella GUI, ovvero romani se previsto, 0 o -- se nulli; sono separati dal separatore dei livelli valido per il soggetto produttore/AOO di appartenenza della UO)
2224        																--	16:(valore 1) Indica che il ruolo amministrativo-soggetto si espleta anche nelle sotto-UO della/e UO rintracciate tramite i valori delle 3 colonne precedenti
2225        																--    colonne da 17 a 28 non sono utilizzate
2226        																--	29: Dati identificativi del soggetto
2227        			TsRifIn			IN		VARCHAR2 default TO_CHAR(sysdate, 'DD/MM/RRRR HH24:MI:SS'),
2228        																-- Stringa con il timestamp (nel formato GG/MM/AAAA HH24:MI:SS) per cui si richiede la decodifica del soggetto. Se non valorizzato si intende sysdate
2229        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
2230        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
2231        			ErrMsgOut			OUT 		VARCHAR2,						-- Messaggio d'errore
2232        			FlgNoDecodificaSoggIn	IN		PLS_INTEGER DEFAULT NULL)			-- (1/0/NULL) Se 1 la colonna 29 e le altre colonne di "decodifica" (denominazioni, livelli, username, n.ro matricola ecc) del soggetto in output non vengono popolate
2233        			return PLS_INTEGER;										-- Vale 1 se la conversione è andata a buon fine, altrimenti 0
2234        
2235        	/*********** Funzione per controllare i dati identificativi di un soggetto interno	(possibile assegnatario di documenti/folder o di permessi su di essi)	**********/
2236        	/*********** I dati vengono rielaborati e restituiti completati																**********/
2237        	function CtrlDatiSoggInterno(
2238        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%type,
2239        																-- (obblig). Codice identificativo del token di connessione
2240        			FlgSoggPerIn		IN		VARCHAR2,						-- (obblig.) Indica per cosa serve il soggetto. Valori ammessi:
2241        																--	ACE = come destinatario di permessi in una Access Control Entry
2242        																--	ASS = come assegnatario di unità documentaria o folder
2243        			DatiSoggXMLIO		IN OUT	NOCOPY CLOB,					-- Dati del soggetto interno da controllare e rielaborare (tag XML fatto come un tag "Riga" dello schema LISTA_STD.xsd)
2244        																-- Il tag "Riga" può contenere le seguenti colonne:
2245        																--	1: (obblig.) Indicatore del tipo di soggetto
2246        																--		Valori possibili:
2247        																--			SP	= Soggetto produttore
2248        																-- 			AOO	= AOO
2249        																-- 			UT 	= Utente
2250        																--			SV	= Scrivania virtuale
2251        																--			UO	= Unità organizzativa (vale a dire tutte le scrivanie virtuali ad essa afferenti)
2252        																--			G	= Gruppo
2253        																--			R	= Ruolo amministrativo contestualizzato ovvero i soggetti che hanno un certo ruolo amministrativo (eventualmente rispetto ad una certa UO o un dato livello della struttura organizzativa/tipo di UO o entrambi)
2254        																--	2: Identificativo del soggetto
2255        																--		è un ID_SP_AOO di DMT_SOGGETTI_PROD_AOO se colonna 1 è SP o AOO
2256        																--		è un ID_UO di DMT_STRUTTURA_ORG se colonna 1=UO,
2257        																--		è un ID_GRUPPO di DMT_GRUPPI se colonna 1 =G
2258        																--		è un ID_USER di DMT_USERS se colonna 1 =UT
2259        																--		è un ID_SCRIVANIA di DMT_SCRIVANIE_VIRTUALI se colonna 1 =SV
2260        																--		è un ID_RUOLO_AMM di DMT_RUOLI_AMM se colonna 1 =R
2261        																--	3: Denominazione/nome del soggetto (se trattasi di UO in input può essere sia la denominazione semplice che quella preceduta dalle denominazioni di tutte le UO superiori separate da "|"; in output è la denominazione semplice)
2262        																--	4: Identificativo della UO cui appartiene la scrivania-soggetto
2263        																--	5: Nri livello della UO-soggetto o della UO a cui appartiene la scrivania-soggetto (in input tutti o alcuni; però se si specifica un livello è obbligatorio indicare tutti i livelli superiori; vanno specificati come appaiono nella GUI, ovvero romani se previsto, 0 o -- se nulli; sono separati dal separatore dei livelli valido per il soggetto produttore/AOO di appartenenza della UO)
2264        																--	6: Denominazione della UO cui appartiene la scrivania-soggetto(in input può essere la denominazione semplice quella preceduta dalle denominazioni di tutte le UO superiori separate da "|"; in output è la denominazione semplice)
2265        																--	7: Codice che identifica nell'applicazione esterna da cui ci si connette l'utente-soggetto o quello che occupa la scrivania-soggetto
2266        																--	8: Denominazione dell'utente che occupa la scrivania-soggetto
2267        																--	9: (valore 1) Indica che il soggetto, se UO, sono anche tutte le sue sotto-UO
2268        																--	10:(valori interi da 1 a n) Livello della struttura organizzativa in cui si espleta il ruolo amministrativo-soggetto
2269        																--	11: Se colonna 1 =R: Codice del tipo di unità organizzativa in cui si espleta il ruolo amministrativo-soggetto (alternativo alla colonna 10)
2270        																--		Se colonna 1 =UT o SV: Username (delle credenziali locali) dell'utente-soggetto o che occupa la scrivania-soggetto
2271        																--	12: Se colonna 1 =R: Descrizione del tipo di unità organizzativa (es: settore, servizio, ecc) in cui si espleta il ruolo amministrativo-soggetto (alternativo alla colonna 10)
2272        																--		Se colonna 1 =UT o SV: N.ro di matricola dell'utente-soggetto o che occupa la scrivania-soggetto
2273        																--	13: Identificativo della UO in cui si espleta il ruolo amministrativo-soggetto o dalla quale risalire alla/e UO del livello/tipo indicati in cui si espleta il ruolo amministrativo-soggetto
2274        																--	14: Denominazione/nome della UO in cui si espleta il ruolo amministrativo-soggetto o dalla quale risalire alla/e UO del livello/tipo indicati in cui si espleta il ruolo amministrativo-soggetto (in input può essere la denominazione semplice o quella preceduta dalle denominazioni di tutte le UO superiori separate da "|"; in output è sempre la denominazione semplice)
2275        																--	15: Nri livello della UO in cui si espleta il ruolo amministrativo-soggetto o dalla quale risalire alla/e UO del livello/tipo indicati in cui si espleta il ruolo amministrativo-soggetto (in input tutti o alcuni; però se si specifica un livello è obbligatorio indicare tutti i livelli superiori; vanno specificati come appaiono nella GUI, ovvero romani se previsto, 0 o -- se nulli; sono separati dal separatore dei livelli valido per il soggetto produttore/AOO di appartenenza della UO)
2276        																--	16:(valore 1) Indica che il ruolo amministrativo-soggetto si espleta anche nelle sotto-UO della/e UO rintracciate tramite i valori delle 3 colonne precedenti
2277        																--    colonne da 17 a 28 non sono utilizzate
2278        																--	29: Dati identificativi del soggetto (colonna non rielaborata/popolata in output se FlgNoDecodificaSoggIn=1)
2279        			ErrContextOut		OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
2280        			ErrCodeOut			OUT		PLS_INTEGER,					-- N.ro errore di uscita
2281        			ErrMsgOut			OUT 		VARCHAR2,						-- Messaggio d'errore
2282        			FlgNoDecodificaSoggIn	IN		PLS_INTEGER DEFAULT NULL,			-- (1/0/NULL) Se 1 la colonna 29 e le altre colonne di "decodifica" (denominazioni, livelli, username, n.ro matricola ecc) del soggetto in output non vengono ripopolate ma restanto come passate in input
2283        			FlgCallByGUIIn		IN		PLS_INTEGER DEFAULT 1)				-- (1/0/NULL) Se 1 la stored è chiamata dalla GUI di una web application per cui gli id. dei soggetti non vengono considerati se non sono popolati anche altri campi visibili a video o se non sono congruenti con i valori dei campi stessi
2284        			return PLS_INTEGER;										-- Vale 1 se il controllo è andato a buon fine, altrimenti 0
2285        
2286        	/********* funzione per testare se un dato tipo documento/folder/processo è sottotipo di un altro (anche non direttamente) *******/
2287        	function IsSubTypeOf(
2288        			FlgTypeToVerifyIn			IN		VARCHAR2,					-- (obblig.) Indica se la verifica se un dato tipo è sotto-tipo di un altro va fatta su:
2289        																-- TD = Tipi documenti, TF = Tipi folder, TP = Tipi processi/procedimenti
2290        			IdTypeToTestIn			IN		INTEGER,					-- (obblig) Id. del tipo che si vuole testare se sottotipo di un altro
2291        			IdTypeSubTypeOfIn			IN		INTEGER					-- (obblig) Id. del tipo di cui testare se il tipo IdTypeToTestIn è sottotipo
2292        			)return PLS_INTEGER;										-- restituisce 1 in caso di test positivo, 0 in caso di test negativo, valori negativi in caso di errore
2293        
2294        	/********** funzione per ricercare i modelli di oggetti da usare per i documenti **********/
2295        	function TrovaModOggetti(
2296        			CodIdConnectionTokenIn		IN	    	DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
2297        																					-- (obblig). Codice identificativo del token di connessione
2298        			IdUserLavoroIn			IN		DMT_USERS.ID_USER%type DEFAULT NULL,	-- Id. dell'utente a nome di cui si lavora. Se non valorizzato è l'utente connesso
2299        			----------------------inizio filtri di ricerca -----------------------------------------------------------------------
2300        			OggettoIn				IN		VARCHAR2 DEFAULT NULL,					-- Filtro sull'oggetto del modello: stringa/parole contenute nell'oggetto (ricerca di tipo contains)
2301        			CINomeModelloIn			IN		VARCHAR2 DEFAULT NULL,					-- Filtro sul codice o nome del modello (ricerca case-insensitive in like)
2302        			ProvCIModelloIn			IN		VARCHAR2 DEFAULT NULL,					-- Filtro sul codice di origine del modello (ricerca case-sensitive in like)
2303        			IdModelloIn				IN		DMT_MODELLI_OGGETTI.ID_MOD_OGGETTO%type DEFAULT NULL,
2304        																					-- Id. di uno specifico modello di oggetto da ricercare
2305        			FlgVersoRegistrazioneIn	IN		VARCHAR2 DEFAULT NULL,					-- Filtro per restringere la ricerca ai soli modelli per:
2306        																					-- E = registrazioni in entrata
2307        																					-- U = registrazioni in uscita
2308        																					-- I = registrazioni in interna
2309        																					-- valori ammessi E, U, I
2310        																					-- o una loro concatenazione (separati da ;)
2311        			CategoriaRegIn			IN		DMT_TIPI_REGISTRAZIONE.COD_CATEGORIA%type DEFAULT NULL,
2312        																					-- Filtro sulla categoria di registrazione per cui devono valere i modelli da ricercare (ricerca esatta)
2313        			SiglaRegistrazioneIn	IN		DMT_TIPI_REGISTRAZIONE.SIGLA%type DEFAULT NULL,
2314        																					-- Filtro sulla sigla del registro per cui devono valere i modelli da ricercare (ricerca esatta)
2315        			FlgSoloModUtenteIn		IN		PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se 1 la ricerca estrae solo i modelli di oggetti creati dall'utente di lavoro, se 0 o NULL sia i modelli creati dall'utente che quelli creati da altri
2316        			FlgTuttiModPrivatiIn	IN		PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se 1 la ricerca include anche i modelli privati - i.e. NON pubblici - creati da altri, se 0 o NULL no
2317        			FlgIncludiAnnullatiIn	IN		PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se 1 la ricerca include anche i modelli logicamente annullati, se 0 o NULL mostra solo i modelli validi
2318        			CodApplOwnerIn			IN 		VARCHAR2 DEFAULT NULL,					-- Codice dell'applicazione che ha inserito i modelli da ricercare. Se pari a #BY_CONN_TKN e si è connessi da un'applicazione esterna si ricercano solo i modelli di oggetto creati da quell'applicazione
2319        			CodIstApplOwnerIn		IN 		VARCHAR2 DEFAULT NULL,					-- Codice dell'istanza di applicazione che ha inserito i modelli da ricercare. Se pari a #BY_CONN_TKN e si è connessi da un'applicazione esterna si ricercano solo i modelli di oggetto creati dall'istanza di applicazione esterna da cui si è connessi
2320        			FlgRestrApplOwnerIn		IN 		PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se 1 vengono estratti solo i modelli creati dall'applicazione (ed eventuale istanza) specificata in CodApplOwnerIn (e CodIstApplOwnerIn); se 0 o NULL e se CodApplOwnerIn è valorizzata vengono estratti solo i modelli senza applicazione creatrice o con applicazione creatrice pari a quella specificata
2321        			------------- inizio argomenti standard di tutte le funzioni di ricerca che devono restituire una lista --------------
2322        			ColOrderByIO			IN OUT	VARCHAR2,								-- Indica il/i numeri della/e colonna dell'XML (CLOB ListaXMLOut) di output per cui ordinare i record nell'XML stesso (si può ordinare solo per le colonne da 1 a 12). Se l'ordinamento è per più colonne queste vanno separate con "," (es: 2; 2,3)
2323        																					-- in output può essere diverso che in input solo se in input è NULL: in tal caso significa che esiste sul tipo di ordinamento una qualche preimpostazione di sistema/utente ecc.
2324        																					-- se non valorizzato (neppure in output) la lista di record restituita non è ordinata
2325        			FlgDescOrderByIO  		IN OUT	VARCHAR2,								-- E' una stringa di 1 o 0/NULL, tanti quanti le colonne di ordinamento, separati da ",": 1 significa che l'ordinamento per la data colonna deve essere discendente anzichè ascendente (es: 1; 1,0; 1, )
2326        																					-- in output può essere diverso che in input solo se in input è NULL: in tal caso significa che esiste sul verso di ordinamento una qualche preimpostazione di sistema/utente ecc.
2327        			FlgSenzaPaginazioneIn 	IN 		PLS_INTEGER DEFAULT NULL,            	-- (valori 1/0/NULL) Se 1 l'estrazione non è paginata, altrimenti sì
2328        			NroPaginaIO      		IN OUT	PLS_INTEGER,                  			-- E' il numero della pagina da estrarre; se NULL e l'estrazione è paginata viene estratta la prima pagina
2329           			BachSizeIO				IN OUT	PLS_INTEGER,							-- Indica il massimo n.ro di record da estrarre se l'estrazione non è paginata (FlgSenzaPaginazioneIn=1)
2330        																					-- Indica la dimensione (n.ro di record) della pagina se l'estrazione è paginata (FlgSenzaPaginazioneIn 0 o NULL) e in tal caso se non è valorizzato la dimensione della pagina è quella settata per l'utente di lavoro o è pari al valore del parametro STD_PAGE_NUM_ROW del dominio di lavoro
2331        			OverFlowLimitIn			IN		PLS_INTEGER DEFAULT NULL,				-- E' il n.ro di record soddisfacenti la ricerca superato il quale la funzione deve restituire errore di overflow o avvertimento
2332        			FlgSenzaTotIn			IN		PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se 1 significa che non è richiesto come output il totale dei record soddisfacenti la ricerca (se la ricerca è paginata per la prima pagina il totale viene calcolato comunque, per le successive no)
2333        			NroTotRecOut			OUT		PLS_INTEGER,							-- E' il n.ro di record complessivi trovati (valorizzato solo se FlgSenzaTotIn è 0 o NULL o se si estrae la prima pagina), salvo che nel caso sia stato superato il limite di overflow (warning) e allora coincide con il n.ro di record estratti che sono pari al limite di overflow
2334             		NroRecInPaginaOut 		OUT   	PLS_INTEGER,                     		-- E' il numero di record nella pagina (valorizzato solo se l'estrazione è paginata, ovvero se FlgSenzaPaginazioneIn 0 o NULL)
2335        			FlgBatchSearchIn		IN		PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se 1 significa che la stored è utilizzata da un processo batch, altrimenti da un processo online.
2336        																					-- Serve affinchè in caso l'input OverFlowLimitIn non sia valorizzato vengano applicati i limiti di overflow per processo batch o online che sono parametri di configurazione
2337        			------------- fine argomenti standard di tutte le funzioni di ricerca che devono restituire una lista --------------
2338        			ListaXMLOut				OUT		NOCOPY CLOB,							-- Lista dei modelli di oggetto trovati (XML conforme a schema LISTA_STD.xsd)
2339        																					-- Ogni modello è un tag Riga che contiene le seguenti colonne:
2340        																					-- 1: Id. (PK) del modello di oggetto
2341        																					-- 2: Codice identificativo/nome del modello
2342        																					-- 3: Oggetto del modello
2343        																					-- 4: Codice che identifica il modello nel sistema eventuale di provenienza
2344        																					-- 5: (valori 1/0) Flag di modello creato dall'utente di lavoro (1) o da altri (0)
2345        																					-- 6: (valori PB/UO/PR) Flag di modello pubblico (PB) o valido per una UO (UO) privato di un utente (PR)
2346        																					-- 7: (valori 1/0) Flag di modello valido (=1) o logicamente annullato (=0)
2347        																					-- 8: (valori 1/0) Flag di modello riservato di sistema e non modificabile da GUI
2348        																					-- 9: (valori 1/0) Flag di modello utilizzabile per le registrazioni in entrata
2349        																					-- 10: (valori 1/0) Flag di modello utilizzabile per le registrazioni in uscita
2350        																					-- 11: (valori 1/0) Flag di modello utilizzabile per le registrazioni interne
2351        																					-- 12: Note del modello
2352        																					-- 13: Lista degli id. dei tipi di registrazioni limitatamente alle quali può essere utilizzato il modello (se più di uno separati da ;)
2353        																					-- 14: Id. utente di creazione
2354        																					-- 15: Descrizione utente di creazione
2355        																					-- 16: Timestamp di creazione
2356        																					-- 17: Id. utente di ultimo aggiornamento
2357        																					-- 18: Descrizione utente di ultimo aggiornamento
2358        																					-- 19: Timestamp di ultimo aggiornamento
2359        																					-- 20: Cod. applicazione creatrice
2360        																					-- 21: Cod. istanza applicazione creatrice del modello
2361        																					-- 22: Nome dell'applicazione/istanza di applicazione creatrice del modello
2362        																					-- 23: Lista delle decodifiche dei tipi di registrazioni limitatamente alle quali può essere utilizzato il modello (se più di una separate da a capo)
2363        																					-- 24: Denominazione della UO nella cui porzione di oggettario è definito il modello di oggetto rappresentato dal record
2364        																					-- 25: Id. della UO nella cui porzione di oggettario è definito il modello di oggetto rappresentato dal record
2365        																					-- 26: Cod. rapido/nri livelli della UO nella cui porzione di oggettario è definito il modello di oggetto rappresentato dal record
2366        																					-- 27: Flag 1/0. Se 1 indica che il modello di oggetto rappresentato dal record è visibile da tutte le sotto-UO di quella indicata in colonna 24
2367        																					-- 28: Flag 1/0. Se 1 indica che il modello di oggetto rappresentato dal record è gestibile da tutte le sotto-UO di quella indicata in colonna 24
2368        																					-- 29: (valori 1/0) Flag di modello modificabile dall'utente di lavoro
2369        																					-- 30: (valori 1/0) Flag di modello cancellabile dall'utente di lavoro
2370        			ErrContextOut			OUT		VARCHAR2,								-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
2371        			ErrCodeOut				OUT		PLS_INTEGER,							-- N.ro errore di uscita
2372        			ErrMsgOut				OUT 	VARCHAR2,								-- Messaggio d'errore
2373        			FlgRicPuntualeXOggettoIn IN		PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se 1 indica che la ricerca sul filtro OggettoIn è puntuale, a meno di case, spazi e "a capi"
2374        			RigaTagNameIn			IN		VARCHAR2 DEFAULT NULL,					-- (opzionale) Come rinominare il tag Riga dell'XML ListaXMLOut di output
2375        			ColTagNameIn			IN		DMVA_STRING DEFAULT NULL				-- (opzionale) Come rinominare i tag delle colonne in alternativa a Colonna Nro=.. nell'XML ListaXMLOut di output
2376        			)return PLS_INTEGER;													-- Vale 1 se tutto è andato a buon fine, altrimenti 0
2377        
2378        		/********** funzione per ottenere l'oggetto corrispondente ad un modello di cui sia indicato in input l'id. o un codice  **********/
2379        		function GetOggettoDaModello(
2380        			CodIdConnectionTokenIn		IN	    	DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
2381        																					-- (obblig). Codice identificativo del token di connessione
2382        			IdUserLavoroIn			IN		DMT_USERS.ID_USER%type DEFAULT NULL,	-- Id. dell'utente a nome di cui si lavora. Se non valorizzato è l'utente connesso
2383        			CINomeModelloIn			IN		VARCHAR2 DEFAULT NULL,					-- Codice o nome del modello (ricerca case-insensitive in like)
2384        			ProvCIModelloIn			IN		VARCHAR2 DEFAULT NULL,					-- Codice di origine del modello (ricerca case-sensitive in like)
2385        			IdModelloIn				IN		DMT_MODELLI_OGGETTI.ID_MOD_OGGETTO%type DEFAULT NULL,
2386        																					-- Id. del modello
2387        			FlgVersoRegistrazioneIn	IN		VARCHAR2 DEFAULT NULL,					-- Filtro per restringere la ricerca del modello tra quelli per:
2388        																					-- E = registrazioni in entrata
2389        																					-- U = registrazioni in uscita
2390        																					-- I = registrazioni in interna
2391        																					-- valori ammessi E, U, I
2392        			CategoriaRegIn			IN		DMT_TIPI_REGISTRAZIONE.COD_CATEGORIA%type DEFAULT NULL,
2393        																					-- Categoria di registrazione per cui deve valere il modello (ricerca esatta)
2394        			SiglaRegistrazioneIn	IN		DMT_TIPI_REGISTRAZIONE.SIGLA%type DEFAULT NULL,
2395        																					-- Sigla del registro per cui deve valere il modello (ricerca esatta)
2396        			OggettoOut				OUT		VARCHAR2,								-- Oggetti del modello (se trovato univocamente)
2397        			ErrContextOut			OUT		VARCHAR2,								-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
2398        			ErrCodeOut				OUT		PLS_INTEGER,							-- N.ro errore di uscita
2399        			ErrMsgOut				OUT 	VARCHAR2								-- Messaggio d'errore
2400        			)return PLS_INTEGER;													-- Vale 1 se l'oggetto corrispondente al modello è stato trovato, altrimenti 0
2401        
2402        		/****************** funzione per creare o modificare un modello di oggetto di documento ****************/
2403        		function IUModelloOggetto(
2404        			CodIdConnectionTokenIn	IN	    DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
2405        																					-- (obblig). Codice identificativo del token di connessione
2406        			IdUserLavoroIn			IN		DMT_USERS.ID_USER%type DEFAULT NULL,	-- Id. dell'utente a nome di cui si lavora. Se non valorizzato è l'utente connesso
2407        			IdModOggettoIO			IN OUT	DMT_MODELLI_OGGETTI.ID_MOD_OGGETTO%type,-- Id. del modello di oggetto da modificare. Se NULL si intende che il modello è da creare ex-novo
2408        																					-- in output, salvo in caso di errore, è sempre valorizzato
2409        			CINomeModelloIn			IN 		DMT_MODELLI_OGGETTI.CI_NOME%type DEFAULT dmpk_utility.GetValConfigParamText(1, NULL, 'STR_VAL_NO_UPD'),
2410        																					-- Codice identificativo o nome del modello
2411        																					-- In creazione di modello se non viene specificato viene settato in automatico pari a IdModOggettoIO
2412        			OggettoIn				IN		DMT_MODELLI_OGGETTI.OGGETTO%type DEFAULT dmpk_utility.GetValConfigParamText(1, NULL, 'STR_VAL_NO_UPD'),
2413        																					-- (obblig.) Oggetto del modello
2414        			CIProvModelloIn			IN 		DMT_MODELLI_OGGETTI.PROV_CI_MODELLO%TYPE DEFAULT dmpk_utility.GetValConfigParamText(1, NULL, 'STR_VAL_NO_UPD'),
2415        																					-- Codice identificativo del modello nel sistema di provenienza
2416        			FlgPubblicoIn			IN		PLS_INTEGER DEFAULT dmpk_utility.GetValConfigParamNumber(1, NULL, 'NUM_VAL_NO_UPD'),
2417        																					-- (valori 1/0/NULL) Indicatore di modello pubblico (i.e. visibile a tutti) o privato (visibile solo al creatore)
2418        			FlgXDocInEntrataIn		IN		PLS_INTEGER DEFAULT dmpk_utility.GetValConfigParamNumber(1, NULL, 'NUM_VAL_NO_UPD'),
2419        																					-- (valori 1/0/NULL) Indicatore di modello utilizzabile per i documenti in entrata
2420        			FlgXDocInUscitaIn		IN		PLS_INTEGER DEFAULT dmpk_utility.GetValConfigParamNumber(1, NULL, 'NUM_VAL_NO_UPD'),
2421        																					-- (valori 1/0/NULL) Indicatore di modello utilizzabile per i documenti in uscita
2422        			FlgXDocInterniIn		IN		PLS_INTEGER DEFAULT dmpk_utility.GetValConfigParamNumber(1, NULL, 'NUM_VAL_NO_UPD'),
2423        																					-- (valori 1/0/NULL) Indicatore di modello utilizzabile per i documenti interni
2424        			FlgLockedIn				IN		PLS_INTEGER DEFAULT dmpk_utility.GetValConfigParamNumber(1, NULL, 'NUM_VAL_NO_UPD'),
2425        																					-- (valori 1/0/NULL) Indicatore di modello riservato dal sistema e non modificabile/cancellabile da GUI
2426        			NoteModelloIn			IN 		DMT_MODELLI_OGGETTI.NOTE%TYPE DEFAULT dmpk_utility.GetValConfigParamText(1, NULL, 'STR_VAL_NO_UPD'),
2427        																					-- Annotazioni del modello
2428        			FlgModTipiRegIn			IN		VARCHAR2 DEFAULT 'I',					-- (valori I/C) Indica se i tipi di registrazioni indicati nell'argomento successivo - quelli per cui soltanto si può utilizzare il modello - sono forniti in modo incrementale (=I) (solo quelli da inserire/cancellare) oppure completo (=C), vale a dire che dovranno soppiantare tutti quelli già associati al modello da aggiornare
2429        			XMLTipiRegIn			IN		CLOB DEFAULT NULL,						-- Lista con i tipi di registrazioni per cui si può utilizzare il modello(XML conforme a schema LISTA_STD.xsd)
2430        																					-- NOTA: se nessun tipo è indicato il modello è utilizzabile per qulasiasi tipo di registrazione
2431        																					-- Ogni tipo di registrazione è un tag "Riga" che può contenere le seguenti colonne:
2432        																					-- 1: Identificativo del tipo di registrazione
2433        																					-- 2: Categoria del tipo di registrazione
2434        																					-- 3: Sigla del registro che corrisponde al dato tipo di registrazione
2435        																					-- 4: (valori 1/0/NULL) Flag di tipo di registrazione da eliminare
2436        			FlgRollBckFullIn			IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
2437        																					-- ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
2438        			FlgAutoCommitIn			IN 		PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
2439        			ErrContextOut			OUT		VARCHAR2,								-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
2440        			ErrCodeOut				OUT		PLS_INTEGER,							-- N.ro errore di uscita
2441        			ErrMsgOut				OUT 	VARCHAR2,								-- Messaggio d'errore
2442        			IdUOIn					IN		INTEGER DEFAULT dmpk_utility.GetValConfigParamNumber(1, NULL, 'NUM_VAL_NO_UPD'),
2443        																					-- Id. della UO nella cui porzione di oggettario è censito il soggetto
2444        			FlgVisibSottoUOIn		IN		PLS_INTEGER DEFAULT dmpk_utility.GetValConfigParamNumber(1, NULL, 'NUM_VAL_NO_UPD'),
2445        																					-- Flag 1/0. Se 1 la visibilità del modello è estesa a tutte le sotto UO di IdUOIn
2446        			FlgGestSottoUOIn		IN		PLS_INTEGER	DEFAULT dmpk_utility.GetValConfigParamNumber(1, NULL, 'NUM_VAL_NO_UPD')
2447        																					-- Flag 1/0. Se 1 la modifica/cancellazione del modello è estesa a tutte le sotto UO di IdUOIn
2448        			) return PLS_INTEGER;													-- Vale 1 se tutto è andato a buon fine, altrimenti 0 (in caso di errore)
2449        
2450        	/*** Funzione di eliminazione di un modello di oggetto di documento								***/
2451        	/*** Si può specificare se l'eliminazione deve essere fisica o solo logica (annullamento)		***/
2452        	/*** Se non lo si specifica il sistema fa quella fisica se possibile, se no quella logica		***/
2453        	function DModelloOggetto(
2454        			CodIdConnectionTokenIn	IN	    DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
2455        																					-- (obblig). Codice identificativo del token di connessione
2456        			IdUserLavoroIn			IN		DMT_USERS.ID_USER%type DEFAULT NULL,	-- Id. dell'utente a nome di cui si lavora. Se non valorizzato è l'utente connesso
2457        			IdModOggettoIn			IN 		DMT_MODELLI_OGGETTI.ID_MOD_OGGETTO%type,-- (obblig.) Id. del modello di oggetto da cancellare/annullare
2458        			FlgCancFisicaIn			IN		PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL): Se 1 si richiede la cancellazione fisica; se 0 l'annullamento logico; se non è valorizzato quella possibile delle 2.
2459        			MotiviIn				IN		DMT_ACTIVITIES.NOTE%type,				-- Motivi della cancellazione/annullamento
2460        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
2461        																					-- ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
2462        			FlgAutoCommitIn			IN 		PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
2463        			ErrContextOut			OUT		VARCHAR2,								-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
2464        			ErrCodeOut				OUT		PLS_INTEGER,							-- N.ro errore di uscita
2465        			ErrMsgOut				OUT 	VARCHAR2								-- Messaggio d'errore
2466        			) return PLS_INTEGER;													-- Vale 1 se tutto è andato a buon fine, altrimenti 0 (in caso di errore)
2467        
2468        
2469        	/********** funzione per ricercare le porzioni di topografico (i.e. toponimi, ovvero i luoghi dove viene collocata fisicamente la doc. cartacea) censite in DMT_TOPOGRAFICO **********/
2470        	function TrovaInTopografico(
2471        			CodIdConnectionTokenIn		IN	    	DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
2472        																					-- (obblig). Codice identificativo del token di connessione
2473        			IdUserLavoroIn			IN		DMT_USERS.ID_USER%type DEFAULT NULL,	-- Id. dell'utente a nome di cui si lavora. Se non valorizzato è l'utente connesso
2474        			----------------------inizio filtri di ricerca -----------------------------------------------------------------------
2475        			NomeToponimoIn			IN		VARCHAR2 DEFAULT NULL,					-- Filtro sul nome del toponimo: stringa/parole contenute nel campo NOME (ricerca di tipo contains)
2476        			CodRapidoToponimoIn		IN		VARCHAR2 DEFAULT NULL,					-- Filtro sul codice rapido del toponimo (ricerca case-insensitive in like)
2477        			DesToponimoIn			IN		VARCHAR2 DEFAULT NULL,					-- Filtro sulla descrizione del toponimo e suoi contenuti: stringa/parole contenute nel campo DESCRIZIONE (ricerca di tipo contains)
2478        			ProvCIToponimoIn		IN		VARCHAR2 DEFAULT NULL,					-- Filtro sul codice di origine del toponimo (ricerca case-sensitive in like)
2479        			IdToponimoIn			IN		DMT_TOPOGRAFICO.ID_TOPONIMO%type DEFAULT NULL,
2480        																					-- Id. di uno specifico toponimo da ricercare
2481        			FlgSoloToponUtenteIn	IN		PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se 1 la ricerca estrae solo i toponimi censiti dall'utente di lavoro, se 0 o NULL sia i toponimi censiti dall'utente che quelli censiti da altri
2482        			FlgIncludiAnnullatiIn	IN		PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se 1 la ricerca include anche i toponimi logicamente annullati, se 0 o NULL mostra solo i toponimi validi
2483        			FlgIncludiNascostiIn	IN		PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se 1 la ricerca include anche i toponimi "nascosti", se 0 o NULL no
2484        			------------- inizio argomenti standard di tutte le funzioni di ricerca che devono restituire una lista --------------
2485        			ColOrderByIO			IN OUT	VARCHAR2,								-- Indica il/i numeri della/e colonna dell'XML (CLOB ListaXMLOut) di output per cui ordinare i record nell'XML stesso (si può ordinare solo per le colonne da 1 a 8). Se l'ordinamento è per più colonne queste vanno separate con "," (es: 2; 2,3)
2486        																					-- in output può essere diverso che in input solo se in input è NULL: in tal caso significa che esiste sul tipo di ordinamento una qualche preimpostazione di sistema/utente ecc.
2487        																					-- se non valorizzato (neppure in output) la lista di record restituita non è ordinata
2488        			FlgDescOrderByIO  		IN OUT	VARCHAR2,								-- E' una stringa di 1 o 0/NULL, tanti quanti le colonne di ordinamento, separati da ",": 1 significa che l'ordinamento per la data colonna deve essere discendente anzichè ascendente (es: 1; 1,0; 1, )
2489        																					-- in output può essere diverso che in input solo se in input è NULL: in tal caso significa che esiste sul verso di ordinamento una qualche preimpostazione di sistema/utente ecc.
2490        			FlgSenzaPaginazioneIn 	IN 		PLS_INTEGER DEFAULT NULL,            	-- (valori 1/0/NULL) Se 1 l'estrazione non è paginata, altrimenti sì
2491        			NroPaginaIO      		IN OUT	PLS_INTEGER,                  			-- E' il numero della pagina da estrarre; se NULL e l'estrazione è paginata viene estratta la prima pagina
2492           			BachSizeIO				IN OUT	PLS_INTEGER,							-- Indica il massimo n.ro di record da estrarre se l'estrazione non è paginata (FlgSenzaPaginazioneIn=1)
2493        																					-- Indica la dimensione (n.ro di record) della pagina se l'estrazione è paginata (FlgSenzaPaginazioneIn 0 o NULL) e in tal caso se non è valorizzato la dimensione della pagina è quella settata per l'utente di lavoro o è pari al valore del parametro STD_PAGE_NUM_ROW del dominio di lavoro
2494        			OverFlowLimitIn			IN		PLS_INTEGER DEFAULT NULL,				-- E' il n.ro di record soddisfacenti la ricerca superato il quale la funzione deve restituire errore di overflow o avvertimento
2495        			FlgSenzaTotIn			IN		PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se 1 significa che non è richiesto come output il totale dei record soddisfacenti la ricerca (se la ricerca è paginata per la prima pagina il totale viene calcolato comunque, per le successive no)
2496        			NroTotRecOut			OUT		PLS_INTEGER,							-- E' il n.ro di record complessivi trovati (valorizzato solo se FlgSenzaTotIn è 0 o NULL o se si estrae la prima pagina), salvo che nel caso sia stato superato il limite di overflow (warning) e allora coincide con il n.ro di record estratti che sono pari al limite di overflow
2497             		NroRecInPaginaOut 		OUT   	PLS_INTEGER,                     		-- E' il numero di record nella pagina (valorizzato solo se l'estrazione è paginata, ovvero se FlgSenzaPaginazioneIn 0 o NULL)
2498        			FlgBatchSearchIn		IN		PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se 1 significa che la stored è utilizzata da un processo batch, altrimenti da un processo online.
2499        																					-- Serve affinchè in caso l'input OverFlowLimitIn non sia valorizzato vengano applicati i limiti di overflow per processo batch o online che sono parametri di configurazione
2500        			------------- fine argomenti standard di tutte le funzioni di ricerca che devono restituire una lista --------------
2501        			ListaXMLOut				OUT		NOCOPY CLOB,							-- Lista dei toponimi trovati (XML conforme a schema LISTA_STD.xsd)
2502        																					-- Ogni toponimo è un tag Riga che contiene le seguenti colonne:
2503        																					-- 1: Id. (PK) del toponimo
2504        																					-- 2: Nome del toponimo
2505        																					-- 3: Cod. rapido del toponimo
2506        																					-- 4: Descrizione del toponimo e suoi contenuti
2507        																					-- 5: Codice che identifica il toponimo nel sistema eventuale di provenienza
2508        																					-- 6: (valori 1/0) Flag di toponimo censito dall'utente di lavoro (1) o da altri (0)
2509        																					-- 7: (valori 1/0) Flag di toponimo valido (=1) o logicamente annullato (=0)
2510        																					-- 8: (valori 1/0) Flag di toponimo riservato di sistema e non modificabile da GUI
2511        																					-- 9: Note del toponimo
2512        																					-- 10: Id. utente di creazione
2513        																					-- 11: Descrizione utente di creazione
2514        																					-- 12: Timestamp di creazione
2515        																					-- 13: Id. utente di ultimo aggiornamento
2516        																					-- 14: Descrizione utente di ultimo aggiornamento
2517        																					-- 15: Timestamp di ultimo aggiornamento
2518        																					-- 16: (valori 1/0) Flag di toponimo "nascosto"
2519        			ErrContextOut			OUT		VARCHAR2,								-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
2520        			ErrCodeOut				OUT		PLS_INTEGER,							-- N.ro errore di uscita
2521        			ErrMsgOut				OUT 		VARCHAR2,							-- Messaggio d'errore
2522        			RigaTagNameIn			IN		VARCHAR2 DEFAULT NULL,					-- (opzionale) Come rinominare il tag Riga dell'XML ListaXMLOut di output
2523        			ColTagNameIn			IN		DMVA_STRING DEFAULT NULL				-- (opzionale) Come rinominare i tag delle colonne in alternativa a Colonna Nro=.. nell'XML ListaXMLOut di output
2524        			)return PLS_INTEGER;													-- Vale 1 se tutto è andato a buon fine, altrimenti 0
2525        
2526        	/******* Funzione per verificare se un toponimo esiste nel topografico e vi è identificabile univocamente															******/
2527        	/******* Il match con i toponimi censiti nel topografico segue i seguenti criteri: 																					******/
2528        	/******* per i toponimi in DB i campi corrispondenti ai dati che compaiono in input, valorizzati o meno che siano, sono uguali al corrispondente campo in input  	******/
2529        	/******* per i toponimi in DB i campi corrispondenti ai dati che NON compaiono in input possono essere non valorizzati o valorizzati in qualsiasi modo 				******/
2530        	/******* La funzione restituisce l'Id. del toponimo solo se a partire dagli estremi immessi riesce a identificarlo univocamente										******/
2531        	/******* è possibile (richiedendolo con apposito input) far sì che i dati del toponimo siano restituiti completandoli con quelli del toponimo trovato				******/
2532        	function FindInTopografico(
2533        			IdDominioIn				IN		DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,	-- (obblig.) Identificativo del dominio (soggetto produttore o AOO) di lavoro
2534        			DatiToponimoXMLIO		IN OUT	NOCOPY CLOB,							-- Dati del toponimo (tag XML fatto come un tag "Riga" dello schema LISTA_STD.xsd)
2535        																					-- Le colonne che mancano del tutto sono campi che per il toponimo da trovare possono assumere qualsiasi valore (NULL incluso).
2536        																					-- Le colonne presenti ma non valorizzate sono campi che si vuole che siano non valorizzati anche sul toponimo in DB da trovare.
2537        																					-- Le colonne possibili sono:
2538        																					-- 1:  Id. del toponimo
2539        																					-- 2:  Codice rapido del toponimo
2540        																					-- 3:  Nome del toponimo
2541        																					-- 4:  Descrizione del toponimo e dei suoi contenuti
2542        																					-- 5:  Cod. del toponimo in un eventuale sistema di provenienza
2543        																					-- Almeno una delle colonne da 1 a 5 deve essere valorizzata
2544        			FlgSoloVldIn			IN		PLS_INTEGER DEFAULT 1,					-- (valori 1/0/NULL) Indica se il toponimo deve essere valido (1) o può essere anche logicamente annullato
2545        			FlgCompletaDatiIn		IN		PLS_INTEGER DEFAULT 1,					-- (valori 1/0/NULL) Se 1 indica che qualora si identifichi univocamente il toponimo (return 1) DatiToponimoXMLIO viene restituito con i dati del toponimo trovato
2546        			IdToponimoOut			OUT		DMT_TOPOGRAFICO.ID_TOPONIMO%type,		-- Identificativo del toponimo trovato
2547        			ErrContextOut			OUT		VARCHAR2,								-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
2548        			ErrCodeOut				OUT		PLS_INTEGER,							-- N.ro errore di uscita
2549        			ErrMsgOut				OUT 		VARCHAR2)							-- Messaggio d'errore
2550        			return PLS_INTEGER;														-- Vale 1 se il toponimo è stato individuato univocamente, altrimenti 0
2551        
2552        	/****************** funzione per creare o modificare un toponimo - i.e. luogo di collocazione fisica della documentazione - nel topografico ****************/
2553        	function IUInTopografico(
2554        			CodIdConnectionTokenIn	IN	    DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
2555        																					-- (obblig). Codice identificativo del token di connessione
2556        			IdUserLavoroIn			IN		DMT_USERS.ID_USER%type DEFAULT NULL,	-- Id. dell'utente a nome di cui si lavora. Se non valorizzato è l'utente connesso
2557        			IdToponimoIO			IN OUT	DMT_TOPOGRAFICO.ID_TOPONIMO%type,		-- Id. del toponimo da modificare. Se NULL si intende che il toponimo è da creare ex-novo
2558        																					-- in output, salvo in caso di errore, è sempre valorizzato
2559        			NomeToponimoIn			IN 		DMT_TOPOGRAFICO.NOME_TOPONIMO%type DEFAULT dmpk_utility.GetValConfigParamText(1, NULL, 'STR_VAL_NO_UPD'),
2560        																					-- (obblig.) Nome del toponimo
2561        			CodRapidoToponimoIn		IN 		DMT_TOPOGRAFICO.COD_RAPIDO%type DEFAULT dmpk_utility.GetValConfigParamText(1, NULL, 'STR_VAL_NO_UPD'),
2562        																					-- Codice rapido del toponimo
2563        																					-- In creazione di toponimo se non viene specificato viene settato in automatico pari a IdToponimoIO
2564        			DescrizioneIn			IN		DMT_TOPOGRAFICO.DESCRIZIONE%type DEFAULT dmpk_utility.GetValConfigParamText(1, NULL, 'STR_VAL_NO_UPD'),
2565        																					-- (obblig.) Descrizione estesa (con eventuale indicazione dei contenuti)
2566        			CIProvToponimoIn		IN 		DMT_TOPOGRAFICO.PROV_CI_TOPONIMO%TYPE DEFAULT dmpk_utility.GetValConfigParamText(1, NULL, 'STR_VAL_NO_UPD'),
2567        																					-- Codice identificativo del toponimo nel sistema di provenienza
2568        			FlgLockedIn				IN		PLS_INTEGER DEFAULT dmpk_utility.GetValConfigParamNumber(1, NULL, 'NUM_VAL_NO_UPD'),
2569        																					-- (valori 1/0/NULL) Indicatore di toponimo riservato dal sistema e non modificabile/cancellabile da GUI
2570        			NoteToponimoIn			IN 		DMT_TOPOGRAFICO.NOTE%TYPE DEFAULT dmpk_utility.GetValConfigParamText(1, NULL, 'STR_VAL_NO_UPD'),
2571        																					-- Annotazioni del toponimo
2572        			FlgRollBckFullIn			IN 		PLS_INTEGER DEFAULT NULL,			-- (valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
2573        																					-- ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
2574        			FlgAutoCommitIn			IN 		PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
2575        			ErrContextOut			OUT		VARCHAR2,								-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
2576        			ErrCodeOut				OUT		PLS_INTEGER,							-- N.ro errore di uscita
2577        			ErrMsgOut				OUT 		VARCHAR2							-- Messaggio d'errore
2578        			) return PLS_INTEGER;													-- Vale 1 se tutto è andato a buon fine, altrimenti 0 (in caso di errore)
2579        
2580        	/*** Funzione di eliminazione di un toponimo dalla DMT_TOPOGRAFICO								***/
2581        	/*** Si può specificare se l'eliminazione deve essere fisica o solo logica (annullamento)		***/
2582        	/*** Se non lo si specifica il sistema fa quella fisica se possibile, se no quella logica		***/
2583        	function DDaTopografico(
2584        			CodIdConnectionTokenIn	IN	    DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
2585        																					-- (obblig). Codice identificativo del token di connessione
2586        			IdUserLavoroIn			IN		DMT_USERS.ID_USER%type DEFAULT NULL,	-- Id. dell'utente a nome di cui si lavora. Se non valorizzato è l'utente connesso
2587        			IdToponimoIn			IN 		DMT_TOPOGRAFICO.ID_TOPONIMO%type,		-- (obblig.) Id. del toponimo di DMT_TOPOGRAFICO da cancellare/annullare
2588        			FlgCancFisicaIn			IN		PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL): Se 1 si richiede la cancellazione fisica; se 0 l'annullamento logico; se non è valorizzato quella possibile delle 2.
2589        			MotiviIn				IN		DMT_ACTIVITIES.NOTE%type,				-- Motivi della cancellazione/annullamento
2590        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
2591        																					-- ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
2592        			FlgAutoCommitIn			IN 		PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
2593        			ErrContextOut			OUT		VARCHAR2,								-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
2594        			ErrCodeOut				OUT		PLS_INTEGER,							-- N.ro errore di uscita
2595        			ErrMsgOut				OUT 	VARCHAR2								-- Messaggio d'errore
2596        			) return PLS_INTEGER;													-- Vale 1 se tutto è andato a buon fine, altrimenti 0 (in caso di errore)
2597        
2598        	/****** serve ad ottenere le preference di default per un dato utente ed una data GUI di tipo lista *******/
2599        	function GetListDefPrefs(
2600        			UsernameIn				IN		DMT_USERS.USERNAME%type,				-- (obblig.)Username dell'utente
2601        			ListIdIn				IN		VARCHAR2,								-- (obblig) Nome identificativo della lista a GUI
2602        			FilterPrefOut			OUT 	NOCOPY CLOB,							-- Preference di default del filtro
2603        			FilterLayoutPrefOut		OUT 	NOCOPY CLOB,							-- Preference di default del layout di filtro
2604        			GridPrefOut				OUT		NOCOPY CLOB,							-- Preference di defult della lista
2605        			AutoSearchPrefOut		OUT		PLS_INTEGER,							-- (valori 1/0) Se 1 è attiva la preference di ricerca utomatica sulla lista
2606        			FlgFilterPrefDefOut		OUT		PLS_INTEGER,							-- (valori 1/0) Se 1 la preference di default del filtro è quella dello userid = DEFAULT
2607        			FlgFilterLayoutPrefDefOut	OUT		PLS_INTEGER,						-- (valori 1/0) Se 1 la preference di default del layout di filtro è quella dello userid = DEFAULT
2608        			FlgGridPrefDefOut		OUT		PLS_INTEGER,							-- (valori 1/0) Se 1 preference di default della lista è quella dello userid = DEFAULT
2609        			ErrContextOut			OUT		VARCHAR2,								-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
2610        			ErrCodeOut				OUT		PLS_INTEGER,							-- N.ro errore di uscita
2611        			ErrMsgOut				OUT 	VARCHAR2,								-- Messaggio d'errore
2612        			IdTreeNodeIn			IN	VARCHAR2 DEFAULT NULL						-- Id. del nodo della struttura ad albero (repository documentazione, organigramma o titolario) per cui trovare la preference di filtro
2613        			) return PLS_INTEGER;													-- Vale 1 se tutto è andato a buon fine, altrimenti 0 (in caso di errore)
2614        
2615        
2616        	/************ serve a elaborare i risultati delle richieste di esportazione su file di liste *****/
2617        	procedure EstraiDatiXExportListeSuFile (IdQueueIn IN INTEGER DEFAULT 1);
2618        
2619        	----- funzione per ottenere contenuti archiviati come campi CLOB su tabelle
2620        	function GetClobFromTabCol(
2621        			NomeTabellaIn			IN		VARCHAR2,								-- (obblig.) Nome della tabella in cui si trova il campo clob da prelevare
2622        			NomeColonnaIn			IN		VARCHAR2,								-- (obblig.) Nome della colonna di tabella in cui si trova il campo clob da prelevare
2623        			RowidRecIn				IN		VARCHAR2,								-- (obblig.) Rowid del record di tabella in cui si trova il campo clob da prelevare
2624        			ClobOut					OUT		NOCOPY CLOB,							-- Contenuto del clob
2625        			ErrContextOut			OUT		VARCHAR2,								-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
2626        			ErrCodeOut				OUT		PLS_INTEGER,							-- N.ro errore di uscita
2627        			ErrMsgOut				OUT 	VARCHAR2)								-- Messaggio d'errore
2628        			return PLS_INTEGER;														-- Vale 1 se tutto è andato a buon fine, altrimenti 0
2629        
2630        
2631        	----- funzione per ricercare i log scritti nella tabella DMT_ACTIVITIES
2632        	function TrovaLog(
2633        		CodIdConnectionTokenIn		IN	    DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
2634        																					-- (obblig). Codice identificativo del token di connessione
2635        		IdUserLavoroIn				IN		DMT_USERS.ID_USER%type DEFAULT NULL,	-- Id.(ID_USER della DMT_USERS) dell'utente a nome di cui si lavora. Se non valorizzato è l'utente connesso
2636        		FiltriIO					IN OUT	NOCOPY CLOB,							-- XML contenente nomi e valori dei filtri di ricerca(conforme allo schema SezioneCache.xsd).
2637        																					-- Ogni filtro è un tag "Variabile" dell'XML
2638        																					-- I filtri che sono liste hanno nomi (tag Variabile/Nome) che iniziano con @.
2639        																					-- I nomi dei filtri possibili sono:
2640        																					-- TipoOperazione: indica il/i tipi di operazioni da ricercare (indicati in modo esatto). Se più di uno vanno seaparati con ;
2641        																					-- EsitoOperazione (valori OK / KO) Servere a restringere la ricerca alle operazioni avvenute con successo o andate in errore
2642        																					-- TsOperazioneDa: estremo inferiore dell'intervallo di ricerca sulla data e ora delle operazioni (nel formato dato dal parametro di conf. FMT_STD_TIMESTAMP)
2643        																					-- TsOperazioneA: estremo superiore dell'intervallo di ricerca sulla data e ora delle operazioni (nel formato dato dal parametro di conf. FMT_STD_TIMESTAMP)
2644        																					-- OperazioneEffettuataDa : Id. dell'utente/i che hanno effettuato le operazioni (se più di uno separati da ;)
2645        		------------- inizio argomenti standard di tutte le funzioni di ricerca che devono restituire una lista --------------
2646        		ColOrderByIO				IN OUT	VARCHAR2,								-- Indica il/i numeri della/e colonna dell'XML (CLOB ResultOut) di output per cui ordinare i record nell'XML stesso (si può ordinare solo per le colonne: da 1 a 7). Se l'ordinamento è per più colonne queste vanno separate con "," (es: 2; 2,3)
2647        																					-- in output può essere diverso che in input solo se in input è NULL: in tal caso significa che esiste sul tipo di ordinamento una qualche preimpostazione di sistema/utente ecc.
2648        																					-- se non valorizzato (neppure in output) la lista di record restituita non è ordinata
2649        		FlgDescOrderByIO  			IN OUT	VARCHAR2,								-- E' una stringa di 1 o 0/NULL, tanti quanti le colonne di ordinamento, separati da ",": 1 significa che l'ordinamento per la data colonna deve essere discendente anzichè ascendente (es: 1; 1,0; 1, )
2650        																					-- in output può essere diverso che in input solo se in input è NULL: in tal caso significa che esiste sul verso di ordinamento una qualche preimpostazione di sistema/utente ecc.
2651        		FlgSenzaPaginazioneIn 		IN 		PLS_INTEGER DEFAULT NULL,            	-- (valori 1/0/NULL) Se 1 l'estrazione non è paginata, altrimenti sì
2652        		NroPaginaIO      			IN OUT	PLS_INTEGER,                  			-- E' il numero della pagina da estrarre; se NULL e l'estrazione è paginata viene estratta la prima pagina
2653        		BachSizeIO					IN OUT	PLS_INTEGER,							-- Indica il massimo n.ro di record da estrarre se l'estrazione non è paginata (FlgSenzaPaginazioneIn=1)
2654        																					-- Indica la dimensione (n.ro di record) della pagina se l'estrazione è paginata (FlgSenzaPaginazioneIn 0 o NULL) e in tal caso se non è valorizzato la dimensione della pagina è quella settata per l'utente di lavoro o è pari al valore del parametro STD_PAGE_NUM_ROW del dominio di lavoro
2655        		OverFlowLimitIn				IN		PLS_INTEGER DEFAULT NULL,				-- E' il n.ro di record soddisfacenti la ricerca superato il quale la funzione deve restituire errore di overflow
2656        		FlgSenzaTotIn				IN		PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se 1 significa che non è richiesto come output il totale dei record soddisfacenti la ricerca (se la ricerca è paginata per la prima pagina il totale viene calcolato comunque, per le successive no)
2657        		NroTotRecOut				OUT		PLS_INTEGER,							-- E' il n.ro di record complessivi trovati (valorizzato solo se FlgSenzaTotIn è 0 o NULL o se si estrae la prima pagina)
2658        		NroRecInPaginaOut 			OUT   	PLS_INTEGER,                     		-- E' il numero di record nella pagina (valorizzato solo se l'estrazione è paginata, ovvero se FlgSenzaPaginazioneIn 0 o NULL)
2659        		FlgBatchSearchIn			IN		PLS_INTEGER DEFAULT NULL,				-- (valori 1/0/NULL) Se 1 significa che la stored è utilizzata da un processo batch, altrimenti da un processo online.
2660        																					-- Serve affinchè in caso l'input OverFlowLimitIn non sia valorizzato vengano applicati i limiti di overflow per processo batch o online che sono parametri di configurazione del sistema.
2661        		------------- fine argomenti standard di tutte le funzioni di ricerca che devono restituire una lista --------------
2662        		ResultOut					OUT		NOCOPY CLOB, 							-- Lista dei record di log trovati (XML conforme a schema LISTA_STD.xsd)
2663        																					-- Ogni record di log è un tag Riga che può contenere le seguenti colonne:
2664        																					-- 1: Timestamp dell'operazione (nel formato dato dal parametro di config. FMT_STD_TIMESTAMP)
2665        																					-- 2: Progressivo operazione per ordinamento cronologico
2666        																					-- 3: Tipo di operazione
2667        																					-- 4: Id. dell'utente che ha effettuato l'operazione
2668        																					-- 5: Decodifica dell'utente che ha effettuato l'operazione
2669        																					-- 6: Id. dell'utente a nome di cui stava lavorando chi ha effettuato l'operazione
2670        																					-- 7: Decodifica dell'utente a nome di cui stava lavorando chi ha effettuato l'operazione
2671        																					-- 8: Descrizione/dettagli dell'operazione
2672        																					-- 9: Esito dell'operazione (valori: successo; fallita)
2673        		ErrContextOut				OUT		VARCHAR2,								-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore
2674        		ErrCodeOut					OUT		PLS_INTEGER,							-- N.ro errore di uscita
2675        		ErrMsgOut					OUT 		VARCHAR2)							-- Messaggio d'errore
2676        		return PLS_INTEGER;															-- Vale 1 se tutto è andato a buon fine, altrimenti 0
2677        
2678        END DMPK_UTILITY;