1        PACKAGE Dmpk_Ws AUTHID CURRENT_USER IS
2        
3        	/****************************************************		INFORMAZIONI GENERALI		*******************************************************/
4        	/************** Argomenti delle stored per il controllo della transazione:											*******/
5        	/************** FlgRollBckFullIn -> se 1 in caso di errore viene fatta la rollback completa (non a savepoint), 					*******/
6        	/************** 				altrimenti la rollback delle sole modifiche effettuate nella stored						*******/
7        	/************** 				ATTENZIONE: la rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log			*******/
8        	/************** FlgAutoCommitIn  -> se vale 1, dopo la rollback e qualunque sia l'esito (positivo o no), la stored esegue una commit finale *****/
9        	/************** Tutte le funzioni/procedure che NON hanno gli argomenti in input FlgRollBckFullIn e FlgAutoCommitIn 				*******/
10        	/************** NON ESEGUONO AL LORO INTERNO ALCUNA COMMIT nè ROLLBACK 												*******/
11        
12        	/************** Tutte le funzioni, tranne quelle da utilizzarsi nelle select, restituiscono 1 in caso di successo, altrimenti 0		*******/
13        	/************** Tali funzioni restituiscono, in caso di result 0, un n.ro, un contesto e un messaggio di errore:					*******/
14        	/************** il n.ro è: <0 se errore ORACLE non specificamente gestito 											*******/
15        	/**************		   da 1->1000 errore "grave" (SEVERE_ERROR) gestito											*******/
16        	/**************		   >1000 errore non grave gestito														*******/
17        	/************** il contesto indica il package e/o funzione/procedura in cui si è verificato l'errore							*******/
18        
19        	/***************** Funzione per creare una nuova unità documentaria (tramite Web Service)		**************/
20        	/***************** i cui metadati sono forniti in un xml conforme allo schema NewUD.xsd		**************/
21        	FUNCTION AddUD(
22        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
23        															--(obblig.) Codice identificativo del token di connessione
24        			XMLIn				IN		CLOB,						--(obblig.) XML in input al Web service di creazione unità documentaria (secondo schema NewUD.xsd)
25        			DocAttachXMLOut		OUT		NOCOPY CLOB,				-- Lista con i dati per caricare (con step-version) nella repository i file associati all'unità documentaria e specificati come attach del messaggio SOAP(XML conforme a schema LISTA_STD.xsd)
26        															-- Per ogni attach vi è un tag Riga che contiene le seguenti colonne:
27        															-- 1: Valore fisso AV: indica il tipo di operazione da fare sul documento corrispondente all'attach
28        															-- 2: N.ro dell'attach del messaggio SOAP che corrisponde al file da caricare nella repository
29        															-- 3: Identificativo del documento creato in DB in corrispondenza dell'attachment
30        															-- 4: Nome del file da caricare (quello con cui mostrarlo e dalla cui estensione si ricava il formato)
31        															-- 5: (valori 1/0) Se 1 indica che è la versione è pubblicata, se 0 no
32        															-- 6: (valori 1/0) Se 1 indica che è la versione deriva da scansione, se 0 no
33        															-- 7: Codice che identifica la versione (n.ro versione alfanumerico, opzionale)
34        															-- 8: Note della versione
35        															-- 9: (valori 1/0) Se 1 indica che la versione deve essere sottoposta a OCR
36        			RegNumDaRichASistEstOut	OUT		NOCOPY CLOB,				-- Lista con gli estremi delle registrazioni/numerazioni richieste da farsi dare da sistemi esterni (XML conforme a schema LISTA_STD.xsd) o da AURIGA stesso tramite API di RegistraUnitaDoc
37        															-- Per ogni registrazioni/numerazioni vi è un tag Riga che contiene le seguenti colonne:
38        															-- 1: Codice che indica la categoria di registrazione/numerazione (PG = Protocollo Generale, ecc)
39        															-- 2: Sigla che indica il registro di registrazione/numerazione
40        															-- 3: Anno di registrazione/numerazione se diverso da quello corrente
41        			XmlOut			OUT		NOCOPY CLOB,				-- XML con dati di output specifici del WS, restituito solo in caso di successo, conforme a schema Output_UD.xsd
42        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
43        																--ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
44        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,	--(valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
45        			ErrContextOut		OUT		VARCHAR2,					--Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
46        			ErrCodeOut			OUT		PLS_INTEGER,				--N.ro errore di uscita
47        			ErrMsgOut			OUT 		VARCHAR2,				--Messaggio d'errore
48        			AttachmentFileXMIn	IN		CLOB DEFAULT NULL		-- Lista XML conforme a schema ListaStd.xsd con le informazioni sui file (primario e allegati) dell'UD che devono essere già stati archiviati sullo storage definitivo
49        																-- Se questa lista viene istanziata il versionamento dei file su DB viene fatto all'interno di questa stored senza che debbano essere fatte ulteriori chiamate e quindi DocAttachXMLOut resta vuota in output
50        																-- Le colonne della lista sono:
51        																-- 1: DisplayName del file (eventualmente rinominato per rendere coerente l'estensione con il formato riconosciuto)
52        																-- 2: URI del file salvato su archivio definitivo in notazione storageUtil
53        																-- 3: Nro di attachment con cui il file appare nella request secondo schema NEWUD.xsd
54        																--	  Nel caso di unico attachment zip che viene "spacchettato" come accade per il il SUE di ImpresaInUnGiorno il n.ro attach sarà sempre 1 per tutti i file dell'unico attachment zip
55        																-- 7: impronta
56        																-- 8: algoritmo calcolo impronta
57        																-- 9: encoding di calcolo impronta: colonna
58        																-- 10: Flg file firmato (valori 1/0)
59        																-- 11: Mimetype
60        																-- 12: Firmatari(se più di uno separati da “;” )
61        																-- 12: Indicazione del tipo di firma (CAdES o PAdES)
62        																-- 13: Info di verifica della firma
63        																-- 14: Data e ora delle marca se presente marca temporale valida (nel formato DD/MM/RRR HH24:MI:SS)
64        																-- 15: Tipo di marca temporale se presente
65        																-- 16: Informazioni di verifica della marca temporale se presente
66        			) RETURN PLS_INTEGER;								--Vale 1 se tutto è andato a buon fine, altrimenti 0
67        
68        
69        	/********* funzione richiamata dopo WS di AddUD con file inviati separati su ftp: serve ad effettuare la creazione dei documenti allegati se presenti e il versionamento dei file su DB *****/
70        	function AddFileUDConFileSeparati(
71        			IdUDIn					IN		DMT_UNITA_DOC.ID_UD%type,
72        																-- (obblig.) Id UD dell'unità documentaria creata con WS di AddUD con file inviati separatamente su ftp
73        			IndiceFileIn			IN		CLOB,				-- (obblig.) XML conforme a schema FileRegistrazioneInviatiSeparati.xsd che descrive i file ricevuti separatamente dalla chiamata alla AddUD su ftp
74        			InfoFileXMIn			IN		CLOB,				-- (obblig.) Lista XML conforme a schema ListaStd.xsd con le informazioni sui file (primario e allegati) dell'UD che devono essere già stati archiviati sullo storage definitivo
75        																-- Ogni riga è un file. I file devono essere indicati nell'esatto ordine in cui appaiono nel XML IndiceFileIn
76        																-- Le colonne della lista sono:
77        																-- 1: DisplayName del file (eventualmente rinominato per rendere coerente l'estensione con il formato riconosciuto)
78        																-- 2: URI del file salvato su archivio definitivo in notazione storageUtil
79        																-- 7: impronta
80        																-- 8: algoritmo calcolo impronta
81        																-- 9: encoding di calcolo impronta: colonna
82        																-- 10: Flg file firmato (valori 1/0)
83        																-- 11: Mimetype
84        																-- 12: Firmatari(se più di uno separati da “;” )
85        																-- 12: Indicazione del tipo di firma (CAdES o PAdES)
86        																-- 13: Info di verifica della firma
87        																-- 14: Data e ora delle marca se presente marca temporale valida (nel formato DD/MM/RRR HH24:MI:SS)
88        																-- 15: Tipo di marca temporale se presente
89        																-- 16: Informazioni di verifica della marca temporale se presente
90        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,
91        																--(valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
92        																--ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
93        			FlgAutoCommitIn			IN 		PLS_INTEGER DEFAULT NULL,
94        																--(valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
95        			ErrContextOut			OUT		VARCHAR2,			-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
96        			ErrCodeOut				OUT		PLS_INTEGER,		-- N.ro errore di uscita
97        			ErrMsgOut				OUT 	VARCHAR2			-- Messaggio d'errore
98        			) RETURN PLS_INTEGER;								-- Vale 1 se tutto è andato a buon fine, altrimenti 0
99        
100        	/***************** Funzione per aggiornare un'unità documentaria (tramite Web Service)				**************/
101        	/***************** i metadati da aggiornare sono forniti in un xml conforme allo schema UDDaAgg.xsd		**************/
102        	FUNCTION UpdUD(
103        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
104        															--(obblig.) Codice identificativo del token di connessione
105        			XMLIn				IN		CLOB,						--(obblig.) XML in input al Web service di aggiornamento unità documentaria (secondo schema UDDaAgg.xsd)
106        			OperVsDocXMLOut		OUT		NOCOPY CLOB,				-- Lista con i dati su come aggiornare nella repository i documenti associati all'unità documentaria (XML conforme a schema LISTA_STD.xsd)
107        															-- Per ogni operazione da fare su un documento vi è un tag Riga che contiene le seguenti colonne:
108        															-- 1: Tipo di operazione da fare sul documento; valori possibili:
109        															--		AV = Step-version, ovvero aggiunta di nuova versione elettronica (anche la prima)
110        															--		MM = Modifica dei metadati del documento
111        															--		DV = Cancellazione dell'ultima versione elettronica valida e visibile all'utente
112        															--		DD = Cancellazione del documento
113        															--		SV = Sostituzione di versione
114        															--		MV = Modifica metadati di versione
115        															-- 2: N.ro dell'attach del messaggio SOAP che corrisponde al file da caricare nella repository (valorizzato solo se il tipo di operazione è AV o SV)
116        															-- 3: Identificativo del documento
117        															-- 4: Nome del file della versione (valorizzato solo se il tipo di operazione è AV o SV o MV); è il nome con cui mostrarlo e dalla cui estensione si ricava il formato)
118        															-- 5: (valori 1/0) Se 1 indica che è la versione è pubblicata, se 0 no (valorizzato solo se il tipo di operazione è AV o SV o MV)
119        															-- 6: (valori 1/0) Se 1 indica che è la versione deriva da scansione, se 0 no (valorizzato solo se il tipo di operazione è AV o SV o MV)
120        															-- 7: Codice che identifica la versione (n.ro versione alfanumerico, opzionale) (valorizzato solo se il tipo di operazione è AV o SV o MV)
121        															-- 8: Note della versione (valorizzato solo se il tipo di operazione è AV o SV o MV)
122        															-- 9: (valori 1/0) Se 1 indica che la versione deve essere sottoposta a OCR
123        			RegNumDaRichASistEstOut	OUT		NOCOPY CLOB,				-- Lista con gli estremi delle registrazioni/numerazioni richieste da farsi dare da sistemi esterni (XML conforme a schema LISTA_STD.xsd) o da AURIGA stesso tramite API di RegistraUnitaDoc
124        															-- Per ogni registrazioni/numerazioni vi è un tag Riga che contiene le seguenti colonne:
125        															-- 1: Codice che indica la categoria di registrazione/numerazione (PG = Protocollo Generale, ecc)
126        															-- 2: Sigla che indica il registro di registrazione/numerazione
127        															-- 3: Anno di registrazione/numerazione se diverso da quello corrente
128        			XmlOut			OUT		NOCOPY CLOB,				-- XML con dati di output specifici del WS, restituito solo in caso di successo, conforme a schema Output_UD.xsd
129        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
130        															--ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
131        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
132        			ErrContextOut		OUT		VARCHAR2,					--Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
133        			ErrCodeOut			OUT		PLS_INTEGER,				--N.ro errore di uscita
134        			ErrMsgOut			OUT 		VARCHAR2)					--Messaggio d'errore
135        			RETURN PLS_INTEGER;									--Vale 1 se tutto è andato a buon fine, altrimenti 0
136        
137        	/***************** Funzione per estrarre un singolo file legato ad un'unità documentaria (tramite Web Service) 			**************/
138        	/***************** gli estremi del file da estrarre sono forniti in un xml conforme allo schema FileUDToExtract.xsd		**************/
139        	FUNCTION ExtractFileUD(
140        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
141        															--(obblig.) Codice identificativo del token di connessione
142        			XMLIn				IN		CLOB,						--(obblig.) XML in input al Web service di estrazione file di un'unità documentaria (secondo schema FileUDToExtract.xsd)
143        			XmlOut			OUT		NOCOPY CLOB,				-- XML con dati di output specifici del WS, restituito solo in caso di successo, conforme a schema Output_FileUDToExtract.xsd
144        			IdDocToExtractOut		OUT		INTEGER,					-- ID_DOC del documento di cui estrarre la versione
145        			NroVerToExtractOut	OUT		INTEGER,					-- N.ro della versione da estrarre
146        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
147        															--ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
148        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
149        			ErrContextOut		OUT		VARCHAR2,					--Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
150        			ErrCodeOut			OUT		PLS_INTEGER,				--N.ro errore di uscita
151        			ErrMsgOut			OUT 		VARCHAR2)					--Messaggio d'errore
152        			RETURN PLS_INTEGER;									--Vale 1 se tutto è andato a buon fine, altrimenti 0
153        
154        	/***************** Funzione per estrarre tutti i file (visibili) legati ad un'unità documentaria (tramite Web Service) 					**************/
155        	/***************** gli estremi dell'unità doc. di cui estrarre i file sono forniti in un xml conforme allo schema EstremiXIdentificazioneUD.xsd	**************/
156        	FUNCTION ExtractFilesUD(
157        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
158        															--(obblig.) Codice identificativo del token di connessione
159        			XMLIn				IN		CLOB,						--(obblig.) XML in input al Web service di estrazione files di un'unità documentaria (secondo schema EstremiXIdentificazioneUD.xsd)
160        			XmlOut			OUT		NOCOPY CLOB,				-- XML con dati di output specifici del WS, restituito solo in caso di successo, conforme a schema Output_FilesUD.xsd
161        			VerDocToExtractTabOut	OUT		NOCOPY CLOB,				-- Lista con gli id. dei documenti da estrarre (XML conforme a schema LISTA_STD.xsd)
162        															-- Ogni documento è un tag Riga che contiene le seguenti colonne:
163        															-- 1: Id. del documento
164        															-- 2: N.ro della versione da estrarre (l'ultima valida visibile all'utente)
165        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
166        															--ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
167        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
168        			ErrContextOut		OUT		VARCHAR2,					--Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
169        			ErrCodeOut			OUT		PLS_INTEGER,				--N.ro errore di uscita
170        			ErrMsgOut			OUT 		VARCHAR2)					--Messaggio d'errore
171        			RETURN PLS_INTEGER;									--Vale 1 se tutto è andato a buon fine, altrimenti 0
172        
173        	/***************** Funzione che a partire da un xml conforme allo schema EstremiXIdentificazioneDoc.xsd ricava il documento su cui lavorare 				******/
174        	/***************** serve per i WS di lock, unlock e check-out. Nel caso del check-out restituisce anche i dati del documento checked-out e del file estratto 	******/
175        	FUNCTION LockCheckOut(
176        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
177        															--(obblig.) Codice identificativo del token di connessione
178        			FlgTipoWSIn			IN		VARCHAR2,					--(obblig.) Tipo di Web Service che richiama la funzione. Valori ammessi:
179        															-- L	= Lock
180        															-- U	= Unlock
181        															-- C	= Check-out
182        			XMLIn				IN		CLOB,						--(obblig.) XML con tracciato conforme a schema EstremiXIdentificazioneDoc.xsd
183        			IdDocOut			OUT		DMT_DOCUMENTS.ID_DOC%TYPE,		-- Id. del documento ricavato dall'XML in input
184        			XMLOut			OUT		NOCOPY CLOB,				-- XML di output conforme allo schema Output_FileCheckedOut.xsd.
185        															-- E' valorizzato solo se FlgTipoWSIn=C e in caso di esito positivo
186        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
187        															--ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
188        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
189        			ErrContextOut		OUT		VARCHAR2,					--Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
190        			ErrCodeOut			OUT		PLS_INTEGER,				--N.ro errore di uscita
191        			ErrMsgOut			OUT 		VARCHAR2)					--Messaggio d'errore
192        			RETURN PLS_INTEGER;									--Vale 1 se tutto è andato a buon fine, altrimenti 0
193        
194        	/***************** Funzione da richiamare nel WS che fa check-in/step-version di un documento 	******/
195        	/***************** ovvero nel WS che crea una nuova/prima versione di un documento			******/
196        	FUNCTION CheckIn(
197        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
198        															--(obblig.) Codice identificativo del token di connessione
199        			XMLIn				IN		CLOB,						--(obblig.) XML con tracciato conforme a schema CheckIn.xsd
200        			IdDocOut			OUT		DMT_DOCUMENTS.ID_DOC%TYPE,		-- Id. del documento di cui fare check-in
201        			NroVersioneEstrattaOut	OUT		PLS_INTEGER,				-- N.ro progressivo della versione checked-out/estratta dall'utente e che lui ritiene di aggiornare;
202        															-- valorizzandola si richiede che venga controllato che essa coincida con l'attuale ultima versione del documento
203        															-- Dunque se è valorizzato va fatta check-in, se no step-versione
204        			FlgVerificaFirmaFileOut	OUT		PLS_INTEGER,				-- (valori 1/0) Se 1 indica che deve essere verificata l'eventuale firma digitale del file che deve dar luogo alla nuova versione
205        			AttributiVerXMLOut	OUT		NOCOPY CLOB,				-- XML contenente nomi e valori degli attributi della nuova versione elettronica (conforme allo schema SezioneCache.xsd)
206        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
207        															--ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
208        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
209        			ErrContextOut		OUT		VARCHAR2,					--Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
210        			ErrCodeOut			OUT		PLS_INTEGER,				--N.ro errore di uscita
211        			ErrMsgOut			OUT 		VARCHAR2)					--Messaggio d'errore
212        			RETURN PLS_INTEGER;									--Vale 1 se tutto è andato a buon fine, altrimenti 0
213        
214        	/***************** Funzione per estrarre i metadati di un'unità documentaria  												**************/
215        	/***************** gli estremi dell'unità doc. di cui estrarre i metadati sono forniti in un xml conforme allo schema EstremiXIdentificazioneUD.xsd	**************/
216        	FUNCTION GetDatiUD(
217        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
218        															--(obblig.) Codice identificativo del token di connessione
219        			XMLIn				IN		CLOB,						--(obblig.) XML in input al Web service di estrazione metadati di un'unità documentaria (secondo schema EstremiXIdentificazioneUD.xsd)
220        			XmlOut			OUT		NOCOPY CLOB,				-- XML con dati di output specifici del WS, restituito solo in caso di successo, conforme a schema Output_DatiUD.xsd
221        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
222        															--ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
223        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
224        			ErrContextOut		OUT		VARCHAR2,					--Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
225        			ErrCodeOut			OUT		PLS_INTEGER,				--N.ro errore di uscita
226        			ErrMsgOut			OUT 		VARCHAR2)					--Messaggio d'errore
227        			RETURN PLS_INTEGER;									--Vale 1 se tutto è andato a buon fine, altrimenti 0
228        
229        	/****************** Funzione per trovare l'id. di un unità documentaria a partire da un XML conforme allo schema EstremiXIdentificazioneUD.xsd	**************/
230        	FUNCTION LeggiEstremiXIdentificazioneUD(
231        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
232        															--(obblig.) Codice identificativo del token di connessione
233        			XMLIn				IN		CLOB,						--(obblig.) XML conforme a schema EstremiXIdentificazioneUD.xsd)
234        			IdUDOut			OUT		DMT_UNITA_DOC.ID_UD%TYPE,		--Identificativo dell'unità documentaria trovata a partire dall'XML
235        			ErrContextOut		OUT		VARCHAR2,					--Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
236        			ErrCodeOut			OUT		PLS_INTEGER,				--N.ro errore di uscita
237        			ErrMsgOut			OUT 		VARCHAR2)					--Messaggio d'errore
238        			RETURN PLS_INTEGER;									--Vale 1 se dall'XML in input l'unità documentaria è stata individuata univocamente, altrimenti 0
239        
240        	/************ Funzione per cancellare logicamente o fisicamente una versione eletronica di documento											**********/
241        	/************ gli estremi della versione da cancellare e del tipo di cancellazione (fisica o logica) sono forniti in un xml conforme a schema DeleteVerDoc.xsd 	**********/
242        	FUNCTION DelVerDoc(
243        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
244        															--(obblig.) Codice identificativo del token di connessione
245        			XMLIn				IN		CLOB,						--(obblig.) XML in input al Web service di cancellazione versione (secondo schema DeleteVerDoc.xsd)
246        			IdDocOut			OUT		DMT_DOCUMENTS.ID_DOC%TYPE,		--Identificativo del documento cui è relativa la versione da cancellare
247        			NroProgrVerOut		OUT		PLS_INTEGER,				--N.ro progr. della versione da cancellare
248        			FlgTipoDelOut		OUT		VARCHAR2,					--(valori F/L) Tipo di cancellazione richiesta: F = Fisica, L = Logica
249        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
250        															--ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
251        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
252        			ErrContextOut		OUT		VARCHAR2,					--Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
253        			ErrCodeOut			OUT		PLS_INTEGER,				--N.ro errore di uscita
254        			ErrMsgOut			OUT 		VARCHAR2)					--Messaggio d'errore
255        			RETURN PLS_INTEGER;									--Vale 1 se tutto è andato a buon fine, altrimenti 0
256        
257        	/************ Funzione per cancellare logicamente o fisicamente un documento. Se il documento specificato è un primario la cancellazione da fare è dell'intera unità documentaria	**********/
258        	/************ gli estremi del documento da cancellare e del tipo di cancellazione (fisica o logica) sono forniti in un xml conforme a schema DeleteDoc.xsd 					**********/
259        	FUNCTION DelDoc(
260        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
261        															--(obblig.) Codice identificativo del token di connessione
262        			XMLIn				IN		CLOB,						--(obblig.) XML in input al Web service di cancellazione versione (secondo schema DeleteDoc.xsd)
263        			FlgTipoTargetOut		OUT		VARCHAR2,					--(valori U/D) Indica cosa va cancellato: U = Unità documentaria; D = Documento
264        			IdUDDocOut			OUT		INTEGER,					--Identificativo del documento o unità documentaria da cancellare
265        			FlgTipoDelOut		OUT		VARCHAR2,					--(valori F/L) Tipo di cancellazione richiesta: F = Fisica, L = Logica
266        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
267        															--ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
268        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
269        			ErrContextOut		OUT		VARCHAR2,					--Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
270        			ErrCodeOut			OUT		PLS_INTEGER,				--N.ro errore di uscita
271        			ErrMsgOut			OUT 		VARCHAR2)					--Messaggio d'errore
272        			RETURN PLS_INTEGER;									--Vale 1 se tutto è andato a buon fine, altrimenti 0
273        
274        	/************ Funzione per cancellare logicamente o fisicamente un'unità documentaria. 														**********/
275        	/************ gli estremi dell'unità documentaria da cancellare e del tipo di cancellazione (fisica o logica) sono forniti in un xml conforme a schema DeleteUD.xsd  	**********/
276        	FUNCTION DelUD(
277        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
278        															--(obblig.) Codice identificativo del token di connessione
279        			XMLIn				IN		CLOB,						--(obblig.) XML in input al Web service di cancellazione versione (secondo schema DeleteUD.xsd)
280        			IdUDOut			OUT		DMT_UNITA_DOC.ID_UD%TYPE,		--Identificativo dell'unità documentaria da cancellare
281        			FlgTipoDelOut		OUT		VARCHAR2,					--(valori F/L) Tipo di cancellazione richiesta: F = Fisica, L = Logica
282        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
283        															--ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
284        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
285        			ErrContextOut		OUT		VARCHAR2,					--Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
286        			ErrCodeOut			OUT		PLS_INTEGER,				--N.ro errore di uscita
287        			ErrMsgOut			OUT 		VARCHAR2)					--Messaggio d'errore
288        			RETURN PLS_INTEGER;									--Vale 1 se tutto è andato a buon fine, altrimenti 0
289        
290        	/***************** Funzione per creare una nuovo folder/libreria (tramite Web Service)		**************/
291        	/***************** i cui metadati sono forniti in un xml conforme allo schema NewFolder.xsd	**************/
292        	FUNCTION AddFolder(
293        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
294        															--(obblig.) Codice identificativo del token di connessione
295        			XMLIn				IN		CLOB,						--(obblig.) XML in input al Web service di creazione folder (secondo schema NewFolder.xsd)
296        			XmlOut			OUT		NOCOPY CLOB,				-- XML (secondo schema SezioneCache.xsd) con tutti gli attributi del folder da passare all'API di creazione folder
297        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
298        															--ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
299        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
300        			ErrContextOut		OUT		VARCHAR2,					--Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
301        			ErrCodeOut			OUT		PLS_INTEGER,				--N.ro errore di uscita
302        			ErrMsgOut			OUT 		VARCHAR2)					--Messaggio d'errore
303        			RETURN PLS_INTEGER;									--Vale 1 se tutto è andato a buon fine, altrimenti 0
304        
305        	/***************** Funzione per aggiornare i metadati di un folder/libreria (tramite Web Service)		**************/
306        	/***************** i metadati da aggiornare sono forniti in un xml conforme allo schema FolderDaAgg.xsd	**************/
307        	FUNCTION UpdFolder(
308        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
309        															--(obblig.) Codice identificativo del token di connessione
310        			XMLIn				IN		CLOB,						--(obblig.) XML in input al Web service di aggiornamento folder (secondo schema FolderDaAgg.xsd)
311        			IdFolderOut			OUT		DMT_FOLDER.ID_FOLDER%TYPE,		-- Id. del folder da modificare (ricavato da XMLIn)
312        			XmlOut			OUT		NOCOPY CLOB,				-- XML (secondo schema SezioneCache.xsd) con tutti gli attributi del folder da passare all'API di aggiornamento folder
313        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
314        															--ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
315        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
316        			ErrContextOut		OUT		VARCHAR2,					--Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
317        			ErrCodeOut			OUT		PLS_INTEGER,				--N.ro errore di uscita
318        			ErrMsgOut			OUT 		VARCHAR2)					--Messaggio d'errore
319        			RETURN PLS_INTEGER;									--Vale 1 se tutto è andato a buon fine, altrimenti 0
320        
321        
322        	/************ Funzione per cancellare logicamente o fisicamente un folder (anche una libreria) 													**********/
323        	/************ gli estremi del folder da cancellare e del tipo di cancellazione (fisica o logica) sono forniti in un xml conforme a schema DeleteFolder.xsd		  	**********/
324        	FUNCTION DelFolder(
325        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
326        															--(obblig.) Codice identificativo del token di connessione
327        			XMLIn				IN		CLOB,						--(obblig.) XML in input al Web service di cancellazione versione (secondo schema DeleteFolder.xsd)
328        			IdFolderOut			OUT		DMT_FOLDER.ID_FOLDER%TYPE,		--Identificativo del folder da cancellare
329        			FlgTipoDelOut		OUT		VARCHAR2,					--(valori F/L) Tipo di cancellazione richiesta: F = Fisica, L = Logica
330        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
331        															--ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
332        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
333        			ErrContextOut		OUT		VARCHAR2,					--Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
334        			ErrCodeOut			OUT		PLS_INTEGER,				--N.ro errore di uscita
335        			ErrMsgOut			OUT 		VARCHAR2)					--Messaggio d'errore
336        			RETURN PLS_INTEGER;									--Vale 1 se tutto è andato a buon fine, altrimenti 0
337        
338        	/***************** Funzione che a partire da un xml conforme allo schema EstremiXIdentificazioneFolder.xsd ricava il folder su cui lavorare 				******/
339        	/***************** serve per i WS di lock, unlock e GetMetadati. Nel caso del GetMetadati restituisce anche i metadati del folder					 	******/
340        	FUNCTION LockGetDatiFolder(
341        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
342        															--(obblig.) Codice identificativo del token di connessione
343        			FlgTipoWSIn			IN		VARCHAR2,					--(obblig.) Tipo di Web Service che richiama la funzione. Valori ammessi:
344        															-- L	= Lock
345        															-- U	= Unlock
346        															-- G	= Check-out
347        			XMLIn				IN		CLOB,						--(obblig.) XML con tracciato conforme a schema EstremiXIdentificazioneFolder.xsd
348        			IdFolderOut			OUT		DMT_FOLDER.ID_FOLDER%TYPE,		-- Id. del folder ricavato dall'XML in input
349        			XMLOut			OUT		NOCOPY CLOB,				-- XML di output conforme allo schema Output_DatiFolder.xsd.
350        															-- E' valorizzato solo se FlgTipoWSIn=G e in caso di esito positivo
351        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
352        															--ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
353        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
354        			ErrContextOut		OUT		VARCHAR2,					--Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
355        			ErrCodeOut			OUT		PLS_INTEGER,				--N.ro errore di uscita
356        			ErrMsgOut			OUT 		VARCHAR2)					--Messaggio d'errore
357        			RETURN PLS_INTEGER;									--Vale 1 se tutto è andato a buon fine, altrimenti 0
358        
359        
360        	/***************** Funzione per esguire una ricerca sui tipi folder tramite Web Service		**************/
361        	/***************** L'inut deve essere conforme allo schema TrovaTipiFolder.xsd	mentre 		**************/
362        	/***************** l'output è conforme allo schema Output_TrovaTipiFolder.xsd				**************/
363        	FUNCTION TrovaTipiFolder(CodIdConnectionTokenIn		IN	DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,	-- (obblig). Codice identificativo del token di connessione
364        							XMLIn						IN	CLOB,						-- XML contenente i dati del tipo di folder (conforme allo schema TrovaTipiFolder.xsd)
365        							XmlOut						OUT	NOCOPY CLOB,				-- XML con dati di output specifici del WS, restituito solo in caso di successo, conforme a schema Output_TrovaTipiFolder.xsd
366        							FlgRollBckFullIn			IN 	PLS_INTEGER DEFAULT NULL,	--(valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
367        																						--ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
368        							FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
369        							ErrContextOut		OUT		VARCHAR2,					--Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
370        							ErrCodeOut			OUT		PLS_INTEGER,				--N.ro errore di uscita
371        							ErrMsgOut			OUT 		VARCHAR2)				--Messaggio d'errore
372        							RETURN PLS_INTEGER;
373        
374        
375        	/***************** Funzione per esguire una ricerca sui tipi di documento tramite Web Service		**************/
376        	/***************** L'inut deve essere conforme allo schema TrovaTipiDocumenti.xsd	mentre 			**************/
377        	/***************** l'output è conforme allo schema Output_TrovaTipiDocumenti.xsd					**************/
378        
379        	FUNCTION TrovaTipiDocumento(CodIdConnectionTokenIn		IN	DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,	-- (obblig). Codice identificativo del token di connessione
380        							XMLIn						IN	CLOB,						-- XML contenente i dati del tipo di folder (conforme allo schema TrovaTipiDocumenti.xsd)
381        							XmlOut						OUT	NOCOPY CLOB,				-- XML con dati di output specifici del WS, restituito solo in caso di successo, conforme allo schema Output_TrovaTipiDocumenti.xsd
382        							FlgRollBckFullIn			IN 	PLS_INTEGER DEFAULT NULL,	--(valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
383        																						--ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
384        							FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
385        							ErrContextOut		OUT		VARCHAR2,					--Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
386        							ErrCodeOut			OUT		PLS_INTEGER,				--N.ro errore di uscita
387        							ErrMsgOut			OUT 		VARCHAR2)				--Messaggio d'errore
388        							RETURN PLS_INTEGER;
389        
390        	/***************** Funzione per creare una nuovo tipo di  documento (tramite Web Service)		**************/
391        	/***************** i cui metadati sono forniti in un xml conforme allo schema NuovoTipoDocumento.xsd	**************/
392        	FUNCTION AddTipoDoc(
393        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
394        															--(obblig.) Codice identificativo del token di connessione
395        			XMLIn				IN		CLOB,						--(obblig.) XML in input al Web service di creazione tipo documento(secondo schema uovoTipoDocumento.xsd)
396        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
397        															--ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
398        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
399        			IdTipoDocOut		 OUT DMT_DOC_TYPES.ID_DOC_TYPE%TYPE,
400        			ErrContextOut		OUT		VARCHAR2,					--Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
401        			ErrCodeOut			OUT		PLS_INTEGER,				--N.ro errore di uscita
402        			ErrMsgOut			OUT 		VARCHAR2)					--Messaggio d'errore
403        			RETURN PLS_INTEGER;									--Vale 1 se tutto è andato a buon fine, altrimenti 0
404        
405        	/***************** Funzione per modificare una nuovo tipo di  documento (tramite Web Service)		**************/
406        	/***************** i cui metadati sono forniti in un xml conforme allo schema ModificaTipoDocumento.xsd	**************/
407        	FUNCTION UpdTipoDoc(
408        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
409        															--(obblig.) Codice identificativo del token di connessione
410        			XMLIn				IN		CLOB,						--(obblig.) XML in input al Web service di creazione tipo documento(secondo schema uovoTipoDocumento.xsd)
411        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
412        															--ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
413        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
414        			ErrContextOut		OUT		VARCHAR2,					--Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
415        			ErrCodeOut			OUT		PLS_INTEGER,				--N.ro errore di uscita
416        			ErrMsgOut			OUT 		VARCHAR2)					--Messaggio d'errore
417        			RETURN PLS_INTEGER;								--Vale 1 se tutto è andato a buon fine, altrimenti 0
418        
419        
420        	/************ Funzione per cancellare logicamente o fisicamente un tipo documento 													**********/
421        	/************ gli estremi del tipo doc da cancellare e del tipo di cancellazione (fisica o logica) sono forniti in un xml conforme a schema DeleteTipoDocumento.xsd		  	**********/
422        	FUNCTION DelTipoDoc(
423        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
424        															--(obblig.) Codice identificativo del token di connessione
425        			XMLIn				IN		CLOB,						--(obblig.) XML in input al Web service di cancellazione versione (secondo schema DeleteTipoDocumento.xsd)
426        			IdTipoDocOut		OUT DMT_DOC_TYPES.ID_DOC_TYPE%TYPE,		--Identificativo del tipodocumento da cancellare
427        			FlgTipoDelOut		OUT		VARCHAR2,					--(valori F/L) Tipo di cancellazione richiesta: F = Fisica, L = Logica
428        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
429        															--ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
430        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
431        			ErrContextOut		OUT		VARCHAR2,					--Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
432        			ErrCodeOut			OUT		PLS_INTEGER,				--N.ro errore di uscita
433        			ErrMsgOut			OUT 		VARCHAR2)					--Messaggio d'errore
434        			RETURN PLS_INTEGER;									--Vale 1 se tutto è andato a buon fine, altrimenti 0
435        
436        
437        
438        
439        	/***************** Funzione per creare una nuovo tipo di  folder/libreria (tramite Web Service)		**************/
440        	/***************** i cui metadati sono forniti in un xml conforme allo schema NuovoTipoFolder.xsd	**************/
441        	FUNCTION AddTipoFolder(
442        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
443        															--(obblig.) Codice identificativo del token di connessione
444        			XMLIn				IN		CLOB,						--(obblig.) XML in input al Web service di creazione folder (secondo schema NuovoTipoFolder.xsd)
445        				FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
446        															--ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
447        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
448        			IdTipoFolderOut		 OUT DMT_FOLDER_TYPES.ID_FOLDER_TYPE%TYPE,
449        				ErrContextOut		OUT		VARCHAR2,					--Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
450        			ErrCodeOut			OUT		PLS_INTEGER,				--N.ro errore di uscita
451        			ErrMsgOut			OUT 		VARCHAR2)					--Messaggio d'errore
452        			RETURN PLS_INTEGER;									--Vale 1 se tutto è andato a buon fine, altrimenti 0
453        
454        	/***************** Funzione per modificare un tipo di  folder (tramite Web Service)		**************/
455        	/***************** i cui metadati sono forniti in un xml conforme allo schema ModificaTipoFolder.xsd	**************/
456        	FUNCTION UpdTipoFolder(
457        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
458        															--(obblig.) Codice identificativo del token di connessione
459        			XMLIn				IN		CLOB,						--(obblig.) XML in input al Web service di creazione folder (secondo schema ModificaTipoFolder.xsd)
460        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
461        															--ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
462        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
463        			ErrContextOut		OUT		VARCHAR2,					--Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
464        			ErrCodeOut			OUT		PLS_INTEGER,				--N.ro errore di uscita
465        			ErrMsgOut			OUT 		VARCHAR2)					--Messaggio d'errore
466        			RETURN PLS_INTEGER;									--Vale 1 se tutto è andato a buon fine, altrimenti 0
467        
468        
469        	/************ Funzione per cancellare logicamente o fisicamente un tipo folder 													**********/
470        	/************ gli estremi del tipo folder da cancellare e del tipo di cancellazione (fisica o logica) sono forniti in un xml conforme a schema DeleteTipoFolder.xsd		  	**********/
471        	FUNCTION DelTipoFolder(
472        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
473        															--(obblig.) Codice identificativo del token di connessione
474        			XMLIn				IN		CLOB,						--(obblig.) XML in input al Web service di cancellazione versione (secondo schema DeleteTipoFolder.xsd)
475        			IdTipoFolderOut		 OUT DMT_FOLDER_TYPES.ID_FOLDER_TYPE%TYPE,	--Identificativo del tipo folder da cancellare
476        			FlgTipoDelOut		OUT		VARCHAR2,					--(valori F/L) Tipo di cancellazione richiesta: F = Fisica, L = Logica
477        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
478        															--ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
479        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
480        			ErrContextOut		OUT		VARCHAR2,					--Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
481        			ErrCodeOut			OUT		PLS_INTEGER,				--N.ro errore di uscita
482        			ErrMsgOut			OUT 		VARCHAR2)					--Messaggio d'errore
483        			RETURN PLS_INTEGER;									--Vale 1 se tutto è andato a buon fine, altrimenti 0
484        
485        
486        	/***************** Funzione per creare o modificare un attributo custom (tramite Web Service)												**************/
487        	/***************** i cui metadati sono forniti in un xml conforme allo schema NewAttrCustom.xsd	nel caso di creazione, ModifyAttrCustom.xsd nel caso di modifica	**************/
488        	function AddUpdAttrCustom(
489        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
490        															--(obblig.) Codice identificativo del token di connessione
491        			FlgOperazioneIn		IN		VARCHAR2,					-- (obblig). Indica se si vuole creare (ADD) o modificare (MOD) un attributo custom
492        			XMLIn				IN		CLOB,						--(obblig.) XML in input al Web service di creazione o modifica attributo custom (secondo schema NewAttrCustom.xsd o ModifyAttrCustom.xsd)
493        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
494        															--ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
495        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
496        			ErrContextOut		OUT		VARCHAR2,					--Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
497        			ErrCodeOut			OUT		PLS_INTEGER,				--N.ro errore di uscita
498        			ErrMsgOut			OUT 		VARCHAR2)					--Messaggio d'errore
499        			RETURN PLS_INTEGER;									--Vale 1 se tutto è andato a buon fine, altrimenti 0
500        
501        
502        	/************ Funzione per cancellare logicamente o fisicamente un attributo custom																**********/
503        	/************ gli estremi dell'attributo da cancellare e del tipo di cancellazione (fisica o logica) sono forniti in un xml conforme a schema DeleteAttrCustom.xsd		**********/
504        	FUNCTION DelAttrCustom(
505        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
506        															--(obblig.) Codice identificativo del token di connessione
507        			XMLIn				IN		CLOB,						--(obblig.) XML in input al Web service di cancellazione versione (secondo schema DeleteAttrCustom.xsd)
508        			AttrNameOut			OUT		DMT_ATTRIBUTES_DEF.ATTR_NAME%type,	-- Nome dell'attributo da cancellare
509        			FlgTipoDelOut		OUT		VARCHAR2,					--(valori F/L) Tipo di cancellazione richiesta: F = Fisica, L = Logica
510        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
511        															--ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
512        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
513        			ErrContextOut		OUT		VARCHAR2,					--Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
514        			ErrCodeOut			OUT		PLS_INTEGER,				--N.ro errore di uscita
515        			ErrMsgOut			OUT 		VARCHAR2)					--Messaggio d'errore
516        			RETURN PLS_INTEGER;									--Vale 1 se tutto è andato a buon fine, altrimenti 0
517        
518        	/***************** Funzione per creare o modificare un'applicazione esterna o sua specifica istanza (tramite Web Service)	**************/
519        	/***************** i cui metadati sono forniti in un xml conforme allo schema IstanzaApplicazioneEsterna.xsd			**************/
520        	function AddUpdApplicazioneEsterna(
521        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
522        															--(obblig.) Codice identificativo del token di connessione
523        			XMLIn				IN		CLOB,						--(obblig.) XML in input al Web service di creazione o modifica applicazione esterna /sua istanza(secondo schema IstanzaApplicazioneEsterna.xsd)
524        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
525        															--ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
526        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
527        			ErrContextOut		OUT		VARCHAR2,					--Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
528        			ErrCodeOut			OUT		PLS_INTEGER,				--N.ro errore di uscita
529        			ErrMsgOut			OUT 		VARCHAR2)					--Messaggio d'errore
530        			RETURN PLS_INTEGER;									--Vale 1 se tutto è andato a buon fine, altrimenti 0
531        
532        	/************ Funzione per cancellare logicamente o fisicamente un'applicazione esterna o sua specifica istanza (tramite Web Service)													**********/
533        	/************ gli estremi dell'applicazione esterna o sua specifica istanza da cancellare e del tipo di cancellazione (fisica o logica) sono forniti in un xml conforme a schema DeleteIstanzaApplEsterna.xsd	**********/
534        	function DelApplicazioneEsterna(
535        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
536        															--(obblig.) Codice identificativo del token di connessione
537        			XMLIn				IN		CLOB,						--(obblig.) XML in input al Web service di cancellazione versione (secondo schema DeleteIstanzaApplEsterna.xsd)
538        			FlgTipoDelOut		OUT		VARCHAR2,					--(valori F/L) Tipo di cancellazione richiesta: F = Fisica, L = Logica
539        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
540        															--ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
541        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
542        			ErrContextOut		OUT		VARCHAR2,					--Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
543        			ErrCodeOut			OUT		PLS_INTEGER,				--N.ro errore di uscita
544        			ErrMsgOut			OUT 		VARCHAR2)					--Messaggio d'errore
545        			RETURN PLS_INTEGER;									--Vale 1 se tutto è andato a buon fine, altrimenti 0
546        
547        	/***************** Funzione per estrarre i metadati di un'applicazione esterna o sua specifica istanza (tramite Web Service)					************/
548        	/************ gli estremi dell'applicazione esterna o sua specifica istanza sono forniti in un xml conforme allo schema EstremiIstanzaApplEsterna.xsd	************/
549        	FUNCTION GetDatiApplicazioneEsterna(
550        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
551        															--(obblig.) Codice identificativo del token di connessione
552        			XMLIn				IN		CLOB,						--(obblig.) XML in input al Web service di estrazione metadati di un'applicazione esterna/sua istanza (secondo schema EstremiIstanzaApplEsterna.xsd)
553        			XmlOut			OUT		NOCOPY CLOB,				-- XML con dati di output specifici del WS, restituito solo in caso di successo, conforme a schema Output_IstanzaApplEsterna.xsd
554        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
555        															--ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
556        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
557        			ErrContextOut		OUT		VARCHAR2,					--Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
558        			ErrCodeOut			OUT		PLS_INTEGER,				--N.ro errore di uscita
559        			ErrMsgOut			OUT 		VARCHAR2)					--Messaggio d'errore
560        			RETURN PLS_INTEGER;									--Vale 1 se tutto è andato a buon fine, altrimenti 0
561        
562        	/***************** Funzione per esguire una ricerca sulle applicazioni esterne e loro istanze tramite Web Service		**************/
563        	/***************** L'inut deve essere conforme allo schema TrovaIstanzeApplEsterne.xsd mentre 					**************/
564        	/***************** l'output è conforme allo schema Output_TrovaIstanzeApplEsterne.xsd						**************/
565        	FUNCTION TrovaApplicazioneEsterne(
566        			CodIdConnectionTokenIn	IN	DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
567        															-- (obblig). Codice identificativo del token di connessione
568        			XMLIn				IN	CLOB,							-- XML di input del WS (conforme allo schema TrovaIstanzeApplEsterne.xsd) contenente i filtri di ricerca e la modalità di estrazione
569        			XmlOut			OUT	NOCOPY CLOB,					-- XML con dati di output specifici del WS, restituito solo in caso di successo, conforme a schema Output_TrovaIstanzeApplEsterne.xsd
570        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
571        															--ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
572        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
573        			ErrContextOut		OUT		VARCHAR2,					--Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
574        			ErrCodeOut			OUT		PLS_INTEGER,				--N.ro errore di uscita
575        			ErrMsgOut			OUT 		VARCHAR2)					--Messaggio d'errore
576        			RETURN PLS_INTEGER;									--Vale 1 se tutto è andato a buon fine, altrimenti 0
577        
578        
579        
580        	/***************** Funzione per settare i privilegi su un oggetto tramite Web Service		**************/
581        	/***************** L'input deve essere conforme allo schema IUPrivilegi.xsd  				**************/
582        
583        	FUNCTION AddUpdPrivilegi(
584        			CodIdConnectionTokenIn	IN	DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
585        															-- (obblig). Codice identificativo del token di connessione
586        			XMLIn				IN	CLOB,							-- XML di input del WS (conforme allo schema IUPrivilegi.xsd)
587        			FlgRollBckFullIn	IN 		PLS_INTEGER DEFAULT NULL,	--(valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
588        																	--ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
589        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,	--(valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
590        			ErrContextOut		OUT		VARCHAR2,					--Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
591        			ErrCodeOut			OUT		PLS_INTEGER,				--N.ro errore di uscita
592        			ErrMsgOut			OUT 		VARCHAR2)				--Messaggio d'errore
593        			RETURN PLS_INTEGER;									--Vale 1 se tutto è andato a buon fine, altrimenti 0
594        
595        	/***************** Funzione per revocare i privilegi su un oggetto tramite Web Service		**************/
596        	/***************** L'input deve essere conforme allo schema RPrivilegi.xsd mentre 			**************/
597        	FUNCTION RevokePrivilegi(
598        			CodIdConnectionTokenIn	IN	DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
599        																	-- (obblig). Codice identificativo del token di connessione
600        			XMLIn				IN	CLOB,							-- XML di input del WS (conforme allo schema RPrivilegi.xsd)
601        			FlgRollBckFullIn	IN 		PLS_INTEGER DEFAULT NULL,	--(valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
602        																	--ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
603        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,	--(valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
604        			ErrContextOut		OUT		VARCHAR2,					--Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
605        			ErrCodeOut			OUT		PLS_INTEGER,				--N.ro errore di uscita
606        			ErrMsgOut			OUT 		VARCHAR2)				--Messaggio d'errore
607        			RETURN PLS_INTEGER ;
608        
609        	/***************** Funzione per creare un nuovo utente								**************/
610        	/***************** L'input deve essere conforme allo schema NuovoUser.xsd			**************/
611        	FUNCTION AddUser(
612        			CodIdConnectionTokenIn	IN	DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
613        															-- (obblig). Codice identificativo del token di connessione
614        			XMLIn				IN	CLOB,							-- XML di input del WS (conforme allo schema IUPrivilegi.xsd)
615        			FlgRollBckFullIn	IN 		PLS_INTEGER DEFAULT NULL,	--(valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
616        																	--ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
617        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,	--(valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
618        			ErrContextOut		OUT		VARCHAR2,					--Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
619        			ErrCodeOut			OUT		PLS_INTEGER,				--N.ro errore di uscita
620        			ErrMsgOut			OUT 		VARCHAR2)				--Messaggio d'errore
621        			RETURN PLS_INTEGER;									--Vale 1 se tutto è andato a buon fine, altrimenti 0
622        
623        	/***************** Funzione per modificare un utente								**************/
624        	/***************** L'input deve essere conforme allo schema ModificaUser.xsd			**************/
625        	FUNCTION ModUser(
626        			CodIdConnectionTokenIn	IN	DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
627        															-- (obblig). Codice identificativo del token di connessione
628        			XMLIn				IN	CLOB,							-- XML di input del WS (conforme allo schema IUPrivilegi.xsd)
629        			FlgRollBckFullIn	IN 		PLS_INTEGER DEFAULT NULL,	--(valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
630        																	--ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
631        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,	--(valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
632        			ErrContextOut		OUT		VARCHAR2,					--Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
633        			ErrCodeOut			OUT		PLS_INTEGER,				--N.ro errore di uscita
634        			ErrMsgOut			OUT 		VARCHAR2)				--Messaggio d'errore
635        			RETURN PLS_INTEGER;									--Vale 1 se tutto è andato a buon fine, altrimenti 0
636        
637        	/***************** Funzione per cancellare un utente								**************/
638        	/***************** L'input deve essere conforme allo schema EliminaUser.xsd			**************/
639        	FUNCTION DelUser(
640        			CodIdConnectionTokenIn	IN	DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
641        															-- (obblig). Codice identificativo del token di connessione
642        			XMLIn				IN	CLOB,							-- XML di input del WS (conforme allo schema IUPrivilegi.xsd)
643        			FlgRollBckFullIn	IN 		PLS_INTEGER DEFAULT NULL,	--(valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
644        																	--ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
645        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,	--(valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
646        			ErrContextOut		OUT		VARCHAR2,					--Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
647        			ErrCodeOut			OUT		PLS_INTEGER,				--N.ro errore di uscita
648        			ErrMsgOut			OUT 		VARCHAR2)				--Messaggio d'errore
649        			RETURN PLS_INTEGER;									--Vale 1 se tutto è andato a buon fine, altrimenti 0
650        
651        	/************* Funzione attraverso cui registrarsi come utente della community di AURIGA **************/
652        	function RegistrazioneUtenteCommunity(
653        			XMLIn				IN		CLOB,						-- XML di input del WS (conforme allo schema RegistrazioneNellaCommunity.xsd.xsd) contenente gli estremi dell'utente che si sta registrando
654        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
655        															--ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
656        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
657        			ErrContextOut		OUT		VARCHAR2,					--Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
658        			ErrCodeOut			OUT		PLS_INTEGER,				--N.ro errore di uscita
659        			ErrMsgOut			OUT 		VARCHAR2)					--Messaggio d'errore
660        			RETURN PLS_INTEGER;									--Vale 1 se tutto è andato a buon fine, altrimenti 0
661        
662        	/************* Funzione utilizzata dal WS che serve ad avviare un nuovo thread di discussione in un forum **************/
663        	function NewForumThread(
664        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
665        															--(obblig.) Codice identificativo del token di connessione
666        			XMLIn				IN		CLOB,						-- XML di input del WS (conforme allo schema NewForumThread.xsd.xsd) contenente i dati di avvio del thread
667        			AttrFolderXmlOut		OUT		NOCOPY CLOB,				-- XML (conforme a schema SezioneCache.xsd) da passare in input all’API di creazione folder che viene invocata per prima all'interno del WS per creare la cartella del thread
668        			AttrDocPrimarioXMLOut	OUT		NOCOPY CLOB,				-- XML (conforme a schema SezioneCache.xsd) da passare in input all’API di creazione documento che viene invocata per seconda all'interno del WS per creare l’unità documentaria che conterrà i dati di avvio del thread
669        			DocAttachXMLOut		OUT		NOCOPY CLOB,				-- Lista con i dati per caricare (con step-version) nella repository i file associati all'unità documentaria di avvio thread che sono specificati come attach del messaggio SOAP(XML conforme a schema LISTA_STD.xsd)
670        															-- Per ogni attach vi è un tag Riga che contiene le seguenti colonne:
671        															-- 1: Indica il tipo di operazione da fare in corrispondenza dell'attach: AD = Add doc + creazione versione (per i file secondari); AV = Solo creazione versione (per il file primario)
672        															-- 2: N.ro dell'attach del messaggio SOAP che corrisponde al file da caricare nella repository
673        															-- 3: Nome del file da caricare (quello con cui mostrarlo e dalla cui estensione si ricava il formato)
674        															-- 4: (valori 1/0) Se 1 indica che è richiesta la verifica della firma digitale del file, se 0 o NULL no
675        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
676        															--ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
677        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
678        			ErrContextOut		OUT		VARCHAR2,					--Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
679        			ErrCodeOut			OUT		PLS_INTEGER,				--N.ro errore di uscita
680        			ErrMsgOut			OUT 		VARCHAR2)					--Messaggio d'errore
681        			RETURN PLS_INTEGER;									--Vale 1 se tutto è andato a buon fine, altrimenti 0
682        
683        
684        	/************* Funzione per ottenere l'XML di output (primo attach del messaggio SOAP) del WS che serve ad avviare un nuovo thread di discussione in un forum *********/
685        	/************* (a partire dell'id. dell'unità documentaria di avvio del thread)				 									  *********/
686        	function ComponiOutput_ForumThread(
687        			IdUDAvvioThreadIn		IN		DMT_UNITA_DOC.ID_UD%type,		-- (obblig.) Id. dell'unità documentaria di avvio del thread
688        			XMLOut			OUT 		NOCOPY CLOB,				-- XML che viene restituito come primo attach del WS in caso di successo (conforme allo schema Output_ForumThread.xsd)
689        			ErrContextOut		OUT		VARCHAR2,					-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
690        			ErrCodeOut			OUT		PLS_INTEGER,				-- N.ro errore di uscita
691        			ErrMsgOut			OUT 		VARCHAR2)					-- Messaggio d'errore
692        			RETURN PLS_INTEGER;									-- Vale 1 se tutto è andato a buon fine, altrimenti 0
693        
694        	/***** funzione utilizzata dai web services SendRepositoryDocsByFax o SendByFax per leggere l'XML in input *********/
695        	function SendByFax(
696        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
697        															-- (obblig. solo nel caso del WS di SendRepositoryDocsByFax) Codice identificativo del token di connessione
698        			XMLIn				IN		CLOB,						-- XML di input del WS (conforme allo schema SendRepositoryDocsByFax.xsd o SendByFax.xsd)
699        			NroFaxDestinatarioOut	OUT		VARCHAR2,					-- N.ro fax destinatario
700        			FaxServerAddressOut	OUT		VARCHAR2,					-- IP o nome del fax-server mittente
701        			UsernameFaxServerOut	OUT		VARCHAR2,					-- Username con cui accedere al fax-server mittente
702        			PasswordFaxServerOut	OUT		VARCHAR2,					-- Password con cui accedere al fax-server mittente
703        			DocToExtractOut		OUT		NOCOPY CLOB,				-- Lista (secondo schema LISTA_STD.xsd) con gli id. dei documenti di cui inviare l'ultima versione (valorizzata solo nel caso del WS di SendRepositoryDocsByFax)
704        															-- Ogni tag Riga contiene le colonne:
705        															-- 1: ID_DOC del documento
706        															-- 2: Estensione che identifica il formato del file (doc, pdf, tiff, ecc) di ultima versione
707        			ErrContextOut		OUT		VARCHAR2,					-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
708        			ErrCodeOut			OUT		PLS_INTEGER,				-- N.ro errore di uscita
709        			ErrMsgOut			OUT 		VARCHAR2)					-- Messaggio d'errore
710        			RETURN PLS_INTEGER;									-- Vale 1 se tutto è andato a buon fine, altrimenti 0
711        
712        
713        	/***************** Funzione per esguire tramite Web Service una ricerca sulle richieste di trasmissione via fax già sottomesse  	**************/
714        	/***************** L'input deve essere conforme allo schema TrovaRichTrasmissioneFax.xsd	 							**************/
715        	/***************** l'output è conforme allo schema Output_TrovaRichTrasmissioneFax.xsd								**************/
716        	function TrovaRichTrasmissioneFax(
717        			CodIdConnectionTokenIn	IN	DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
718        															-- (obblig). Codice identificativo del token di connessione
719        			XMLIn				IN	CLOB,							-- XML contenente i filtri di ricerca(conforme allo schema TrovaRichTrasmissioneFax.xsd)
720        			XmlOut			OUT	NOCOPY CLOB,					-- XML con dati di output specifici del WS, restituito solo in caso di successo, conforme a schema Output_TrovaRichTrasmissioneFax.xsd
721        			FlgRollBckFullIn		IN 	PLS_INTEGER DEFAULT NULL,			--(valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
722        															-- ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
723        			FlgAutoCommitIn		IN 	PLS_INTEGER DEFAULT NULL,			--(valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
724        			ErrContextOut		OUT	VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
725        			ErrCodeOut			OUT	PLS_INTEGER,					-- N.ro errore di uscita
726        			ErrMsgOut			OUT 	VARCHAR2)						-- Messaggio d'errore
727        			RETURN PLS_INTEGER;									-- Vale 1 se tutto è andato a buon fine, altrimenti 0
728        
729        	/***************** Funzione per per il Web Service di ricerca sulle repository documentale			**************/
730        	/***************** L'input deve essere conforme allo schema TrovaDocFolder.xsd	 				**************/
731        	/***************** l'output sono gli input da passare all'API di 	ricerca sulle repository documentale	**************/
732        	function TrovaDocFolder(
733        			CodIdConnectionTokenIn	IN	DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
734        															-- (obblig). Codice identificativo del token di connessione
735        			XMLIn				IN	CLOB,							-- XML in input al WS (conforme allo schema TrovaDocFolder.xsd)
736        			FlgUDFolderOut		OUT	VARCHAR2,						-- (valori F/U/NULL): indica se la ricerca va ristretta ai soli documenti (U) o alle sole cartelle (F)
737        			CercaInFolderOut		OUT	DMT_FOLDER.ID_FOLDER%type,			-- id. del folder in cui effettuare la ricerca. Se non specificato si cerca in tutta la repository
738        															--	Può avere i valori "particolari":
739        															--		-9:		si intende la ricerca nelle NEWS dell'utente di lavoro
740        															--		-99:		si intende la ricerca nell'area WORK dell'utente di lavoro
741        															--		-999: 	si intende la ricerca nei preferiiti dell'utente di lavoro (solo i preferiti veri e propri, non ciò che ricade in cartelle che sono nei preferiti)
742        															--		-9999:	si intende la ricerca negli inviati dell'utente di lavoro (solo gli inviati veri e propri, non ciò che ricade in cartelle che sono negli inviati)
743        															--		-99999:	si intende la ricerca negli eliminati dell'utente di lavoro (solo gli eliminati veri e propri, non ciò che ricade in cartelle che sono negli eliminati)
744        			FlgCercaInSubFolderOut	OUT	PLS_INTEGER,					-- (valori 1/0/NULL): 1 indica che la ricerca va estesa ai sub-folder del folder CercaInFolderOut
745        			FiltroFullTextOut		OUT	VARCHAR2,						-- Parola o lista di parole da cercare con il motore di ricerca esterno (Lucene)
746        			FlgTutteLeParoleOut	OUT	PLS_INTEGER,					-- (valori 1/0/NULL) Se 1 tutte le parole del filtro full-text devono essere matchate, se 0 o NULL almeno 1
747        			AttributiXRicercaFTOut	OUT	NOCOPY CLOB,					-- XML contenente la lista degli attributi indicizzati dal motore di ricerca su quali deve ricercare il filtro full-text (conforme a schema LISTA_STD.xsd)
748        															-- Ogni attributo corrisponde ad un tag riga con una sola colonna recante il nome dell'attributo stesso
749        			CriteriAvanzatiOut	OUT	NOCOPY CLOB,					-- XML contenente nomi e valori dei filtri avanzati su unità documentarie e folder (conforme allo schema SezioneCache.xsd).
750        			CriteriPersonalizzatiOut OUT 	NOCOPY CLOB,					-- Criteri di ricerca sugli attributi custom di documenti e folder (XML conforme a schema LISTA_STD.xsd). Se più di uno vengono applicati in AND.
751        			ColOrderByOut		OUT	VARCHAR2,						-- Indica il/i numeri della/e colonna dell'XML di output per cui ordinare i record nell'XML stesso
752        			FlgDescOrderByOut  	OUT	VARCHAR2,						-- E' una stringa di 1 o 0/NULL, tanti quanti le colonne di ordinamento, separati da ",": 1 significa che l'ordinamento per la data colonna deve essere discendente anzichè ascendente (es: 1; 1,0; 1, )
753        			FlgSenzaPaginazioneOut	OUT	PLS_INTEGER,            			-- (valori 1/0/NULL) Se 1 l'estrazione non è paginata, altrimenti sì
754        			NroPaginaOut      	OUT	PLS_INTEGER,                  		-- E' il numero della pagina da estrarre; se NULL e l'estrazione è paginata viene estratta la prima pagina
755           			BachSizeOut			OUT	PLS_INTEGER,					-- Indica la dimensione (n.ro di record) della pagina se l'estrazione è paginata e se non è valorizzato la dimensione della pagina è quella settata per l'utente di lavoro o è pari al valore del parametro STD_PAGE_NUM_ROW del dominio di lavoro
756        			FlgBatchSearchOut		OUT	PLS_INTEGER,					-- (valori 1/0/NULL) Se 1 significa che la ricerca è utilizzata da un processo batch, altrimenti da un processo online.
757        															-- Serve affinchè vengano applicati i limiti di overflow per processo batch o online.
758        			ColToReturnOut		OUT	VARCHAR2,						-- Stringa con i n.ri delle colonne dell'XML di output che si vuole siano presenti nell'output stesso.
759        			FlgRollBckFullIn		IN 	PLS_INTEGER DEFAULT NULL,			--(valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
760        															--ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
761        			FlgAutoCommitIn		IN 	PLS_INTEGER DEFAULT NULL,			--(valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
762        			ErrContextOut		OUT	VARCHAR2,						--Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
763        			ErrCodeOut			OUT	PLS_INTEGER,					--N.ro errore di uscita
764        			ErrMsgOut			OUT 	VARCHAR2)						--Messaggio d'errore
765        			RETURN PLS_INTEGER;									-- Vale 1 se tutto è andato a buon fine, altrimenti 0
766        
767        	/***************** Funzione che a partire da un xml conforme allo schema EstremiXIdentificazioneDoc.xsd ricava le versioni di un documento visibili all'utente connesso		******/
768        	FUNCTION GetListaVersioniDoc(
769        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
770        															--(obblig.) Codice identificativo del token di connessione
771        			XMLIn				IN		CLOB,						--(obblig.) XML con tracciato conforme a schema EstremiXIdentificazioneDoc.xsd
772        			IdDocOut			OUT		DMT_DOCUMENTS.ID_DOC%TYPE,		-- Id. del documento ricavato dall'XML in input
773        			XMLOut			OUT		NOCOPY CLOB,				-- XML di output conforme allo schema ListaVersioniDoc.xsd.
774        															-- E' valorizzato solo in caso di esito positivo
775        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
776        															--ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
777        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
778        			ErrContextOut		OUT		VARCHAR2,					--Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
779        			ErrCodeOut			OUT		PLS_INTEGER,				--N.ro errore di uscita
780        			ErrMsgOut			OUT 		VARCHAR2)					--Messaggio d'errore
781        			RETURN PLS_INTEGER;									--Vale 1 se tutto è andato a buon fine, altrimenti 0
782        
783        	/***************** Funzione per esguire una ricerca sugli utenti del sistema tramite Web Service		**************/
784        	/***************** L'inut deve essere conforme allo schema TrovaUtenti.xsd mentre 					**************/
785        	/***************** l'output è conforme allo schema Output_TrovaUtenti.xsd						**************/
786        	FUNCTION TrovaUtenti(
787        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
788        															-- (obblig). Codice identificativo del token di connessione
789        			XMLIn				IN		CLOB,						-- XML di input del WS (conforme allo schema TrovaUtenti.xsd) contenente i filtri di ricerca e la modalità di estrazione
790        			XmlOut			OUT		NOCOPY CLOB,				-- XML con dati di output specifici del WS, restituito solo in caso di successo, conforme a schema Output_TrovaUtenti.xsd
791        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
792        															--ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
793        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
794        			ErrContextOut		OUT		VARCHAR2,					--Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
795        			ErrCodeOut			OUT		PLS_INTEGER,				--N.ro errore di uscita
796        			ErrMsgOut			OUT 		VARCHAR2)					--Messaggio d'errore
797        			RETURN PLS_INTEGER;									--Vale 1 se tutto è andato a buon fine, altrimenti 0
798        
799        
800        	/***************** Funzione per esguire una ricerca sui gruppi (di utenti, UO, scrivanie virtuali, altri gruppi) tramite Web Service	**************/
801        	/***************** L'inut deve essere conforme allo schema TrovaGruppi.xsd mentre 										**************/
802        	/***************** l'output è conforme allo schema Output_TrovaGruppi.xsd											**************/
803        	FUNCTION TrovaGruppi(
804        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
805        															-- (obblig). Codice identificativo del token di connessione
806        			XMLIn				IN		CLOB,						-- XML di input del WS (conforme allo schema TrovaGruppi.xsd) contenente i filtri di ricerca e la modalità di estrazione
807        			XmlOut			OUT		NOCOPY CLOB,				-- XML con dati di output specifici del WS, restituito solo in caso di successo, conforme a schema Output_TrovaGruppi.xsd
808        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
809        															--ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
810        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
811        			ErrContextOut		OUT		VARCHAR2,					--Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
812        			ErrCodeOut			OUT		PLS_INTEGER,				--N.ro errore di uscita
813        			ErrMsgOut			OUT 		VARCHAR2)					--Messaggio d'errore
814        			RETURN PLS_INTEGER;									--Vale 1 se tutto è andato a buon fine, altrimenti 0
815        
816        
817        	/***************** Funzione utilizzata dal WS di notifica unità documentaria o folder per leggere l'XML di input ed estrarne i dati da passare all'API di notifica	**************/
818        	/***************** L'inut deve essere conforme allo schema NotificaDocFolder.xsd  															**************/
819        	FUNCTION NotificaDocFolder(
820        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
821        															-- (obblig). Codice identificativo del token di connessione
822        			XMLIn				IN		CLOB,						-- XML di input del WS (conforme allo schema NotificaDocFolder.xsd) contenente estreemi dell'UD o folder da notificare, destinatari della notifica e altri attributi della notifica
823        			FlgTypeObjToNotifOut	OUT		VARCHAR2,					-- (valori F/U) Tipo di oggetto da notificare/condividere: F = Folder, U = Unità documentaria
824        			IdObjToNotifOut		OUT		INTEGER,					-- Identificativo (ID_FOLDER o ID_UD) del folder o unità documentaria da notificare/condividere
825        			RecipientsXMLOut		OUT		NOCOPY CLOB,				-- Lista dei destinatari (xml conforme a schema LISTA_STD.xsd)
826        															-- Ogni destinatario è un tag "Riga" con le seguenti colonne:
827        															--						1: (obblig.) Indicatore del tipo di destinastario
828        															--							Valori possibili:
829        															-- 							UT 	= Utente
830        															--							SV	= Scrivania virtuale
831        															--							UO	= Unità organizzativa (vale a dire tutte le scrivanie virtuali ad essa afferenti)
832        															--							G	= Gruppo
833        															--							R	= Ruolo amministrativo contestualizzato ovvero i soggetti che hanno un certo ruolo amministrativo (eventualmente rispetto ad una certa UO o un dato livello della struttura organizzativa/tipo di UO o entrambi)
834        															--							R@	= Soggetti interni che hanno un certo ruolo rispetto al documento / folder
835        															--						2: Identificativo del destinatario
836        															--							è un ID_UO di DMT_STRUTTURA_ORG se colonna 1=UO,
837        															--							è un ID_GRUPPO di DMT_GRUPPI se colonna 1 =G
838        															--							è un ID_USER di DMT_USERS se colonna 1 =UT
839        															--							è un ID_SCRIVANIA di DMT_SCRIVANIE_VIRTUALI se colonna 1 =SV
840        															--							è un ID_RUOLO_AMM di DMT_RUOLI_AMM se colonna 1 =R
841        															--							è un COD_NATURA_REL di DMT_REL_SOGG_INT_DOC/DMT_REL_SOGG_INT_FOLDER che indica il codice del ruolo rispetto al documento / folder se colonna 1 = R@. Può avere i valori particolari: #CON_ACCESSO (= tutti coloro che hanno accesso anche in sola visualizzazione) e #CON_ACCESSO_IN_MODIFICA (= tutti coloro che hanno accesso anche in modifica dei metadati e/o file)
842        															--						3: Denominazione/nome del destinatario (se trattasi di UO può essere la denominazione semplice o preceduta da quella di tutte le UO superiori separate da "|"). Se colonna 1 = R@ è la descrizione del ruolo rispetto al documento / folder
843        															--						4: Identificativo della UO cui appartiene la scrivania destinataria
844        															--						5: Nri livello della UO destinataria o a cui appartiene la scrivania destinataria (tutti o alcuni; però se si specifica un livello è obbligatorio indicare tutti i livelli superiori; vanno specificati come appaiono nella GUI, ovvero romani se previsto, 0 o -- se nulli; sono separati dal separatore dei livelli valido per il soggetto produttore/AOO di appartenenza della UO)
845        															--						6: Denominazione della UO cui appartiene la scrivania destinataria (può essere la denominazione semplice o preceduta da quella di tutte le UO superiori separate da "|")
846        															--						7: Codice che identifica nell'applicazione esterna da cui ci si connette l'utente destinatario o quello che occupa la scrivania destinataria
847        															--						8: Denominazione dell'utente che occupa la scrivania destinataria
848        															--						9: (valore 1) Indica che il destinatario, se UO, sono anche tutte le sue sotto-UO
849        															--						10: (valori interi da 1 a n) Livello della struttura organizzativa in cui si espleta il ruolo amministrativo destinatario
850        															--						11: Se colonna 1 =R: Codice del tipo di unità organizzativa in cui si espleta il ruolo amministrativo destinatario (alternativo alla colonna 10)
851        															--						    Se colonna 1 =UT o SV: Username (delle credenziali locali) dell'utente destinatario o che occupa la scrivania destinataria
852        															--						12: Se colonna 1 =R: Descrizione del tipo di unità organizzativa (es: settore, servizio, ecc) in cui si espleta il ruolo amministrativo destinatario (alternativo alla colonna 10)
853        															--						    Se colonna 1 =UT o SV: N.ro di matricola dell'utente destinatario o che occupa la scrivania destinataria
854        															--						13: Identificativo della UO in cui si espleta il ruolo amministrativo destinatario o dalla quale risalire alla/e UO del livello/tipo indicati in cui si espleta il ruolo amministrativo destinatario
855        															--						14: Denominazione/nome della UO in cui si espleta il ruolo amministrativo destinatario o dalla quale risalire alla/e UO del livello/tipo indicati in cui si espleta il ruolo amministrativo destinatario (può essere la denominazione semplice o preceduta da quella di tutte le UO superiori separate da "|")
856        															--						15: Nri livello della UO in cui si espleta il ruolo amministrativo destinatario o dalla quale risalire alla/e UO del livello/tipo indicati in cui si espleta il ruolo amministrativo destinatario (tutti o alcuni; però se si specifica un livello è obbligatorio indicare tutti i livelli superiori; vanno specificati come appaiono nella GUI, ovvero romani se previsto, 0 o -- se nulli; sono separati dal separatore dei livelli valido per il soggetto produttore/AOO di appartenenza della UO)
857        															--						16:(valore 1) Indica che il ruolo amministrativo destinatario si espleta anche nelle sotto-UO della/e UO rintracciate tramite i valori delle 3 colonne precedenti
858        															--						17: Codice del ruolo del destinatario (valori codificati in apposita disctionary entry)
859        															--						18: Ruolo del destinatario (valori in apposita disctionary entry)
860        															--						19: Flag che indica la modalità di accesso da dare al destinatario sull'oggetto inviato (ovvero indica le opzioni di accesso che avrà il destinatario nell'ACL dell'oggetto dopo l'invio, salvo ne avesse già di più ampie)
861        															--						    Valori possibili: FC = Full control; M = Modifica metadati e files/contenuti; MM = Modifica soli metadati; V = Sola visualizzazione; VM = Visualizzazione dei soli metadati (non dei files)
862        			SenderTypeOut		OUT		VARCHAR2,					-- (valori UO/UT/SV) Indica il tipo di soggetto mittente della notifica
863        															-- (gestito solo per unità documentaria) Valori ammessi: UO = Unità organizzativa; UT = Utente; SV = Scrivania
864        			SenderIdOut			OUT		INTEGER,					-- (gestito solo per unità documentaria) Identificativo (ID_UO o ID_USER o ID_SCRIVANIA) del soggetto mittente della notifica
865        			CodMotivoNotifOut		OUT		VARCHAR2,					-- Codice del motivo della notifica (valori codificati in apposita dictionary entry)
866        			MotivoNotifOut		OUT		VARCHAR2,					-- Modivo della notifica (valori da apposita dictionary entry)
867        			MessaggioNotifOut		OUT		VARCHAR2,					-- Messaggio della notifica
868        			LivelloPrioritaOut	OUT		INTEGER,					-- Livello di priorità della notifica
869        			RichConfermaPresaVisOut OUT		PLS_INTEGER,				-- (valori 1/0) Se 1 significa che si richiede di avere una notifica alla prima visione dell'unità doc./folder da parte di un destinatario
870        			FlgEmailNotifPresaVisOut	OUT		PLS_INTEGER,			-- (valori 1/0) Se 1 e se RichConfermaPresaVisOut=1 indica che la notifica di avvenuta presa visione deve essere data anche via email
871        			IndEmailNotifPresaVisOut	OUT		VARCHAR2,				-- Indirizzi email (se più d'uno separati da ; o ,) a cui inviare la mail di notifica di presa visione
872        															-- Se non è valorizzato e RichConfermaPresaVisOut=1 e FlgEmailNotifPresaVisOut=1 allora la notifica email di presa visione viene data all'indirizzo email del mittente della notifica originale
873        			NotNoPresaVisEntroGGOut	OUT		PLS_INTEGER,				-- N.ro di giorni trascorsi i quali dalla decorrenza della notifica senza che il documento/folder notificato sia stato visionato dal destinatario deve esserene dato avvertimento al mittente/a qualcuno
874        			FlgEmailNoPresaVisOut	OUT		PLS_INTEGER,				-- (valori 1/0) Se 1 e se l'input NotNoPresaVisEntroGGOut è valorizzato indica che la notifica di mancata presa visione entro il termine stabilito deve essere data anche via email
875        			IndEmailNoPresaVisOut	OUT		VARCHAR2,					-- Indirizzi email (se più d'uno separati da ; o ,) a cui inviare la mail di notifica di mancata presa visione entro il termine NotNoPresaVisEntroGGOut.
876        															-- Se non è valorizzato e NotNoPresaVisEntroGGOut è valorizzato e FlgEmailNoPresaVisOut=1 allora la notifica email di mancata presa visione viene data all'indirizzo email del mittente della notifica originale
877        			TsDecorrenzaNotifOut	OUT		VARCHAR2,					-- Data e ora future da cui deve decorrere la notifica (se diversa dalla data di notifica; espressa nel formato dato dal parametro di config. FMT_STD_TIMESTAMP)
878        			FlgNotificaEmailNotifOut OUT		PLS_INTEGER,				-- (valori 1/0) Se 1 significa che ci deve essere notifica email ai destinatari (o a degli indirizzi email indicati nell'argomento IndXNotifEmailNotifIn)
879        			IndXNotifEmailNotifOut	OUT		VARCHAR2,					-- Indirizzi email (se più d'uno separati da ; o ,) a cui notificare la notifica
880        			OggEmailOut			OUT		VARCHAR2,					-- (valorizzato se IndXNotifEmailNotifOut è valorizzato) Oggetto dell'email di notifica
881        			BodyEmailOut		OUT		VARCHAR2,					-- (valorizzato se IndXNotifEmailNotifOut è valorizzato) Corpo del messaggio dell'email di notifica
882        			FlgNotificaSMSNotifOut	OUT		PLS_INTEGER,				-- (valori 1/0) Se 1 significa che ci deve essere notifica via SMS ai destinatari (o a n.ri di cellulare indicati nell'argomento NriCellXNotifSMSNotifOut)
883        			NriCellXNotifSMSNotifOut OUT		VARCHAR2,					-- N.ri di cellulare (se più d'uno separati da ; o ,) a cui notificare via SMS
884        			TestoSMSOut			OUT		VARCHAR2,					-- (valorizzato se NriCellXNotifSMSNotifOut è valorizzato) Testo dell'SMS di notifica
885        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
886        															--ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
887        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
888        			ErrContextOut		OUT		VARCHAR2,					--Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
889        			ErrCodeOut			OUT		PLS_INTEGER,				--N.ro errore di uscita
890        			ErrMsgOut			OUT 		VARCHAR2)					--Messaggio d'errore
891        			RETURN PLS_INTEGER;									--Vale 1 se tutto è andato a buon fine, altrimenti 0
892        
893        
894        	/********** funzione utilizzata dai Web Service per aggiungere/togliere un unità documentaria o un folder dai preferiti dell'utente connesso *******/
895        	function AddRemoveFromFavourite(
896        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
897        															--(obblig.) Codice identificativo del token di connessione
898        			OperationTypeIn		IN		VARCHAR2 DEFAULT 'ADD',			--(obblig.) Indica se l'operazione da fare è:
899        															-- ADD = Aggiunta ai preferiti dell'utente
900        															-- REMOVE = Eliminazione dai preferiti dell'utente
901        			FlgTypeObjIn		IN		VARCHAR2,					-- (obblig.) Indica se l'oogetto da aggiungere o togliere dai preferiti è:
902        															-- F = Folder
903        															-- U = Unità documentaria
904        			XMLIn				IN		CLOB,						--(obblig.) XML in input al Web service (secondo schema EstremiXIdentificazioneUD.xsd o EstemiXIdentificazioneFolder.xsd)
905        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
906        															--ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
907        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
908        			ErrContextOut		OUT		VARCHAR2,					--Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
909        			ErrCodeOut			OUT		PLS_INTEGER,				--N.ro errore di uscita
910        			ErrMsgOut			OUT 		VARCHAR2)					--Messaggio d'errore
911        			RETURN PLS_INTEGER;									--Vale 1 se tutto è andato a buon fine, altrimenti 0
912        
913        	/***************** Funzione che a partire da un xml conforme allo schema EstremiXIdentificazioneUd.xsd ricava quali sono le "versioni" dei metadati dell'unità documentaria	******/
914        	FUNCTION GetListaVersioniDatiUD(
915        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
916        															--(obblig.) Codice identificativo del token di connessione
917        			XMLIn				IN		CLOB,						--(obblig.) XML con tracciato conforme a schema EstremiXIdentificazioneUd.xsd
918        			XMLOut			OUT		NOCOPY CLOB,				-- XML di output conforme allo schema ListaVersioniDatiUD.xsd.
919        															-- E' valorizzato solo in caso di esito positivo
920        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
921        															--ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
922        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
923        			ErrContextOut		OUT		VARCHAR2,					--Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
924        			ErrCodeOut			OUT		PLS_INTEGER,				--N.ro errore di uscita
925        			ErrMsgOut			OUT 		VARCHAR2)					--Messaggio d'errore
926        			RETURN PLS_INTEGER;									--Vale 1 se tutto è andato a buon fine, altrimenti 0
927        
928        	/***************** Funzione che a partire da un xml conforme allo schema GetListaNotificheUD.xsd ricava quali sono le notifiche (salvo quelle automatiche) sull'unità documentaria	******/
929        	FUNCTION GetListaNotificheUD(
930        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
931        															--(obblig.) Codice identificativo del token di connessione
932        			XMLIn				IN		CLOB,						--(obblig.) XML con tracciato conforme a schema GetListaNotificheUD.xsd
933        			XMLOut			OUT		NOCOPY CLOB,				-- XML di output conforme allo schema ListaNotificheUD.xsd
934        															-- E' valorizzato solo in caso di esito positivo
935        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
936        															--ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
937        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
938        			ErrContextOut		OUT		VARCHAR2,					--Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
939        			ErrCodeOut			OUT		PLS_INTEGER,				--N.ro errore di uscita
940        			ErrMsgOut			OUT 		VARCHAR2)					--Messaggio d'errore
941        			RETURN PLS_INTEGER;									--Vale 1 se tutto è andato a buon fine, altrimenti 0
942        
943        	/***************** Funzione che a partire da un xml conforme allo schema EstremiXIdentificazioneUd.xsd ricava quali sono i soggetti interni a cui si possono mandare osservazioni/commenti sull'unità documentaria	******/
944        	FUNCTION GetPossibiliDestOsservazSuUD(
945        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
946        															--(obblig.) Codice identificativo del token di connessione
947        			XMLIn				IN		CLOB,						--(obblig.) XML con tracciato conforme a schema EstremiXIdentificazioneUd.xsd
948        			XMLOut			OUT		NOCOPY CLOB,				-- XML di output conforme allo schema PossbiliDestinatariOsservazioniSuUD.xsd
949        															-- E' valorizzato solo in caso di esito positivo
950        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
951        															--ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
952        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
953        			ErrContextOut		OUT		VARCHAR2,					--Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
954        			ErrCodeOut			OUT		PLS_INTEGER,				--N.ro errore di uscita
955        			ErrMsgOut			OUT 		VARCHAR2)					--Messaggio d'errore
956        			RETURN PLS_INTEGER;									--Vale 1 se tutto è andato a buon fine, altrimenti 0
957        
958        
959        	/***************** Funzione che a partire da un xml conforme allo schema ExtractFilesInFolder.xsd sottomette nella tabella BMT_JOBS un job di estrazione file di folder ******/
960        	function ExtractFilesInFolder(
961        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
962        															--(obblig.) Codice identificativo del token di connessione
963        			XMLIn				IN		CLOB,						--(obblig.) XML con tracciato conforme a schema ExtractFilesInFolder.xsd
964        			IdJobOut			OUT		INTEGER,					-- Id. del job creato per evadere la richiesta di estrazione file di un folder
965        			FlgRollBckFullIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se 1 in caso di errore viene fatta la rollback completa (non a savepoint), altrimenti la rollback delle sole modifiche effettuate nella stored
966        															--ATTENZIONE: La rollback, di qualsiasi tipo, non riguarda la scrittura di eventuali log
967        			FlgAutoCommitIn		IN 		PLS_INTEGER DEFAULT NULL,		--(valori 1/0/NULL) Se vale 1, dopo la rollback e qualunque sia l'esito (positivo o meno), la funzione esegue una commit finale
968        			ErrContextOut		OUT		VARCHAR2,					--Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
969        			ErrCodeOut			OUT		PLS_INTEGER,				--N.ro errore di uscita
970        			ErrMsgOut			OUT 		VARCHAR2)					--Messaggio d'errore
971        			RETURN PLS_INTEGER;									--Vale 1 se tutto è andato a buon fine, altrimenti 0
972        
973        
974        	/***************** Funzione per esguire una ricerca su strutture e utenti in organigramma		**************/
975        	/***************** L'inut deve essere conforme allo schema TrovaInOrganigramma.xsd mentre 		**************/
976        	/***************** l'output è conforme allo schema Output_TrovaInOrganigramma.xsd				**************/
977        	FUNCTION TrovaInOrganigramma(
978        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
979        																			-- (obblig). Codice identificativo del token di connessione
980        			XMLIn				IN		CLOB,								-- XML di input del WS (conforme allo schema TrovaInOrganigramma.xsd) contenente i filtri di ricerca e la modalità di estrazione
981        			XmlOut				OUT		NOCOPY CLOB,						-- XML con dati di output specifici del WS, restituito solo in caso di successo, conforme a schema Output_TrovaInOrganigramma.xsd
982        			ErrContextOut		OUT		VARCHAR2,							-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
983        			ErrCodeOut			OUT		PLS_INTEGER,						-- N.ro errore di uscita
984        			ErrMsgOut			OUT 	VARCHAR2)							-- Messaggio d'errore
985        			RETURN PLS_INTEGER;												-- Vale 1 se tutto è andato a buon fine, altrimenti 0
986        
987        	/***************** Funzione per esguire una ricerca di classificazioni in un piano di classificazione (=titolario)		**************/
988        	/***************** L'inut deve essere conforme allo schema TrovaClassifTitolario.xsd mentre 							**************/
989        	/***************** l'output è conforme allo schema Output_TrovaClassifTitolario.xsd										**************/
990        	FUNCTION TrovaClassifTitolario(
991        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
992        																			-- (obblig). Codice identificativo del token di connessione
993        			XMLIn				IN		CLOB,								-- XML di input del WS (conforme allo schema TrovaClassifTitolario.xsd) contenente i filtri di ricerca e la modalità di estrazione
994        			XmlOut				OUT		NOCOPY CLOB,						-- XML con dati di output specifici del WS, restituito solo in caso di successo, conforme a schema Output_TrovaClassifTitolario.xsd
995        			ErrContextOut		OUT		VARCHAR2,							-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
996        			ErrCodeOut			OUT		PLS_INTEGER,						-- N.ro errore di uscita
997        			ErrMsgOut			OUT 	VARCHAR2)							-- Messaggio d'errore
998        			RETURN PLS_INTEGER;												-- Vale 1 se tutto è andato a buon fine, altrimenti 0
999        
1000        	/****************funzione di ricerca agibilità inviata da portale ***************/
1001        	/****************se va a buon fine effettua una protocollazione in uscita *******/
1002        	function RicercaAgibilitaDaPortale(
1003        			XMLRequestIn			IN		CLOB,							-- (obblig.) Tag XML ricercaAgibilitaRequest con i dati della request
1004        			ConnTokenOut			OUT		VARCHAR2,						-- Token di connessione da usare per caricare i file di richiesta e risposta
1005        			IdDominioOut			OUT     INTEGER,						-- Id. del dominio in cui viene evasa la richiesta
1006        			IdUDRichiestaOut		OUT		INTEGER,						-- ID_UD assegnato alla richiesta protocollata
1007        			IdDocRichiestaOut		OUT		INTEGER,						-- ID_DOC del documento primario della richiesta protocollata
1008        			EstremiProRichOut		OUT		VARCHAR2,						-- Estremi di protocollo in entrata assegnato alla richiesta
1009        			ListaAgibilitaOut 		OUT		NOCOPY CLOB,					-- XML con la lista dei certificati di agibilità restituiti (ogni riga ha una sola colonna)
1010        			ListaFileOut			OUT		NOCOPY CLOB,					-- XML con la lista dei file da restituire. Ogni file-riga contiene le colonne
1011        																				-- 1) URI in notazione storageUtil
1012        																				-- 2) Nome con cui mostrare il file
1013        																				-- 3) mimetype
1014        																				-- 4) dimensione in bytes
1015        			ModalitaFileXPortaleOut	OUT     VARCHAR2,						-- Modalità di restituzione dei file agibiltà su portale; valori possibili:
1016        																			-- PREVIEW_PDF
1017        																			-- DOWNLOAD_ZIP
1018        			IdUDRispostaOut			OUT		INTEGER,						-- ID_UD assegnato alla risposta protocollata
1019        			IdDocRispostaOut		OUT		INTEGER,						-- ID_DOC del documento primario della risposta protocollata
1020        			EstremiProRispostaOut	OUT		VARCHAR2,						-- Estremi di protocollo in uscita assegnato alla risposta
1021        			IdUtenteInvioMailOut	OUT		VARCHAR2,						-- Id. dell'utente del modulo mail da usare per la trasmissione mail della risposta
1022        			AccountMittMailToSendOut OUT	VARCHAR2,						-- Account e-mail da cui inviare la mail con la risposta
1023        			SubjectMailToSendOut	OUT		VARCHAR2,						-- Oggetto della mail da inviare
1024        			BodyMailToSendOut		OUT		NOCOPY CLOB,					-- Corpo della mail da inviare (html)
1025        			FileAllegatiMailOut		OUT		PLS_INTEGER,					-- Se 1 il/i file delle agibilità possono essere allegati alla mail, se 0 no
1026        			IdTemplateRispostaOut	OUT		INTEGER,						-- Id del modello da usare per il pdf di risposta
1027        			URITemplateRispostaOut	OUT		VARCHAR2,						-- URI - in notazione StorageUtil - del modello da usare per il pdf di risposta
1028        			NomeTemplateRispostaOut	OUT		VARCHAR2,						-- Nome del modello da usare per il pdf di risposta
1029        			TipoTemplateOut			OUT		VARCHAR2,						-- Tipo del modello (ai fini di come si iniettano i dati)
1030        			XMLDatiXModelloOut      OUT 	NOCOPY CLOB,					-- XML SezioneCache con i dati da iniettare nel modello
1031        			ContenutoBarcodeOut		OUT		VARCHAR2,						-- Contenuto da mettere nel barcode da appore sul file della risposta
1032        			TestoInChiaroBarcodeOut	OUT		VARCHAR2,						-- Testo in chiaro da mettere vicino al barcode
1033        			ErrContextOut			OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
1034        			ErrCodeOut				OUT		PLS_INTEGER,					-- N.ro errore di uscita
1035        			ErrMsgOut				OUT 	VARCHAR2)						-- Messaggio d'errore
1036        			RETURN PLS_INTEGER;												-- Vale 1 se tutto è andato a buon fine, altrimenti 0
1037        
1038        	/****************funzione per richiedere lo sblocco del limite di agibilità che un utente può richiedere da Portale ***************/
1039        	function RichSbloccoLimAgibilita(
1040        			XMLRequestIn			IN		CLOB,							-- (obblig.) Tag XML sbloccoLimiteRichiesteRequest con i dati della request di sblocco limite richieste
1041        			ErrContextOut			OUT		VARCHAR2,						-- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
1042        			ErrCodeOut				OUT		PLS_INTEGER,					-- N.ro errore di uscita
1043        			ErrMsgOut				OUT 	VARCHAR2)						-- Messaggio d'errore
1044        			RETURN PLS_INTEGER;												-- Vale 1 se la richiesta è stata presa in carico, altrimenti 0
1045        
1046        
1047        
1048        	/****************funzione usata dal WEB SERVICE di GetDetermina che serve a recuperare dati e file di una determina (usato dal comune di Milano) ***************/
1049        	function GetDetermina(
1050        			CodIdConnectionTokenIn	IN		DMT_CONNECTION_TOKEN.CI_CONNECTION_TOKEN%TYPE,
1051        															--(obblig.) Codice identificativo del token di connessione
1052        			XMLRequestIn			IN		CLOB,			--(obblig.) XML in input al Web service di GetDetermina (secondo schema RequestGetDetermina.xsd)
1053        			XmlResponseOut			OUT		NOCOPY CLOB,	-- XML di response del web-service di GetDetermina, restituito anche in caso di errore, conforme a schema ResponseGetDetermina.xsd
1054        			ListaFileOut   			OUT		NOCOPY CLOB,	-- XML conforme a schema LISTA_STD.xsd con URI dei file (solo una colonna) da restituire come attachment in output al servizio (nell'ordine con cui sono restituiti qui)
1055        															-- Per file una sola colonna
1056        															-- 1: URI del file in notazione storageUtil
1057        			ErrContextOut			OUT		VARCHAR2,		--Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
1058        			ErrCodeOut				OUT		PLS_INTEGER,	--N.ro errore di uscita
1059        			ErrMsgOut				OUT 	VARCHAR2)		--Messaggio d'errore
1060        			RETURN PLS_INTEGER;								--Vale 1 se tutto è andato a buon fine, altrimenti 0
1061        
1062        
1063          /***************** Funzione che a partire dai livelli ricava l'id uo in rubrica	******/
1064          function GetIdUoInRubricaFromLivelli(IdSpAOOIn				      IN    DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,				    --(obblig.) Identificativo del soggetto produttore o AOO
1065        			                                 NriLivelliIn		        IN		DMT_STRUTTURA_ORG.NRI_LIVELLI%TYPE,				      --(obblig.) nri livelli
1066        			                                 IdUoInRubricaOut	     OUT		DMT_STRUTTURA_ORG.ID_UO_IN_RUBRICA%TYPE,		    -- Id. uo in rubrica
1067        			                                 ErrContextOut		     OUT		VARCHAR2,					                              --Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
1068        			                                 ErrCodeOut			       OUT		PLS_INTEGER,				                            --N.ro errore di uscita
1069        			                                 ErrMsgOut			       OUT 		VARCHAR2)					                              --Messaggio d'errore
1070        			                                 RETURN PLS_INTEGER;									--Vale 1 se tutto è andato a buon fine, altrimenti 0
1071        
1072          /***************** Funzione che a partire dai livelli ricava l'id uo 	******/
1073          function GetIdUoFromLivelli(IdSpAOOIn				      IN    DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,				    --(obblig.) Identificativo del soggetto produttore o AOO
1074        			                        NriLivelliIn		      IN		DMT_STRUTTURA_ORG.NRI_LIVELLI%TYPE,				      --(obblig.) nri livelli
1075        			                        IdUoOut	             OUT		DMT_STRUTTURA_ORG.ID_UO%TYPE,		                -- Id. uo
1076        			                        ErrContextOut		     OUT		VARCHAR2,					                              --Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
1077        			                        ErrCodeOut			     OUT		PLS_INTEGER,				                            --N.ro errore di uscita
1078        			                        ErrMsgOut			       OUT 		VARCHAR2)					                              --Messaggio d'errore
1079        			                        RETURN PLS_INTEGER;									--Vale 1 se tutto è andato a buon fine, altrimenti 0
1080        
1081          /***************** Funzione che a partire dal prov_ci_uo ricava l'id uo in rubrica	******/
1082          function GetIdUoInRubricaFromProvCiUo(IdSpAOOIn				      IN    DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,				    --(obblig.) Identificativo del soggetto produttore o AOO
1083        			                                  ProvCiUoIn		        IN		DMT_STRUTTURA_ORG.PROV_CI_UO%TYPE,				      --(obblig.) prov ci uo
1084        			                                  IdUoInRubricaOut	   OUT		DMT_STRUTTURA_ORG.ID_UO_IN_RUBRICA%TYPE,		    -- Id. uo in rubrica
1085        			                                  ErrContextOut		     OUT		VARCHAR2,					                              --Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
1086        			                                  ErrCodeOut			     OUT		PLS_INTEGER,				                            --N.ro errore di uscita
1087        			                                  ErrMsgOut			       OUT 		VARCHAR2)					                              --Messaggio d'errore
1088        			                                  RETURN PLS_INTEGER;									--Vale 1 se tutto è andato a buon fine, altrimenti 0
1089        
1090          /***************** Funzione che a partire dal prov_ci_uo ricava l'id uo 	******/
1091          function GetIdUoFromProvCiUo(IdSpAOOIn				    IN    DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,				    --(obblig.) Identificativo del soggetto produttore o AOO
1092        			                         ProvCiUoIn		        IN		DMT_STRUTTURA_ORG.PROV_CI_UO%TYPE,				      --(obblig.) prov ci uo
1093        			                         IdUoOut	           OUT		DMT_STRUTTURA_ORG.ID_UO%TYPE,		                -- Id. uo
1094        			                         ErrContextOut		   OUT		VARCHAR2,					                              --Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
1095        			                         ErrCodeOut			     OUT		PLS_INTEGER,				                            --N.ro errore di uscita
1096        			                         ErrMsgOut			     OUT 		VARCHAR2)					                              --Messaggio d'errore
1097        			                         RETURN PLS_INTEGER;									--Vale 1 se tutto è andato a buon fine, altrimenti 0
1098        
1099        
1100          /***************** Funzione che a partire dall'id uo ricava l'id uo in rubrica	******/
1101          function GetIdUoInRubricaFromIdUo(IdSpAOOIn				      IN    DMT_SOGGETTI_PROD_AOO.ID_SP_AOO%type,				    --(obblig.) Identificativo del soggetto produttore o AOO
1102        			                              IdUoIn		            IN		DMT_STRUTTURA_ORG.ID_UO%TYPE,				            --(obblig.) Id. uo
1103        			                              IdUoInRubricaOut	   OUT		DMT_STRUTTURA_ORG.ID_UO_IN_RUBRICA%TYPE,		    -- Id. uo in rubrica
1104        			                              ErrContextOut		     OUT		VARCHAR2,					                              --Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
1105        			                              ErrCodeOut			     OUT		PLS_INTEGER,				                            --N.ro errore di uscita
1106        			                              ErrMsgOut			       OUT 		VARCHAR2)					                              --Messaggio d'errore
1107        			                              RETURN PLS_INTEGER;									--Vale 1 se tutto è andato a buon fine, altrimenti 0
1108        
1109        
1110          /***************** Funzione che a partire dal prov_ci_classificazione ricava l'id classificazione 	******/
1111          function GetIdClassifFromProvCiClassif(IdPianoClassifIn            IN   DMT_TITOLARIO.ID_PIANO_CLASSIF%type,				  --(obblig.) Identificativo del piano di classificazione
1112        			                                   ProvCiClassificazioneIn		 IN		DMT_TITOLARIO.PROV_CI_CLASSIFICAZIONE%TYPE,	  --(obblig.) prov ci classificazione
1113        			                                   IdClassificazioneOut	       OUT	DMT_TITOLARIO.ID_CLASSIFICAZIONE%TYPE,		    -- Id. classificazione
1114        			                                   ErrContextOut		           OUT	VARCHAR2,					                            -- Contesto (ovvero package e/o funzione/procedura) in cui si è verificato l'errore; se NULL è la funzione stessa
1115        			                                   ErrCodeOut			             OUT	PLS_INTEGER,				                          -- N.ro errore di uscita
1116        			                                   ErrMsgOut			             OUT 	VARCHAR2)					                            -- Messaggio d'errore
1117        			                                   RETURN PLS_INTEGER;									--Vale 1 se tutto è andato a buon fine, altrimenti 0
1118        
1119        END Dmpk_Ws;
